CÓDIGO DEL PROYECTO
Generado: 4/3/2025, 18:32:07


=====================================================
Archivo: eslint.config.mjs
=====================================================

import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;


=====================================================
Archivo: next-env.d.ts
=====================================================

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


=====================================================
Archivo: next.config.ts
=====================================================

// my-app\next.config.ts

import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;


=====================================================
Archivo: package.json
=====================================================

{
  "name": "my-app",
  "version": "0.1.0",
  "private": true,
"scripts": {
  "dev": "next dev",
  "build": "next build",
  "start": "next start",
  "lint": "next lint",
  "seed": "ts-node --compiler-options {\"module\":\"CommonJS\"} prisma/seed.ts",
   "list": "bash -c 'find . -type d \\( -name \"node_modules\" -o -name \".next\" \\) -prune -o -print'",
   "extract-code": "ts-node scripts/extract-code.ts"
}
,
  "prisma": {
    "seed": "ts-node --compiler-options {\"module\":\"CommonJS\"} prisma/seed.ts"
  },
  "dependencies": {
    "@prisma/client": "^5.10.0",
    "next": "^14.1.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "date-fns": "^2.30.0",
    "@radix-ui/react-slot": "^1.0.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "tailwind-merge": "^2.2.1"
  },
  "devDependencies": {
    "@types/node": "^20.11.19",
    "@types/react": "^18.2.57",
    "@types/react-dom": "^18.2.19",
    "autoprefixer": "^10.4.17",
    "eslint": "^8.56.0",
    "eslint-config-next": "^14.1.0",
    "postcss": "^8.4.35",
    "prisma": "^5.10.0",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.3.3",
    "ts-node": "^10.9.2"
  }
}

=====================================================
Archivo: postcss.config.mjs
=====================================================

/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;


=====================================================
Archivo: README.md
=====================================================

This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.


=====================================================
Archivo: scripts\extract-code.ts
=====================================================

const fs = require('fs');
const path = require('path');
const util = require('util');

// Convertir métodos fs a promesas
const readdir = util.promisify(fs.readdir);
const stat = util.promisify(fs.stat);
const readFile = util.promisify(fs.readFile);
const writeFile = util.promisify(fs.writeFile);

// Archivos y directorios a ignorar
const ignoreList: string[] = [
  '.git',
  'node_modules',
  'dist',
  '.next',
  '.vercel',
  'package-lock.json',
  'yarn.lock',
  '.DS_Store',
  '*.log',
  '*.png',
  '*.jpg',
  '*.jpeg',
  '*.gif',
  '*.ico',
  '*.svg'
];

// Extensiones de archivos que contienen código
const codeExtensions: string[] = [
  '.js', '.jsx', '.ts', '.tsx', '.css', '.scss', '.html', '.json', 
  '.md', '.mdx', '.prisma', '.graphql', '.yml', '.yaml', '.env',
  '.config.js', '.config.ts', '.config.mjs', '.mjs'
];

// Función para verificar si un archivo/directorio debe ignorarse
function shouldIgnore(filePath: string): boolean {
  return ignoreList.some(pattern => {
    if (pattern.startsWith('*.')) {
      // Es un patrón de extensión
      const ext = pattern.replace('*', '');
      return filePath.endsWith(ext);
    }
    return filePath.includes(pattern);
  });
}

// Función para verificar si un archivo contiene código
function isCodeFile(filePath: string): boolean {
  return codeExtensions.some(ext => {
    if (ext.startsWith('.config.')) {
      return filePath.endsWith(ext);
    }
    return path.extname(filePath) === ext;
  });
}

// Función principal para recorrer directorios recursivamente
async function traverseDirectory(dir: string, output: string = '', baseDir: string = ''): Promise<string> {
  try {
    const files = await readdir(dir);
    
    for (const file of files) {
      const filePath = path.join(dir, file);
      const relativePath = path.join(baseDir, file);
      
      if (shouldIgnore(filePath)) {
        continue;
      }
      
      const fileStat = await stat(filePath);
      
      if (fileStat.isDirectory()) {
        // Si es un directorio, recorrer recursivamente
        output = await traverseDirectory(filePath, output, relativePath);
      } else if (isCodeFile(filePath)) {
        try {
          // Si es un archivo de código, leer su contenido
          const content = await readFile(filePath, 'utf8');
          output += `\n\n=====================================================\n`;
          output += `Archivo: ${relativePath}\n`;
          output += `=====================================================\n\n`;
          output += content;
        } catch (error) {
          output += `\n\n=====================================================\n`;
          output += `Error al leer el archivo: ${relativePath}\n`;
          output += `=====================================================\n\n`;
          output += `Error: ${(error as Error).message}`;
        }
      }
    }
    
    return output;
  } catch (error) {
    console.error(`Error al leer el directorio ${dir}:`, error);
    return output;
  }
}

// Punto de entrada del script
async function main(): Promise<void> {
  const projectRoot = process.cwd();
  const outputFile = path.join(projectRoot, 'project-code.txt');
  
  console.log(`Analizando el proyecto en: ${projectRoot}`);
  console.log('Extrayendo código, por favor espera...');
  
  let output = `CÓDIGO DEL PROYECTO\nGenerado: ${new Date().toLocaleString()}\n`;
  output = await traverseDirectory(projectRoot, output);
  
  await writeFile(outputFile, output, 'utf8');
  
  console.log(`\n✅ Proceso completado. Código extraído en: ${outputFile}`);
  console.log(`Total caracteres generados: ${output.length}`);
}

main().catch(error => {
  console.error('Error en el proceso:', error);
  process.exit(1);
});

module.exports = {};

=====================================================
Archivo: src\app\admin\barberos\page.tsx
=====================================================

'use client';

import { useState, useEffect } from 'react';
import BarberoForm from '@/components/BarberoForm';
import AdminLayout from '@/components/AdminLayout';

interface Sucursal {
  id: number;
  nombre: string;
}

interface Servicio {
  id: number;
  nombre: string;
  duracion: number;
  precio: number;
}

interface Barbero {
  id?: number;
  nombre: string;
  apellido: string;
  email: string;
  telefono: string;
  foto?: string;
  especialidad?: string;
  experiencia?: number;
  calificacion?: number;
  instagram?: string;
  biografia?: string;
  sucursales?: {
    sucursalId: number;
    sucursal: {
      id: number;
      nombre: string;
    }
  }[];
  servicios?: {
    servicioId: number;
    servicio: {
      id: number;
      nombre: string;
    }
  }[];
}

export default function BarberosPage() {
  const [barberos, setBarberos] = useState<Barbero[]>([]);
  const [mostrarFormulario, setMostrarFormulario] = useState(false);
  const [barberoEditando, setBarberoEditando] = useState<Barbero | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [barberosFiltrados, setBarberosFiltrados] = useState<Barbero[]>([]);

  // Cargar datos iniciales
  useEffect(() => {
    fetchBarberos();
  }, []);

  // Filtrar barberos cuando cambia el término de búsqueda
  useEffect(() => {
    if (searchQuery.trim() === '') {
      setBarberosFiltrados(barberos);
      return;
    }
    
    const query = searchQuery.toLowerCase().trim();
    const filtrados = barberos.filter(barbero => 
      barbero.nombre.toLowerCase().includes(query) || 
      barbero.apellido.toLowerCase().includes(query) || 
      barbero.email.toLowerCase().includes(query) || 
      (barbero.especialidad || '').toLowerCase().includes(query) ||
      barbero.sucursales?.some(s => s.sucursal.nombre.toLowerCase().includes(query)) ||
      barbero.servicios?.some(s => s.servicio.nombre.toLowerCase().includes(query))
    );
    
    setBarberosFiltrados(filtrados);
  }, [searchQuery, barberos]);

  const fetchBarberos = async () => {
    try {
      setLoading(true);
      
      // Cargar barberos con toda su información
      const responseBarberos = await fetch('/api/barberos?incluirSucursales=true');
      if (!responseBarberos.ok) throw new Error('Error al cargar barberos');
      const barberos = await responseBarberos.json();
      
      setBarberos(barberos);
      setBarberosFiltrados(barberos);
    } catch (error) {
      console.error('Error:', error);
      setError('Error al cargar los datos');
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (barbero: Barbero) => {
    setBarberoEditando(barbero);
    setMostrarFormulario(true);
  };

  const handleDelete = async (id: number) => {
    if (!confirm('¿Está seguro de eliminar este barbero?')) return;
    
    try {
      const response = await fetch(`/api/admin/barberos/${id}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) {
        throw new Error('Error al eliminar barbero');
      }
      
      // Actualizar lista
      setBarberos(prev => prev.filter(b => b.id !== id));
      setBarberosFiltrados(prev => prev.filter(b => b.id !== id));
    } catch (error) {
      console.error('Error:', error);
      alert('Error al eliminar el barbero');
    }
  };

  const handleFormSuccess = () => {
    setMostrarFormulario(false);
    setBarberoEditando(null);
    fetchBarberos(); // Recargar datos
  };

  // Renderizar estrellas según la calificación
  const renderEstrellas = (calificacion: number = 0) => {
    const estrellas = [];
    const fullStars = Math.floor(calificacion);
    const hasHalfStar = calificacion % 1 >= 0.5;
    
    for (let i = 0; i < fullStars; i++) {
      estrellas.push(
        <svg key={`full-${i}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-4 h-4 text-yellow-400">
          <path fillRule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clipRule="evenodd" />
        </svg>
      );
    }
    
    if (hasHalfStar) {
      estrellas.push(
        <svg key="half" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" className="w-4 h-4 text-yellow-400">
          <path fillRule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clipRule="evenodd" fill="url(#half-star)" />
          <defs>
            <linearGradient id="half-star" x1="0" x2="1" y1="0" y2="0">
              <stop offset="50%" stopColor="#FACC15" />
              <stop offset="50%" stopColor="#374151" />
            </linearGradient>
          </defs>
        </svg>
      );
    }
    
    // Añadir estrellas vacías
    const emptyStars = 5 - estrellas.length;
    for (let i = 0; i < emptyStars; i++) {
      estrellas.push(
        <svg key={`empty-${i}`} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4 text-gray-500">
          <path strokeLinecap="round" strokeLinejoin="round" d="M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.84.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 20.54a.562.562 0 01-.84-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z" />
        </svg>
      );
    }
    
    return estrellas;
  };

  // Barra de búsqueda y botón de nuevo barbero
  const headerActions = (
    <>
      <div className="relative flex-grow">
        <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
          <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
        <input
          type="search"
          className="block w-full p-2 pl-10 text-sm bg-gray-800 border border-gray-600 placeholder-gray-400 text-white rounded-lg focus:ring-blue-500 focus:border-blue-500"
          placeholder="Buscar barbero..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        {searchQuery && (
          <button
            className="absolute inset-y-0 right-0 flex items-center pr-3"
            onClick={() => setSearchQuery('')}
          >
            <svg className="w-4 h-4 text-gray-400 hover:text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        )}
      </div>
      
      <button 
        onClick={() => {
          setBarberoEditando(null);
          setMostrarFormulario(true);
        }} 
        className="bg-blue-600/30 hover:bg-blue-700/40 text-blue-300 py-2 px-4 rounded transition-colors flex items-center gap-2 whitespace-nowrap"
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
        </svg>
        <span>Nuevo Barbero</span>
      </button>
    </>
  );

  if (loading) {
    return (
      <AdminLayout title="Gestión de Barberos" currentPage="barberos">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </AdminLayout>
    );
  }

  return (
    <AdminLayout title="Gestión de Barberos" currentPage="barberos" actions={headerActions}>
      {/* Formulario mejorado */}
      {mostrarFormulario && (
        <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl border border-gray-700/30 mb-8">
          <div className="p-5">
            <h3 className="text-xl font-bold text-white mb-4">
              {barberoEditando ? 'Editar Barbero' : 'Nuevo Barbero'}
            </h3>
            <BarberoForm 
              barberoId={barberoEditando?.id} 
              onSuccess={handleFormSuccess} 
            />
          </div>
        </div>
      )}

      {/* Mensaje de no resultados */}
      {barberosFiltrados.length === 0 && !loading && !error && (
        <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-8 text-center border border-gray-700/30">
          <p className="text-gray-400">
            {searchQuery 
              ? `No se encontraron barberos que coincidan con "${searchQuery}"`
              : "No hay barberos registrados"}
          </p>
        </div>
      )}

      {/* Mensaje de error */}
      {error && (
        <div className="bg-red-900/20 backdrop-blur-sm border border-red-600/30 text-red-400 p-4 rounded-lg mb-6">
          {error}
        </div>
      )}

      {/* Lista de Barberos - Grid responsive */}
      {!loading && !error && barberosFiltrados.length > 0 && (
        <div className="grid gap-6 sm:grid-cols-2 xl:grid-cols-3">
          {barberosFiltrados.map(barbero => (
            <div key={barbero.id} className="bg-gradient-to-br from-gray-800 to-gray-900 rounded-lg shadow-lg overflow-hidden hover:shadow-blue-900/20 hover:translate-y-[-2px] transition-all duration-300">
              {/* Sección superior con foto/avatar */}
              <div className="h-40 bg-gray-700 relative">
                {barbero.foto ? (
                  <img 
                    src={barbero.foto} 
                    alt={`${barbero.nombre} ${barbero.apellido}`} 
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-600/20 to-purple-600/20">
                    <div className="w-20 h-20 rounded-full bg-gray-800 border-4 border-white/20 flex items-center justify-center text-white text-3xl font-bold">
                      {barbero.nombre?.[0]}{barbero.apellido?.[0]}
                    </div>
                  </div>
                )}
                {/* Gradiente oscuro superpuesto */}
                <div className="absolute inset-0 bg-gradient-to-t from-gray-900 to-transparent"></div>
                
                {/* Información básica superpuesta */}
                <div className="absolute bottom-3 left-4 right-4">
                  <h3 className="text-xl font-bold text-white">{barbero.nombre} {barbero.apellido}</h3>
                  {barbero.especialidad && (
                    <div className="flex items-center mt-1">
                      <span className="text-sm text-gray-300">{barbero.especialidad}</span>
                    </div>
                  )}
                </div>
              </div>
              
              <div className="p-5">
                {/* Información de contacto */}
                <div className="space-y-1 text-gray-300 text-sm mb-3">
                  <p className="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                    </svg>
                    {barbero.email}
                  </p>
                  {barbero.telefono && (
                    <p className="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                      </svg>
                      {barbero.telefono}
                    </p>
                  )}
                  {barbero.instagram && (
                    <p className="flex items-center">
                      <svg className="h-4 w-4 mr-2 text-pink-500" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465a4.902 4.902 0 011.772 1.153 4.902 4.902 0 011.153 1.772c.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.902 4.902 0 01-1.153 1.772 4.902 4.902 0 01-1.772 1.153c-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.902 4.902 0 01-1.772-1.153 4.902 4.902 0 01-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 011.153-1.772A4.902 4.902 0 015.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63z"></path>
                        <path d="M12 7.5a4.5 4.5 0 100 9 4.5 4.5 0 000-9zm0 7.5a3 3 0 110-6 3 3 0 010 6z"></path>
                        <circle cx="16.5" cy="7.5" r="1.5"></circle>
                      </svg>
                      {barbero.instagram}
                    </p>
                  )}
                </div>
                
                {/* Calificación y experiencia */}
                <div className="flex items-center justify-between mb-3">
                  {barbero.calificacion && (
                    <div className="flex items-center">
                      <div className="flex mr-1">
                        {renderEstrellas(barbero.calificacion)}
                      </div>
                      <span className="text-gray-400 text-xs">({barbero.calificacion.toFixed(1)})</span>
                    </div>
                  )}
                  
                  {barbero.experiencia && (
                    <span className="text-xs bg-blue-900/50 text-blue-200 px-2 py-1 rounded">
                      {barbero.experiencia} años exp.
                    </span>
                  )}
                </div>
                
                {/* Sucursales */}
                {barbero.sucursales && barbero.sucursales.length > 0 && (
                  <div className="mt-3">
                    <p className="text-xs text-gray-400 mb-1">Sucursales:</p>
                    <div className="flex flex-wrap gap-1">
                      {barbero.sucursales.map(s => (
                        <span key={s.sucursalId} className="px-2 py-1 bg-blue-900/40 text-blue-200 text-xs rounded">
                          {s.sucursal.nombre}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                {/* Servicios */}
                {barbero.servicios && barbero.servicios.length > 0 && (
                  <div className="mt-3">
                    <p className="text-xs text-gray-400 mb-1">Servicios:</p>
                    <div className="flex flex-wrap gap-1">
                      {barbero.servicios.map(s => (
                        <span key={s.servicioId} className="px-2 py-1 bg-green-900/40 text-green-200 text-xs rounded">
                          {s.servicio.nombre}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
                
                {/* Acciones */}
                <div className="flex justify-end mt-4 pt-3 border-t border-gray-700">
                  <button
                    onClick={() => handleEdit(barbero)}
                    className="text-sm text-blue-400 hover:text-blue-300 flex items-center mr-4"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                    </svg>
                    Editar
                  </button>
                  
                  <button
                    onClick={() => barbero.id && handleDelete(barbero.id)}
                    className="text-sm text-red-400 hover:text-red-300 flex items-center"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                    Eliminar
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Vista móvil optimizada para pantallas pequeñas */}
      <div className="md:hidden fixed bottom-4 right-4 z-10">
        <button 
          onClick={() => {
            setBarberoEditando(null);
            setMostrarFormulario(true);
          }}
          className="bg-blue-600 text-white rounded-full w-14 h-14 flex items-center justify-center shadow-lg"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
          </svg>
        </button>
      </div>
    </AdminLayout>
  );
}

=====================================================
Archivo: src\app\admin\clientes\page.tsx
=====================================================

'use client';

import { useState, useEffect } from 'react';
import AdminLayout from '@/components/AdminLayout';

interface Cliente {
  id?: number;
  nombre: string;
  apellido: string;
  email: string;
  telefono: string;
  turnos?: {
    id: number;
    fecha: string;
    estado: string;
  }[];
}

export default function ClientesPage() {
  const [clientes, setClientes] = useState<Cliente[]>([]);
  const [mostrarFormulario, setMostrarFormulario] = useState(false);
  const [clienteEditando, setClienteEditando] = useState<Cliente>({
    nombre: '',
    apellido: '',
    email: '',
    telefono: '',
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [busqueda, setBusqueda] = useState('');
  const [clientesFiltrados, setClientesFiltrados] = useState<Cliente[]>([]);

  // Cargar datos iniciales
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await fetch('/api/clientes');
        
        if (!response.ok) {
          throw new Error('Error al cargar clientes');
        }
        
        const data = await response.json();
        setClientes(data);
        setClientesFiltrados(data);
      } catch (error) {
        console.error('Error:', error);
        setError('Error al cargar los datos');
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, []);

  // Filtrar clientes cuando cambia la búsqueda
  useEffect(() => {
    if (busqueda.trim() === '') {
      setClientesFiltrados(clientes);
      return;
    }
    
    const termino = busqueda.toLowerCase();
    const filtrados = clientes.filter(cliente => 
      cliente.nombre.toLowerCase().includes(termino) || 
      cliente.apellido.toLowerCase().includes(termino) || 
      cliente.email.toLowerCase().includes(termino) || 
      cliente.telefono.toLowerCase().includes(termino)
    );
    
    setClientesFiltrados(filtrados);
  }, [busqueda, clientes]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const clienteData = {
        ...clienteEditando
      };
      
      const url = clienteData.id 
        ? `/api/admin/clientes/${clienteData.id}` 
        : '/api/admin/clientes';
      
      const method = clienteData.id ? 'PUT' : 'POST';
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(clienteData),
      });
      
      if (!response.ok) {
        throw new Error('Error al guardar cliente');
      }
      
      // Recargar datos
      const clientesResponse = await fetch('/api/clientes');
      const clientesData = await clientesResponse.json();
      
      setClientes(clientesData);
      setClientesFiltrados(clientesData);
      
      // Limpiar formulario
      setMostrarFormulario(false);
      setClienteEditando({
        nombre: '',
        apellido: '',
        email: '',
        telefono: '',
      });
    } catch (error) {
      console.error('Error:', error);
      alert('Error al guardar el cliente');
    }
  };

  const handleEdit = (cliente: Cliente) => {
    setClienteEditando({
      id: cliente.id,
      nombre: cliente.nombre,
      apellido: cliente.apellido,
      email: cliente.email,
      telefono: cliente.telefono,
    });
    setMostrarFormulario(true);
  };

  const handleDelete = async (id: number) => {
    if (!confirm('¿Está seguro de eliminar este cliente? Esta acción eliminará también todas sus reservas.')) return;
    
    try {
      const response = await fetch(`/api/admin/clientes/${id}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) {
        throw new Error('Error al eliminar cliente');
      }
      
      // Actualizar lista
      setClientes(prev => prev.filter(c => c.id !== id));
      setClientesFiltrados(prev => prev.filter(c => c.id !== id));
    } catch (error) {
      console.error('Error:', error);
      alert('Error al eliminar el cliente');
    }
  };

  const verHistorialTurnos = (id: number) => {
    window.location.href = `/admin/clientes/${id}/turnos`;
  };

  // Barra de búsqueda y botón de nuevo cliente
  const headerActions = (
    <>
      <div className="relative flex-grow">
        <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
          <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
        <input
          type="search"
          className="block w-full p-2 pl-10 text-sm bg-gray-800 border border-gray-600 placeholder-gray-400 text-white rounded-lg focus:ring-blue-500 focus:border-blue-500"
          placeholder="Buscar cliente por nombre, email..."
          value={busqueda}
          onChange={(e) => setBusqueda(e.target.value)}
        />
        {busqueda && (
          <button
            className="absolute inset-y-0 right-0 flex items-center pr-3"
            onClick={() => setBusqueda('')}
          >
            <svg className="w-4 h-4 text-gray-400 hover:text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        )}
      </div>
      
      <button 
        onClick={() => {
          setClienteEditando({
            nombre: '',
            apellido: '',
            email: '',
            telefono: '',
          });
          setMostrarFormulario(true);
        }} 
        className="bg-blue-600/30 hover:bg-blue-700/40 text-blue-300 py-2 px-4 rounded transition-colors flex items-center gap-2 whitespace-nowrap"
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
        </svg>
        <span>Nuevo Cliente</span>
      </button>
    </>
  );

  if (loading) {
    return (
      <AdminLayout title="Gestión de Clientes" currentPage="clientes">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </AdminLayout>
    );
  }

  return (
    <AdminLayout title="Gestión de Clientes" currentPage="clientes" actions={headerActions}>
      {/* Formulario de Cliente */}
      {mostrarFormulario && (
        <div className="bg-gray-800/50 backdrop-blur-sm rounded-lg p-6 mb-8 shadow-lg">
          <h3 className="text-xl font-bold text-white mb-4">
            {clienteEditando.id ? 'Editar Cliente' : 'Nuevo Cliente'}
          </h3>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-200 mb-1">Nombre</label>
                <input
                  type="text"
                  value={clienteEditando.nombre}
                  onChange={(e) => setClienteEditando({...clienteEditando, nombre: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-200 mb-1">Apellido</label>
                <input
                  type="text"
                  value={clienteEditando.apellido}
                  onChange={(e) => setClienteEditando({...clienteEditando, apellido: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600"
                  required
                />
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-200 mb-1">Email</label>
                <input
                  type="email"
                  value={clienteEditando.email}
                  onChange={(e) => setClienteEditando({...clienteEditando, email: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-200 mb-1">Teléfono</label>
                <input
                  type="tel"
                  value={clienteEditando.telefono}
                  onChange={(e) => setClienteEditando({...clienteEditando, telefono: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600"
                  required
                />
              </div>
            </div>
            
            <div className="flex justify-end space-x-3 pt-4">
              <button
                type="button"
                onClick={() => setMostrarFormulario(false)}
                className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-500 transition"
              >
                Cancelar
              </button>
              <button
                type="submit"
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-500 transition"
              >
                Guardar
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Mensaje de no resultados */}
      {clientesFiltrados.length === 0 && !loading && !error && (
        <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-8 text-center border border-gray-700/30">
          <p className="text-gray-400">
            {busqueda 
              ? `No se encontraron clientes que coincidan con "${busqueda}"`
              : "No hay clientes registrados"}
          </p>
        </div>
      )}

      {/* Mensaje de error */}
      {error && (
        <div className="bg-red-900/20 backdrop-blur-sm border border-red-600/30 text-red-400 p-4 rounded-lg mb-6">
          {error}
        </div>
      )}

      {/* Lista de Clientes */}
      {!loading && !error && clientesFiltrados.length > 0 && (
        <div className="overflow-x-auto bg-gray-800/50 backdrop-blur-sm rounded-xl border border-gray-700/30">
          <table className="w-full text-left text-gray-300">
            <thead className="text-xs uppercase bg-gray-700/30 text-gray-300">
              <tr>
                <th className="px-6 py-3">Nombre</th>
                <th className="px-6 py-3">Email</th>
                <th className="px-6 py-3">Teléfono</th>
                <th className="px-6 py-3 text-right">Acciones</th>
              </tr>
            </thead>
            <tbody>
              {clientesFiltrados.map(cliente => (
                <tr key={cliente.id} className="border-b border-gray-700 bg-gray-800/10 hover:bg-gray-700/20">
                  <td className="px-6 py-4 font-medium whitespace-nowrap">
                    {cliente.nombre} {cliente.apellido}
                  </td>
                  <td className="px-6 py-4">{cliente.email}</td>
                  <td className="px-6 py-4">{cliente.telefono}</td>
                  <td className="px-6 py-4 text-right">
                    <div className="flex justify-end space-x-2">
                      <button
                        onClick={() => handleEdit(cliente)}
                        className="font-medium text-blue-400 hover:text-blue-300"
                        title="Editar"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                          <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                        </svg>
                      </button>
                      <button
                        onClick={() => cliente.id && handleDelete(cliente.id)}
                        className="font-medium text-red-400 hover:text-red-300"
                        title="Eliminar"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                        </svg>
                      </button>
                      <button
                        onClick={() => cliente.id && verHistorialTurnos(cliente.id)}
                        className="font-medium text-green-400 hover:text-green-300"
                        title="Ver historial"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clipRule="evenodd" />
                        </svg>
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* Vista móvil para agregar clientes */}
      <div className="md:hidden fixed bottom-4 right-4 z-10">
        <button 
          onClick={() => {
            setClienteEditando({
              nombre: '',
              apellido: '',
              email: '',
              telefono: '',
            });
            setMostrarFormulario(true);
          }}
          className="bg-blue-600 text-white rounded-full w-14 h-14 flex items-center justify-center shadow-lg"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
          </svg>
        </button>
      </div>
    </AdminLayout>
  );
}

=====================================================
Archivo: src\app\admin\dashboard\page.tsx
=====================================================

'use client';

import { useState, useEffect } from 'react';
import { format } from 'date-fns';
import AdminLayout from '@/components/AdminLayout';

interface Servicio {
  id: number;
  nombre: string;
  precio: number;
  duracion: number;
}

interface Turno {
  id: number;
  fecha: string;
  estado: string;
  cliente: {
    nombre: string;
    email: string;
    telefono: string;
  };
  barbero: {
    nombre: string;
  };
  sucursal: {
    id: number;
    nombre: string;
  };
  servicios: Servicio[];
  precioTotal: number;
  duracionTotal: number;
}

type SortField = 'id' | 'fecha' | 'cliente' | 'barbero' | 'servicio' | 'estado' | 'sucursal';
type SortOrder = 'asc' | 'desc';

export default function AdminDashboard() {
  const [turnos, setTurnos] = useState<Turno[]>([]);
  const [turnosOrdenados, setTurnosOrdenados] = useState<Turno[]>([]);
  const [loading, setLoading] = useState(true);
  const [sortField, setSortField] = useState<SortField>('fecha');
  const [sortOrder, setSortOrder] = useState<SortOrder>('asc');
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [filterStatus, setFilterStatus] = useState<string | null>(null);

  const fetchTurnos = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/turnos');
      
      if (!response.ok) throw new Error('Error al cargar turnos');
      
      const data = await response.json();
      setTurnos(data);
      ordenarTurnos(data, sortField, sortOrder);
    } catch (error) {
      console.error('Error:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTurnos();
  }, []);

  useEffect(() => {
    ordenarTurnos(turnos, sortField, sortOrder);
  }, [sortField, sortOrder, turnos, filterStatus, searchQuery]);

  const ordenarTurnos = (turnos: Turno[], campo: SortField, orden: SortOrder) => {
    // Primero aplicamos filtros si existen
    let turnosFiltrados = [...turnos];
    
    // Filtrar por estado si está seleccionado
    if (filterStatus) {
      turnosFiltrados = turnosFiltrados.filter(turno => turno.estado === filterStatus);
    }
    
    // Buscar por texto si hay una consulta
    if (searchQuery.trim() !== '') {
      const query = searchQuery.toLowerCase().trim();
      turnosFiltrados = turnosFiltrados.filter(turno => 
        turno.id.toString().includes(query) ||
        turno.cliente.nombre.toLowerCase().includes(query) ||
        turno.cliente.email.toLowerCase().includes(query) ||
        turno.barbero.nombre.toLowerCase().includes(query) ||
        (turno.sucursal?.nombre || '').toLowerCase().includes(query) ||
        turno.estado.toLowerCase().includes(query) ||
        turno.servicios.some(s => s.nombre.toLowerCase().includes(query))
      );
    }
    
    // Luego ordenamos
    const sorted = turnosFiltrados.sort((a, b) => {
      let valorA: any, valorB: any;
      
      switch (campo) {
        case 'id': valorA = a.id; valorB = b.id; break;
        case 'fecha': valorA = new Date(a.fecha); valorB = new Date(b.fecha); break;
        case 'cliente': valorA = a.cliente.nombre.toLowerCase(); valorB = b.cliente.nombre.toLowerCase(); break;
        case 'barbero': valorA = a.barbero.nombre.toLowerCase(); valorB = b.barbero.nombre.toLowerCase(); break;
        case 'servicio': valorA = a.servicios[0]?.nombre?.toLowerCase() || ''; valorB = b.servicios[0]?.nombre?.toLowerCase() || ''; break;
        case 'estado': valorA = a.estado.toLowerCase(); valorB = b.estado.toLowerCase(); break;
        case 'sucursal': valorA = a.sucursal?.nombre?.toLowerCase() || ''; valorB = b.sucursal?.nombre?.toLowerCase() || ''; break;
        default: valorA = a.fecha; valorB = b.fecha;
      }

      return orden === 'asc' ? valorA > valorB ? 1 : -1 : valorA < valorB ? 1 : -1;
    });

    setTurnosOrdenados(sorted);
  };

  const handleSort = (campo: SortField) => {
    setSortField(prev => campo === prev ? prev : campo);
    setSortOrder(prev => campo === sortField ? prev === 'asc' ? 'desc' : 'asc' : 'asc');
  };

  const renderSortIcon = (campo: SortField) => (
    <svg xmlns="http://www.w3.org/2000/svg" className={`h-4 w-4 ml-1 ${sortField === campo ? 'opacity-100' : 'opacity-30'}`} viewBox="0 0 20 20" fill="currentColor">
      <path fillRule="evenodd" d={sortOrder === 'asc' ? "M3 3a1 1 0 000 2h11a1 1 0 100-2H3zm0 4a1 1 0 000 2h7a1 1 0 100-2H3zm0 4a1 1 0 100 2h4a1 1 0 100-2H3z" : "M3 3a1 1 0 000 2h11a1 1 0 100-2H3zm0 4a1 1 0 000 2h5a1 1 0 000-2H3zm0 4a1 1 0 000 2h4a1 1 0 100-2H3z"} clipRule="evenodd" />
    </svg>
  );

  const handleEstadoChange = async (id: number, nuevoEstado: string) => {
    try {
      const response = await fetch(`/api/admin/turnos/${id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ estado: nuevoEstado }),
      });

      response.ok && fetchTurnos();
    } catch (error) {
      console.error('Error:', error);
    }
  };

  const ServiciosCell = ({ servicios, precioTotal, duracionTotal }: { 
    servicios: Servicio[], 
    precioTotal: number,
    duracionTotal: number 
  }) => {
    const [expanded, setExpanded] = useState(false);
    
    return (
      <div className="group relative">
        <div 
          className="font-medium cursor-pointer"
          onClick={() => servicios.length > 1 && setExpanded(!expanded)}
        >
          {servicios[0]?.nombre}
          {servicios.length > 1 && (
            <span className="ml-2 bg-blue-600 text-white text-xs rounded-full px-1.5">
              +{servicios.length - 1}
            </span>
          )}
        </div>
        <div className="text-sm text-gray-400">
          {duracionTotal} min · ${precioTotal.toFixed(2)}
        </div>
        
        {/* Dropdown con todos los servicios */}
        {expanded && servicios.length > 1 && (
          <div className="absolute top-full left-0 z-10 mt-1 w-64 rounded-md shadow-lg bg-gray-800 border border-gray-700 p-2">
            <div className="text-sm font-medium text-white mb-1">Servicios incluidos:</div>
            <ul className="space-y-1">
              {servicios.map((servicio, idx) => (
                <li key={idx} className="flex justify-between items-center text-sm">
                  <span className="text-gray-200">{servicio.nombre}</span>
                  <span className="text-gray-400">${servicio.precio.toFixed(2)}</span>
                </li>
              ))}
            </ul>
            <div className="mt-2 pt-2 border-t border-gray-700 flex justify-between text-sm">
              <span className="font-medium text-blue-300">Total</span>
              <span className="font-medium text-blue-300">${precioTotal.toFixed(2)}</span>
            </div>
          </div>
        )}
      </div>
    );
  };

  const getBadgeClass = (estado: string) => {
    const classes = {
      'PENDIENTE': 'bg-yellow-600/30 text-yellow-300',
      'CONFIRMADO': 'bg-green-600/30 text-green-300',
      'CANCELADO': 'bg-red-600/30 text-red-300',
      'COMPLETADO': 'bg-blue-600/30 text-blue-300'
    };
    return classes[estado as keyof typeof classes] || 'bg-gray-600/30 text-gray-300';
  };

  // Acciones para el encabezado
  const dashboardActions = (
    <>
      <div className="relative flex-grow max-w-md">
        <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
          <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
        <input
          type="search"
          className="block w-full p-2 pl-10 text-sm bg-gray-800 border border-gray-600 placeholder-gray-400 text-white rounded-lg focus:ring-blue-500 focus:border-blue-500"
          placeholder="Buscar turno..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        {searchQuery && (
          <button
            className="absolute inset-y-0 right-0 flex items-center pr-3"
            onClick={() => setSearchQuery('')}
          >
            <svg className="w-4 h-4 text-gray-400 hover:text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        )}
      </div>
      
      <button 
        onClick={fetchTurnos}
        className="px-3 py-1.5 md:px-4 md:py-2 bg-blue-600/30 hover:bg-blue-700/40 text-blue-300 rounded-md text-sm font-medium transition-colors"
      >
        Actualizar
      </button>
    </>
  );

  if (loading) {
    return (
      <AdminLayout title="Dashboard" currentPage="dashboard">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </AdminLayout>
    );
  }

  return (
    <AdminLayout title="Turnos Reservados" currentPage="dashboard" actions={dashboardActions}>
      {/* Filtros de estado */}
      {/* <div className="mb-6 flex flex-wrap gap-2">
        <div className="flex items-center mr-4">
          <span className="text-sm text-gray-400 mr-2">Estado:</span>
          <div className="flex gap-1">
            {['PENDIENTE', 'CONFIRMADO', 'CANCELADO', 'COMPLETADO'].map((estado) => (
              <button
                key={estado}
                onClick={() => setFilterStatus(filterStatus === estado ? null : estado)}
                className={`px-2 py-1 rounded-md text-xs ${
                  filterStatus === estado 
                    ? `${getBadgeClass(estado)} font-medium` 
                    : 'bg-gray-700/50 text-gray-300'
                }`}
              >
                {estado}
              </button>
            ))}
            {filterStatus && (
              <button 
                onClick={() => setFilterStatus(null)}
                className="px-2 py-1 bg-gray-700 text-xs rounded hover:bg-gray-600 text-gray-300"
              >
                Limpiar
              </button>
            )}
          </div>
        </div>
      </div> */}

      {/* Mensaje de no resultados */}
      {turnosOrdenados.length === 0 && (
        <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-8 text-center border border-gray-700/30">
          <p className="text-gray-400">
            {filterStatus && !searchQuery 
              ? `No hay turnos con estado "${filterStatus}"`
              : searchQuery && !filterStatus 
              ? `No hay resultados para "${searchQuery}"`
              : searchQuery && filterStatus 
              ? `No hay resultados para "${searchQuery}" con estado "${filterStatus}"`
              : "No hay turnos disponibles"}
          </p>
        </div>
      )}

      {/* Tabla de turnos (solo visible en desktop) */}
      {turnosOrdenados.length > 0 && (
        <div className="hidden md:block bg-gray-800/50 backdrop-blur-sm rounded-xl border border-gray-700/30">
          <table className="w-full">
            <thead className="bg-gray-700/30">
              <tr className="text-left text-sm text-gray-300">
                {['id', 'fecha', 'cliente', 'barbero', 'sucursal', 'servicio', 'estado'].map((campo) => (
                  <th 
                    key={campo} 
                    onClick={() => handleSort(campo as SortField)}
                    className="px-4 py-3 cursor-pointer hover:bg-gray-700/40 transition-colors uppercase font-medium"
                  >
                    <div className="flex items-center">
                      {campo.replace(/_/g, ' ')}
                      {renderSortIcon(campo as SortField)}
                    </div>
                  </th>
                ))}
                <th className="px-4 py-3">Acciones</th>
              </tr>
            </thead>
            <tbody>
              {turnosOrdenados.map((turno) => (
                <tr key={turno.id} className="border-t border-gray-700/30 hover:bg-gray-700/10 transition-colors">
                  <td className="px-4 py-3 font-medium text-blue-400">#{turno.id}</td>
                  <td className="px-4 py-3 text-sm">{format(new Date(turno.fecha), 'dd/MM/yy HH:mm')}</td>
                  <td className="px-4 py-3">
                    <div className="text-white">{turno.cliente.nombre}</div>
                    <div className="text-xs text-gray-400">{turno.cliente.email}</div>
                  </td>
                  <td className="px-4 py-3 text-white">{turno.barbero.nombre}</td>
                  <td className="px-4 py-3 text-white">{turno.sucursal?.nombre || '-'}</td>
                  <td className="px-4 py-3">
                    <ServiciosCell 
                      servicios={turno.servicios} 
                      precioTotal={turno.precioTotal}
                      duracionTotal={turno.duracionTotal}
                    />
                  </td>
                  <td className="px-4 py-3">
                    <span className={`px-2.5 py-1 rounded-full text-xs ${getBadgeClass(turno.estado)}`}>
                      {turno.estado}
                    </span>
                  </td>
                  <td className="px-4 py-3">
                    <select 
                      value={turno.estado}
                      onChange={(e) => handleEstadoChange(turno.id, e.target.value)}
                      className="bg-gray-700/50 border border-gray-600/30 text-white rounded-lg px-3 py-1.5 text-sm backdrop-blur-sm"
                    >
                      {['PENDIENTE', 'CONFIRMADO', 'CANCELADO', 'COMPLETADO'].map((estado) => (
                        <option key={estado} value={estado}>
                          {estado}
                        </option>
                      ))}
                    </select>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* Versión móvil */}
      {turnosOrdenados.length > 0 && (
        <div className="md:hidden space-y-4">
          {turnosOrdenados.map((turno) => (
            <div key={turno.id} className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-4 border border-gray-700/30">
              <div className="flex justify-between items-start mb-3">
                <div>
                  <div className="font-bold text-blue-400">#{turno.id}</div>
                  <div className="text-xs text-gray-400 mt-1">
                    {format(new Date(turno.fecha), 'dd/MM/yy HH:mm')}
                  </div>
                </div>
                <span className={`px-2 py-1 rounded-full text-xs ${getBadgeClass(turno.estado)}`}>
                  {turno.estado}
                </span>
              </div>
              
              <div className="space-y-2.5">
                <div>
                  <div className="text-xs text-gray-400 mb-1">Cliente</div>
                  <div className="text-sm text-white">{turno.cliente.nombre}</div>
                </div>
                
                <div>
                  <div className="text-xs text-gray-400 mb-1">Barbero</div>
                  <div className="text-sm text-white">{turno.barbero.nombre}</div>
                </div>

                <div>
                  <div className="text-xs text-gray-400 mb-1">Sucursal</div>
                  <div className="text-sm text-white">{turno.sucursal?.nombre || '-'}</div>
                </div>

                <div>
                  <div className="text-xs text-gray-400 mb-1">Servicios</div>
                  <div className="relative">
                    <div>
                      <div className="font-medium">
                        {turno.servicios[0]?.nombre}
                        {turno.servicios.length > 1 && (
                          <span className="ml-2 bg-blue-600 text-white text-xs rounded-full px-1.5">
                            +{turno.servicios.length - 1}
                          </span>
                        )}
                      </div>
                      <div className="text-sm text-gray-400">
                        {turno.duracionTotal} min · ${turno.precioTotal.toFixed(2)}
                      </div>
                    </div>
                    
                    {/* Mobile: Mostrar todos los servicios directamente */}
                    {turno.servicios.length > 1 && (
                      <div className="mt-2 pl-2 border-l-2 border-gray-700 space-y-1">
                        {turno.servicios.slice(1).map((servicio, idx) => (
                          <div key={idx} className="flex justify-between items-center text-xs">
                            <span className="text-gray-300">{servicio.nombre}</span>
                            <span className="text-gray-400">${servicio.precio.toFixed(2)}</span>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>

                <div>
                  <div className="text-xs text-gray-400 mb-1">Cambiar Estado</div>
                  <select 
                    value={turno.estado}
                    onChange={(e) => handleEstadoChange(turno.id, e.target.value)}
                    className="w-full bg-gray-700/50 border border-gray-600/30 text-white rounded-lg px-3 py-1.5 text-sm backdrop-blur-sm"
                  >
                    {['PENDIENTE', 'CONFIRMADO', 'CANCELADO', 'COMPLETADO'].map((estado) => (
                      <option key={estado} value={estado}>
                        {estado}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </AdminLayout>
  );
}

=====================================================
Archivo: src\app\admin\login\page.tsx
=====================================================

'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';

export default function AdminLogin() {
  const router = useRouter();
  const [credentials, setCredentials] = useState({
    email: '',
    password: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    
    try {
      const response = await fetch('/api/admin/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(credentials),
      });

      if (response.ok) {
        // Redirección explícita al dashboard
        router.push('/admin/dashboard');
      } else {
        const data = await response.json();
        setError(data.error || 'Credenciales inválidas');
      }
    } catch (error) {
      console.error('Error:', error);
      setError('Error al conectar con el servidor');
    } finally {
      setLoading(false);
    }
  };


  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-900">
      <div className="max-w-md w-full bg-gray-800 rounded-lg shadow-lg p-8">
        <h2 className="text-3xl font-bold text-center text-white mb-8">
          Panel Administrativo
        </h2>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-200 mb-2">
              Email
            </label>
            <input
              type="email"
              value={credentials.email}
              onChange={(e) => setCredentials({...credentials, email: e.target.value})}
              className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none focus:border-blue-500"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-200 mb-2">
              Contraseña
            </label>
            <input
              type="password"
              value={credentials.password}
              onChange={(e) => setCredentials({...credentials, password: e.target.value})}
              className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none focus:border-blue-500"
              required
            />
          </div>

          <button
            type="submit"
            className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors"
          >
            Iniciar Sesión
          </button>
        </form>
      </div>
    </div>
  );
}

=====================================================
Archivo: src\app\admin\servicios\page.tsx
=====================================================

'use client';

import { useState, useEffect } from 'react';
import AdminLayout from '@/components/AdminLayout';

interface Barbero {
  id: number;
  nombre: string;
  apellido: string;
}

interface Servicio {
  id?: number;
  nombre: string;
  descripcion: string;
  duracion: number;
  precio: number;
  barberos?: {
    barberoId: number;
    barbero: {
      id: number;
      nombre: string;
      apellido: string;
    }
  }[];
}

export default function ServiciosPage() {
  const [servicios, setServicios] = useState<Servicio[]>([]);
  const [barberos, setBarberos] = useState<Barbero[]>([]);
  const [mostrarFormulario, setMostrarFormulario] = useState(false);
  const [servicioEditando, setServicioEditando] = useState<Servicio>({
    nombre: '',
    descripcion: '',
    duracion: 30,
    precio: 0
  });
  const [barberosSeleccionados, setBarberosSeleccionados] = useState<number[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [serviciosFiltrados, setServiciosFiltrados] = useState<Servicio[]>([]);

  // Cargar datos iniciales
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        
        // Cargar servicios
        const responseServicios = await fetch('/api/servicios');
        if (!responseServicios.ok) throw new Error('Error al cargar servicios');
        const servicios = await responseServicios.json();
        
        // Cargar barberos
        const responseBarberos = await fetch('/api/barberos');
        if (!responseBarberos.ok) throw new Error('Error al cargar barberos');
        const barberos = await responseBarberos.json();
        
        setServicios(servicios);
        setServiciosFiltrados(servicios);
        setBarberos(barberos);
      } catch (error) {
        console.error('Error:', error);
        setError('Error al cargar los datos');
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, []);

  // Filtrar servicios cuando cambia la búsqueda
  useEffect(() => {
    if (searchQuery.trim() === '') {
      setServiciosFiltrados(servicios);
      return;
    }
    
    const query = searchQuery.toLowerCase().trim();
    const filtrados = servicios.filter(servicio => 
      servicio.nombre.toLowerCase().includes(query) || 
      servicio.descripcion.toLowerCase().includes(query) ||
      servicio.barberos?.some(b => 
        `${b.barbero.nombre} ${b.barbero.apellido}`.toLowerCase().includes(query)
      )
    );
    
    setServiciosFiltrados(filtrados);
  }, [searchQuery, servicios]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const servicioData = {
        ...servicioEditando,
        barberos: barberosSeleccionados
      };
      
      const url = servicioData.id 
        ? `/api/admin/servicios/${servicioData.id}` 
        : '/api/admin/servicios';
      
      const method = servicioData.id ? 'PUT' : 'POST';
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(servicioData),
      });
      
      if (!response.ok) {
        throw new Error('Error al guardar servicio');
      }
      
      // Recargar datos
      const serviciosResponse = await fetch('/api/servicios');
      const serviciosData = await serviciosResponse.json();
      
      setServicios(serviciosData);
      setServiciosFiltrados(serviciosData);
      
      // Limpiar formulario
      setMostrarFormulario(false);
      setServicioEditando({
        nombre: '',
        descripcion: '',
        duracion: 30,
        precio: 0
      });
      setBarberosSeleccionados([]);
    } catch (error) {
      console.error('Error:', error);
      alert('Error al guardar el servicio');
    }
  };

  const handleEdit = (servicio: Servicio) => {
    setServicioEditando({
      id: servicio.id,
      nombre: servicio.nombre,
      descripcion: servicio.descripcion || '',
      duracion: servicio.duracion,
      precio: servicio.precio
    });
    
    // Preparar barberos seleccionados
    const barberosIds = servicio.barberos?.map(b => b.barberoId) || [];
    setBarberosSeleccionados(barberosIds);
    setMostrarFormulario(true);
  };

  const handleDelete = async (id: number) => {
    if (!confirm('¿Está seguro de eliminar este servicio?')) return;
    
    try {
      const response = await fetch(`/api/admin/servicios/${id}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) {
        throw new Error('Error al eliminar servicio');
      }
      
      // Actualizar lista
      setServicios(prev => prev.filter(s => s.id !== id));
      setServiciosFiltrados(prev => prev.filter(s => s.id !== id));
    } catch (error) {
      console.error('Error:', error);
      alert('Error al eliminar el servicio');
    }
  };

  const handleBarberoToggle = (barberoId: number) => {
    setBarberosSeleccionados(prev => {
      if (prev.includes(barberoId)) {
        return prev.filter(id => id !== barberoId);
      } else {
        return [...prev, barberoId];
      }
    });
  };

  // Formatear precio para mostrar
  const formatPrecio = (precio: number) => {
    return new Intl.NumberFormat('es-AR', {
      style: 'currency',
      currency: 'ARS'
    }).format(precio);
  };

  // Barra de búsqueda y botón de nuevo servicio
  const headerActions = (
    <>
      <div className="relative flex-grow">
        <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
          <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
        <input
          type="search"
          className="block w-full p-2 pl-10 text-sm bg-gray-800 border border-gray-600 placeholder-gray-400 text-white rounded-lg focus:ring-blue-500 focus:border-blue-500"
          placeholder="Buscar servicio..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        {searchQuery && (
          <button
            className="absolute inset-y-0 right-0 flex items-center pr-3"
            onClick={() => setSearchQuery('')}
          >
            <svg className="w-4 h-4 text-gray-400 hover:text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        )}
      </div>
      
      <button 
        onClick={() => {
          setServicioEditando({
            nombre: '',
            descripcion: '',
            duracion: 30,
            precio: 0
          });
          setBarberosSeleccionados([]);
          setMostrarFormulario(true);
        }} 
        className="bg-blue-600/30 hover:bg-blue-700/40 text-blue-300 py-2 px-4 rounded transition-colors flex items-center gap-2 whitespace-nowrap"
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
        </svg>
        <span>Nuevo Servicio</span>
      </button>
    </>
  );

  if (loading) {
    return (
      <AdminLayout title="Gestión de Servicios" currentPage="servicios">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </AdminLayout>
    );
  }

  return (
    <AdminLayout title="Gestión de Servicios" currentPage="servicios" actions={headerActions}>
      {/* Formulario de Servicio */}
      {mostrarFormulario && (
        <div className="bg-gray-800/50 backdrop-blur-sm rounded-lg p-6 mb-8 shadow-lg">
          <h3 className="text-xl font-bold text-white mb-4">
            {servicioEditando.id ? 'Editar Servicio' : 'Nuevo Servicio'}
          </h3>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-200 mb-1">Nombre del Servicio</label>
              <input
                type="text"
                value={servicioEditando.nombre}
                onChange={(e) => setServicioEditando({...servicioEditando, nombre: e.target.value})}
                className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-200 mb-1">Descripción</label>
              <textarea
                rows={3}
                value={servicioEditando.descripcion}
                onChange={(e) => setServicioEditando({...servicioEditando, descripcion: e.target.value})}
                className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600"
              />
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-200 mb-1">Duración (minutos)</label>
                <input
                  type="number"
                  min="1"
                  step="1"
                  value={servicioEditando.duracion}
                  onChange={(e) => setServicioEditando({...servicioEditando, duracion: parseInt(e.target.value)})}
                  className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-200 mb-1">Precio</label>
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={servicioEditando.precio}
                  onChange={(e) => setServicioEditando({...servicioEditando, precio: parseFloat(e.target.value)})}
                  className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600"
                  required
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-200 mb-2">Barberos que ofrecen este servicio</label>
              <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
                {barberos.map(barbero => (
                  <div key={barbero.id} className="flex items-center">
                    <input
                      type="checkbox"
                      id={`barbero-${barbero.id}`}
                      checked={barberosSeleccionados.includes(barbero.id)}
                      onChange={() => handleBarberoToggle(barbero.id)}
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                    <label htmlFor={`barbero-${barbero.id}`} className="ml-2 text-sm text-gray-200">
                      {barbero.nombre} {barbero.apellido}
                    </label>
                  </div>
                ))}
              </div>
            </div>
            
            <div className="flex justify-end space-x-3 pt-4">
              <button
                type="button"
                onClick={() => setMostrarFormulario(false)}
                className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-500 transition"
              >
                Cancelar
              </button>
              <button
                type="submit"
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-500 transition"
              >
                Guardar
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Mensaje de no resultados */}
      {serviciosFiltrados.length === 0 && !loading && !error && (
        <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-8 text-center border border-gray-700/30">
          <p className="text-gray-400">
            {searchQuery 
              ? `No se encontraron servicios que coincidan con "${searchQuery}"`
              : "No hay servicios registrados"}
          </p>
        </div>
      )}

      {/* Mensaje de error */}
      {error && (
        <div className="bg-red-900/20 backdrop-blur-sm border border-red-600/30 text-red-400 p-4 rounded-lg mb-6">
          {error}
        </div>
      )}

      {/* Lista de Servicios - Grid responsive */}
      {!loading && !error && serviciosFiltrados.length > 0 && (
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {serviciosFiltrados.map(servicio => (
            <div key={servicio.id} className="bg-gray-800/50 backdrop-blur-sm rounded-lg shadow-lg overflow-hidden border border-gray-700/30 hover:shadow-blue-900/20 hover:translate-y-[-2px] transition-all duration-300">
              <div className="p-5">
                <div className="flex justify-between items-start">
                  <h3 className="text-xl font-bold text-white">{servicio.nombre}</h3>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => handleEdit(servicio)}
                      className="p-1 text-blue-400 hover:text-blue-300"
                      title="Editar servicio"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                      </svg>
                    </button>
                    <button
                      onClick={() => servicio.id && handleDelete(servicio.id)}
                      className="p-1 text-red-400 hover:text-red-300"
                      title="Eliminar servicio"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                    </button>
                  </div>
                </div>
                
                <div className="flex items-center mt-2 text-lg">
                  <span className="font-bold text-green-400">{formatPrecio(servicio.precio)}</span>
                  <span className="mx-2 text-gray-500">•</span>
                  <span className="text-gray-300">{servicio.duracion} min</span>
                </div>
                
                {servicio.descripcion && (
                  <p className="mt-2 text-gray-400 text-sm">{servicio.descripcion}</p>
                )}
                
                {servicio.barberos && servicio.barberos.length > 0 && (
                  <div className="mt-4">
                    <p className="text-sm text-gray-400 mb-1">Ofrecido por:</p>
                    <div className="flex flex-wrap gap-1">
                      {servicio.barberos.map(b => (
                        <span key={b.barberoId} className="px-2 py-1 bg-purple-900/40 text-purple-200 text-xs rounded">
                          {b.barbero.nombre} {b.barbero.apellido}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Vista móvil optimizada para pantallas pequeñas */}
      <div className="md:hidden fixed bottom-4 right-4 z-10">
        <button 
          onClick={() => {
            setServicioEditando({
              nombre: '',
              descripcion: '',
              duracion: 30,
              precio: 0
            });
            setBarberosSeleccionados([]);
            setMostrarFormulario(true);
          }}
          className="bg-blue-600 text-white rounded-full w-14 h-14 flex items-center justify-center shadow-lg"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
          </svg>
        </button>
      </div>
    </AdminLayout>
  );
}

=====================================================
Archivo: src\app\admin\sucursales\page.tsx
=====================================================

'use client';

import { useState, useEffect } from 'react';
import AdminLayout from '@/components/AdminLayout';

interface Sucursal {
  id?: number;
  nombre: string;
  direccion: string;
  telefono: string;
  horarioInicio: string;
  horarioFin: string;
  diasAtencion: string[];
}

const diasSemana = [
  { id: 'LUNES', label: 'Lunes' },
  { id: 'MARTES', label: 'Martes' },
  { id: 'MIERCOLES', label: 'Miércoles' },
  { id: 'JUEVES', label: 'Jueves' },
  { id: 'VIERNES', label: 'Viernes' },
  { id: 'SABADO', label: 'Sábado' },
  { id: 'DOMINGO', label: 'Domingo' },
];

// Utility function to parse diasAtencion
const parseDiasAtencion = (diasAtencion: string | string[] | undefined): string[] => {
  // If it's already an array, return it
  if (Array.isArray(diasAtencion)) return diasAtencion;
  
  // If it's a string, split it
  if (typeof diasAtencion === 'string') {
    // Handle comma-separated or space-separated strings
    return diasAtencion
      .split(/[,\s]+/)
      .map(dia => dia.trim().toUpperCase())
      .filter(dia => dia); // Remove empty strings
  }
  
  // Return empty array if undefined or invalid input
  return [];
};

export default function SucursalesPage() {
  const [sucursales, setSucursales] = useState<Sucursal[]>([]);
  const [mostrarFormulario, setMostrarFormulario] = useState(false);
  const [sucursalEditando, setSucursalEditando] = useState<Sucursal>({
    nombre: '',
    direccion: '',
    telefono: '',
    horarioInicio: '09:00',
    horarioFin: '18:00',
    diasAtencion: ['LUNES', 'MARTES', 'MIERCOLES', 'JUEVES', 'VIERNES']
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // Cargar sucursales existentes
  useEffect(() => {
    const fetchSucursales = async () => {
      try {
        setLoading(true);
        const response = await fetch('/api/admin/sucursales');
        
        if (!response.ok) {
          throw new Error('Error al cargar sucursales');
        }
        
        const data = await response.json();
        
        // More robust parsing of sucursales
        const parsedSucursales = data.map((sucursal: any) => {
          // Extract time from DateTime, handling different input formats
          const extractTime = (dateTime: string) => {
            if (!dateTime) return '00:00';
            const date = new Date(dateTime);
            return date.toLocaleTimeString('es-CL', { 
              hour: '2-digit', 
              minute: '2-digit',
              hour12: false 
            }).padStart(5, '0');
          };
  
          // Parse days of operation
          const parseDiasAtencion = (() => {
            if (Array.isArray(sucursal.diasAtencion)) {
              // If it's an array of objects, extract names
              if (sucursal.diasAtencion[0] && typeof sucursal.diasAtencion[0] === 'object') {
                return sucursal.diasAtencion.map((dia: any) => dia.nombre);
              }
              // If it's an array of strings, return as is
              return sucursal.diasAtencion;
            }
            
            // If it's a string, split and trim
            if (typeof sucursal.diasAtencion === 'string') {
              return sucursal.diasAtencion
                .split(',')
                .map(dia => dia.trim().toUpperCase())
                .filter(dia => dia);
            }
            
            // Fallback
            return [];
          })();
  
          return {
            ...sucursal,
            horarioInicio: extractTime(sucursal.horarioInicio),
            horarioFin: extractTime(sucursal.horarioFin),
            diasAtencion: parseDiasAtencion
          };
        });
        
        setSucursales(parsedSucursales);
      } catch (error) {
        console.error('Error:', error);
        setError('Error al cargar las sucursales');
      } finally {
        setLoading(false);
      }
    };
    
    fetchSucursales();
  }, []);

  const handleDiaToggle = (dia: string) => {
    setSucursalEditando(prev => {
      if (prev.diasAtencion.includes(dia)) {
        return {
          ...prev,
          diasAtencion: prev.diasAtencion.filter(d => d !== dia)
        };
      } else {
        return {
          ...prev,
          diasAtencion: [...prev.diasAtencion, dia]
        };
      }
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      // Validate inputs
      if (!sucursalEditando.nombre || !sucursalEditando.direccion || !sucursalEditando.telefono) {
        alert('Por favor complete todos los campos');
        return;
      }
  
      // Ensure diasAtencion is a comma-separated string
      const sucursalData = {
        ...sucursalEditando,
        diasAtencion: Array.isArray(sucursalEditando.diasAtencion) 
          ? sucursalEditando.diasAtencion.join(',') 
          : sucursalEditando.diasAtencion
      };
      
      const url = sucursalData.id 
        ? `/api/admin/sucursales/${sucursalData.id}` 
        : '/api/admin/sucursales';
      
      const method = sucursalData.id ? 'PUT' : 'POST';
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(sucursalData),
      });
      
      if (!response.ok) {
        // Try to get more detailed error message
        const errorData = await response.json();
        throw new Error(errorData.error || 'Error al guardar sucursal');
      }
      
      // Fetch updated data
      const sucursalesResponse = await fetch('/api/admin/sucursales');
      const sucursalesData = await sucursalesResponse.json();
      
      // Parse diasAtencion for each sucursal
      const parsedSucursales = sucursalesData.map((sucursal: any) => ({
        ...sucursal,
        diasAtencion: Array.isArray(sucursal.diasAtencion) 
          ? sucursal.diasAtencion.map((dia: any) => 
              typeof dia === 'object' ? dia.nombre : dia
            )
          : typeof sucursal.diasAtencion === 'string'
            ? sucursal.diasAtencion.split(',').map(dia => dia.trim().toUpperCase())
            : []
      }));
      
      setSucursales(parsedSucursales);
      
      // Reset form
      setMostrarFormulario(false);
      setSucursalEditando({
        nombre: '',
        direccion: '',
        telefono: '',
        horarioInicio: '09:00',
        horarioFin: '18:00',
        diasAtencion: ['LUNES', 'MARTES', 'MIERCOLES', 'JUEVES', 'VIERNES']
      });
    } catch (error) {
      console.error('Error:', error);
      alert(error instanceof Error ? error.message : 'Error al guardar la sucursal');
    }
  };

  const handleEdit = (sucursal: Sucursal) => {
    // Robust parsing of days of operation
    const parsedDiasAtencion = (() => {
      // If diasAtencion is an array, use it directly
      if (Array.isArray(sucursal.diasAtencion)) {
        return sucursal.diasAtencion;
      }
      
      // If it's a string, split and trim
      if (typeof sucursal.diasAtencion === 'string') {
        return sucursal.diasAtencion
          .split(',')
          .map(dia => dia.trim().toUpperCase())
          .filter(dia => dia);
      }
      
      // If it's an array of objects (from backend), extract names
      if (sucursal.diasAtencion && typeof sucursal.diasAtencion[0] === 'object') {
        return sucursal.diasAtencion.map((dia: any) => dia.nombre);
      }
      
      // Fallback to default days
      return ['LUNES', 'MARTES', 'MIERCOLES', 'JUEVES', 'VIERNES'];
    })();
  
    setSucursalEditando({
      ...sucursal,
      diasAtencion: parsedDiasAtencion
    });
    setMostrarFormulario(true);
  };
  const handleDelete = async (id: number) => {
    if (!confirm('¿Está seguro de eliminar esta sucursal?')) return;
    
    try {
      const response = await fetch(`/api/admin/sucursales/${id}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) {
        throw new Error('Error al eliminar sucursal');
      }
      
      // Actualizar lista
      setSucursales(prev => prev.filter(s => s.id !== id));
    } catch (error) {
      console.error('Error:', error);
      alert('Error al eliminar la sucursal');
    }
  };

  // Botón de nueva sucursal que va en el header
  const headerActions = (
    <button 
      onClick={() => {
        setSucursalEditando({
          nombre: '',
          direccion: '',
          telefono: '',
          horarioInicio: '09:00',
          horarioFin: '18:00',
          diasAtencion: ['LUNES', 'MARTES', 'MIERCOLES', 'JUEVES', 'VIERNES']
        });
        setMostrarFormulario(true);
      }} 
      className="bg-blue-600/30 hover:bg-blue-700/40 text-blue-300 py-2 px-4 rounded transition-colors flex items-center gap-2 whitespace-nowrap"
    >
      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
      </svg>
      <span>Nueva Sucursal</span>
    </button>
  );

  if (loading) {
    return (
      <AdminLayout title="Gestión de Sucursales" currentPage="sucursales">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </AdminLayout>
    );
  }

  return (
    <AdminLayout title="Gestión de Sucursales" currentPage="sucursales" actions={headerActions}>
      {/* Formulario de Sucursal */}
      {mostrarFormulario && (
        <div className="bg-gray-800/50 backdrop-blur-sm rounded-lg p-6 mb-8 shadow-lg border border-gray-700/30">
          <h3 className="text-xl font-bold text-white mb-4">
            {sucursalEditando.id ? 'Editar Sucursal' : 'Nueva Sucursal'}
          </h3>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-200 mb-1">Nombre</label>
              <input
                type="text"
                value={sucursalEditando.nombre}
                onChange={(e) => setSucursalEditando({...sucursalEditando, nombre: e.target.value})}
                className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-200 mb-1">Dirección</label>
              <input
                type="text"
                value={sucursalEditando.direccion}
                onChange={(e) => setSucursalEditando({...sucursalEditando, direccion: e.target.value})}
                className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-200 mb-1">Teléfono</label>
              <input
                type="text"
                value={sucursalEditando.telefono}
                onChange={(e) => setSucursalEditando({...sucursalEditando, telefono: e.target.value})}
                className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600"
                required
              />
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-200 mb-1">Horario Inicio</label>
                <input
                  type="time"
                  value={sucursalEditando.horarioInicio}
                  onChange={(e) => setSucursalEditando({...sucursalEditando, horarioInicio: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-200 mb-1">Horario Fin</label>
                <input
                  type="time"
                  value={sucursalEditando.horarioFin}
                  onChange={(e) => setSucursalEditando({...sucursalEditando, horarioFin: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600"
                  required
                />
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-200 mb-2">Días de Atención</label>
              <div className="grid grid-cols-2 sm:grid-cols-4 gap-2">
                {diasSemana.map(dia => (
                  <div key={dia.id} className="flex items-center">
                    <input
                      type="checkbox"
                      id={`dia-${dia.id}`}
                      checked={sucursalEditando.diasAtencion.includes(dia.id)}
                      onChange={() => handleDiaToggle(dia.id)}
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                    <label htmlFor={`dia-${dia.id}`} className="ml-2 text-sm text-gray-200">
                      {dia.label}
                    </label>
                  </div>
                ))}
              </div>
            </div>
            
            <div className="flex justify-end space-x-3 pt-4">
              <button
                type="button"
                onClick={() => setMostrarFormulario(false)}
                className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-500 transition"
              >
                Cancelar
              </button>
              <button
                type="submit"
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-500 transition"
              >
                Guardar
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Mensaje de error */}
      {error && (
        <div className="bg-red-900/20 backdrop-blur-sm border border-red-600/30 text-red-400 p-4 rounded-lg mb-6">
          {error}
        </div>
      )}

      {/* Mensaje si no hay sucursales */}
      {!loading && !error && sucursales.length === 0 && (
        <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-8 text-center border border-gray-700/30">
          <p className="text-gray-400">No hay sucursales registradas</p>
        </div>
      )}

      {/* Lista de Sucursales */}
      {!loading && !error && sucursales.length > 0 && (
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {sucursales.map(sucursal => (
            <div key={sucursal.id} className="bg-gray-800/50 backdrop-blur-sm rounded-lg shadow-lg overflow-hidden border border-gray-700/30 hover:shadow-blue-900/20 hover:translate-y-[-2px] transition-all duration-300">
              <div className="p-5">
                <div className="flex justify-between items-start">
                  <h3 className="text-xl font-bold text-white">{sucursal.nombre}</h3>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => handleEdit(sucursal)}
                      className="p-1 text-blue-400 hover:text-blue-300"
                      title="Editar sucursal"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                      </svg>
                    </button>
                    <button
                      onClick={() => sucursal.id && handleDelete(sucursal.id)}
                      className="p-1 text-red-400 hover:text-red-300"
                      title="Eliminar sucursal"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                    </button>
                  </div>
                </div>
                <div className="mt-2 space-y-1 text-gray-300">
                  <p className="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1 1 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                    {sucursal.direccion}
                  </p>
                  <p className="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                    </svg>
                    {sucursal.telefono}
                  </p>
                  <p className="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    {sucursal.horarioInicio} - {sucursal.horarioFin}
                  </p>
                </div>
                <div className="mt-3">
                  <div className="flex flex-wrap gap-1">
                    {sucursal.diasAtencion.map(dia => (
                      <span key={dia} className="px-2 py-1 bg-blue-900/40 text-blue-200 text-xs rounded">
                        {diasSemana.find(d => d.id === dia)?.label}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Vista móvil optimizada para pantallas pequeñas */}
      <div className="md:hidden fixed bottom-4 right-4 z-10">
        <button 
          onClick={() => {
            setSucursalEditando({
              nombre: '',
              direccion: '',
              telefono: '',
              horarioInicio: '09:00',
              horarioFin: '18:00',
              diasAtencion: ['LUNES', 'MARTES', 'MIERCOLES', 'JUEVES', 'VIERNES']
            });
            setMostrarFormulario(true);
          }}
          className="bg-blue-600 text-white rounded-full w-14 h-14 flex items-center justify-center shadow-lg"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
          </svg>
        </button>
      </div>
    </AdminLayout>
  );
}

=====================================================
Archivo: src\app\api\admin\barberos\route.ts
=====================================================

// src/app/api/admin/barberos/route.ts
import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma';
import { z } from 'zod';
const barberoSchema = z.object({
  nombre: z.string().min(2).max(50),
  apellido: z.string().min(2).max(50),
  email: z.string().email(),
  telefono: z.string().optional(),
  foto: z.string().url().optional(),
  especialidad: z.string().optional(),
  experiencia: z.number().int().min(0).optional(),
  calificacion: z.number().min(0).max(5).optional(),
  sucursales: z.array(z.number()).optional()
});

export async function GET() {
  try {
    const barberos = await prisma.barbero.findMany({
      include: {
        sucursales: {
          include: {
            sucursal: true
          }
        }
      }
    });
    
    return NextResponse.json(barberos);
  } catch (error) {
    return NextResponse.json(
      { error: 'Error fetching barbers' },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const validation = barberoSchema.safeParse(body);
    
    if (!validation.success) {
      return NextResponse.json(
        { error: validation.error.flatten() },
        { status: 400 }
      );
    }

    const { sucursales, ...barberoData } = validation.data;
    
    const nuevoBarbero = await prisma.barbero.create({
      data: {
        ...barberoData,
        sucursales: sucursales ? {
          create: sucursales.map(sucursalId => ({
            sucursal: { connect: { id: sucursalId } }
          }))
        } : undefined
      },
      include: {
        sucursales: true
      }
    });

    return NextResponse.json(nuevoBarbero, { status: 201 });
  } catch (error) {
    console.error('Error creating barber:', error);
    return NextResponse.json(
      { error: 'Error creating barber' },
      { status: 500 }
    );
  }
}

=====================================================
Archivo: src\app\api\admin\barberos\[id]\route.ts
=====================================================

import { NextRequest, NextResponse } from 'next/server';
import prisma from '@/lib/prisma';

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id);
    
    if (isNaN(id)) {
      return NextResponse.json(
        { error: 'ID inválido' },
        { status: 400 }
      );
    }

    const barbero = await prisma.barbero.findUnique({
      where: { id },
      include: {
        sucursales: {
          include: {
            sucursal: true
          }
        }
      }
    });
    
    if (!barbero) {
      return NextResponse.json(
        { error: 'Barbero no encontrado' },
        { status: 404 }
      );
    }
    
    console.log("Datos del barbero:", barbero); // Para depuración
    
    return NextResponse.json(barbero);
  } catch (error) {
    console.error('Error obteniendo barbero:', error);
    return NextResponse.json(
      { error: 'Error al obtener el barbero' },
      { status: 500 }
    );
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id);
    
    if (isNaN(id)) {
      return NextResponse.json(
        { error: 'ID inválido' },
        { status: 400 }
      );
    }
    
    const body = await request.json();
    console.log("Datos recibidos para actualizar:", body);
    console.log("URL de foto recibida:", body.foto);
    
    // Verificar si el barbero existe
    const existingBarbero = await prisma.barbero.findUnique({
      where: { id }
    });
    
    if (!existingBarbero) {
      return NextResponse.json(
        { error: 'Barbero no encontrado' },
        { status: 404 }
      );
    }
    
    // Extraer sucursales del cuerpo
    const { sucursales, ...barberoData } = body;
    
    // Preparar datos asegurando tipos correctos
    const updateData = {
      nombre: barberoData.nombre,
      apellido: barberoData.apellido,
      email: barberoData.email,
      telefono: barberoData.telefono || null,
      foto: barberoData.foto || null,
      especialidad: barberoData.especialidad || null,
      experiencia: barberoData.experiencia ? parseInt(barberoData.experiencia.toString()) : null,
      calificacion: barberoData.calificacion ? parseFloat(barberoData.calificacion.toString()) : null,
      instagram: barberoData.instagram || null,
      biografia: barberoData.biografia || null
    };
    
    console.log("Datos a actualizar:", updateData);
    
    // Actualizar barbero
    const updatedBarbero = await prisma.barbero.update({
      where: { id },
      data: {
        ...updateData,
        // Si se proporcionan nuevas sucursales, actualiza las conexiones
        ...(sucursales && {
          sucursales: {
            // Primero, eliminar todas las conexiones existentes
            deleteMany: {},
            // Luego, crear nuevas conexiones
            create: sucursales.map((sucursalId: number) => ({
              sucursal: { connect: { id: sucursalId } }
            }))
          }
        })
      },
      include: {
        sucursales: {
          include: {
            sucursal: true
          }
        }
      }
    });
    
    return NextResponse.json(updatedBarbero);
  } catch (error) {
    console.error('Error actualizando barbero:', error);
    return NextResponse.json(
      { error: 'Error al actualizar el barbero', details: error.message },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id);
    
    if (isNaN(id)) {
      return NextResponse.json(
        { error: 'ID inválido' },
        { status: 400 }
      );
    }
    
    // Verificar si el barbero existe
    const existingBarbero = await prisma.barbero.findUnique({
      where: { id }
    });
    
    if (!existingBarbero) {
      return NextResponse.json(
        { error: 'Barbero no encontrado' },
        { status: 404 }
      );
    }
    
    // Eliminar primero las relaciones con sucursales
    await prisma.barberoSucursal.deleteMany({
      where: { barberoId: id }
    });
    
    // Eliminar el barbero
    await prisma.barbero.delete({
      where: { id }
    });
    
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error eliminando barbero:', error);
    return NextResponse.json(
      { error: 'Error al eliminar el barbero' },
      { status: 500 }
    );
  }
}

=====================================================
Archivo: src\app\api\admin\login\route.ts
=====================================================

import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma';
import { compare } from 'bcrypt';
import { sign } from 'jsonwebtoken';

// Para debug
const logError = (msg: string, data: any) => {
  console.error(`[LOGIN ERROR] ${msg}:`, data);
};

export async function POST(request: Request) {
  try {
    const body = await request.json();
    console.log('Datos recibidos:', body);
    
    const { email, password } = body;

    // Verificar que email y password existan
    if (!email || !password) {
      return NextResponse.json(
        { error: 'Email y contraseña son requeridos' },
        { status: 400 }
      );
    }

    // Buscar admin por email
    const admin = await prisma.admin.findUnique({
      where: { email }
    });

    console.log('Admin encontrado:', admin ? 'Sí' : 'No');

    if (!admin) {
      return NextResponse.json(
        { error: 'Credenciales inválidas' },
        { status: 401 }
      );
    }

    // Verificar contraseña
    try {
      const passwordMatch = await compare(password, admin.password);
      console.log('Contraseña coincide:', passwordMatch);

      if (!passwordMatch) {
        return NextResponse.json(
          { error: 'Credenciales inválidas' },
          { status: 401 }
        );
      }
    } catch (error) {
      logError('Error comparando contraseñas', error);
      return NextResponse.json(
        { error: 'Error al verificar credenciales' },
        { status: 500 }
      );
    }

    // Generar token JWT
    const token = sign(
      { id: admin.id, email: admin.email },
      'secret-key-debe-cambiarse',
      { expiresIn: '8h' }
    );

    // Crear respuesta con cookie
const response = NextResponse.json({ 
  success: true,
  redirect: '/admin/dashboard'
});
    
    response.cookies.set('admin_token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      maxAge: 8 * 60 * 60
    });

    return response;
  } catch (error) {
    logError('Error general', error);
    return NextResponse.json(
      { error: 'Error en el servidor' },
      { status: 500 }
    );
  }
}

=====================================================
Archivo: src\app\api\admin\logout\route.ts
=====================================================

import { NextResponse } from 'next/server';

export async function POST() {
  const response = NextResponse.json({ success: true });
  
  response.cookies.delete('admin_token');
  
  return response;
}

=====================================================
Archivo: src\app\api\admin\reset-password\route.ts
=====================================================

// src/app/api/admin/reset-password/route.ts
import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma';
import { hash } from 'bcrypt';

export async function GET() {
  try {
    const hashedPassword = await hash('admin123', 10);
    
    const admin = await prisma.admin.update({
      where: { 
        email: 'admin@barberia.com' 
      },
      data: {
        password: hashedPassword
      }
    });

    return NextResponse.json({ 
      message: 'Contraseña actualizada', 
      passwordHash: hashedPassword 
    });
  } catch (error) {
    console.error('Error:', error);
    return NextResponse.json({ error: 'Error al actualizar contraseña' }, { status: 500 });
  }
}

=====================================================
Archivo: src\app\api\admin\sucursales\route.ts
=====================================================

// src/app/api/admin/sucursales/route.ts
import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma';

export async function GET() {
  try {
    const sucursales = await prisma.sucursal.findMany({
      orderBy: {
        nombre: 'asc',
      },
      include: {
        diasAtencion: {
          select: {
            nombre: true
          }
        }
      }
    });
    
    // Transform the result to ensure consistent structure
    const transformedSucursales = sucursales.map(sucursal => ({
      ...sucursal,
      diasAtencion: sucursal.diasAtencion.map(dia => dia.nombre)
    }));
    
    return NextResponse.json(transformedSucursales);
  } catch (error) {
    console.error('Error al obtener sucursales:', error);
    return NextResponse.json(
      { error: 'Error al obtener sucursales' },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const data = await request.json();
    
    // Ensure days exist before connecting
    await Promise.all(
      data.diasAtencion.split(',').map(async (dia: string) => {
        await prisma.diaAtencion.upsert({
          where: { nombre: dia.trim() },
          update: {},
          create: { nombre: dia.trim() }
        })
      })
    );

    const sucursalData = {
      ...data,
      horarioInicio: new Date(`2023-01-01T${data.horarioInicio}:00`),
      horarioFin: new Date(`2023-01-01T${data.horarioFin}:00`),
      // Convert diasAtencion to array of connected DiaAtencion
      diasAtencion: {
        connect: data.diasAtencion.split(',').map((dia: string) => ({ nombre: dia.trim() }))
      }
    };
    
    const sucursal = await prisma.sucursal.create({
      data: sucursalData,
      include: {
        diasAtencion: {
          select: {
            nombre: true
          }
        }
      }
    });
    
    // Transform the result to ensure consistent structure
    const transformedSucursal = {
      ...sucursal,
      diasAtencion: sucursal.diasAtencion.map(dia => dia.nombre)
    };
    
    return NextResponse.json(transformedSucursal, { status: 201 });
  } catch (error) {
    console.error('Error al crear sucursal:', error);
    return NextResponse.json(
      { error: 'Error al crear sucursal', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    );
  }
}

=====================================================
Archivo: src\app\api\admin\sucursales\[id]\route.ts
=====================================================

// src/app/api/admin/sucursales/[id]/route.ts
import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma';

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id);
    
    const sucursal = await prisma.sucursal.findUnique({
      where: { id }
    });
    
    if (!sucursal) {
      return NextResponse.json(
        { error: 'Sucursal no encontrada' },
        { status: 404 }
      );
    }
    
    return NextResponse.json(sucursal);
  } catch (error) {
    console.error('Error al obtener sucursal:', error);
    return NextResponse.json(
      { error: 'Error al obtener sucursal' },
      { status: 500 }
    );
  }
}

export async function PUT(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id);
    const data = await request.json();
    
    // Validate input
    if (!data.nombre || !data.direccion || !data.telefono) {
      return NextResponse.json(
        { error: 'Datos incompletos' }, 
        { status: 400 }
      );
    }
    
    // Prepare the data for update
    const sucursalData = {
      nombre: data.nombre,
      direccion: data.direccion,
      telefono: data.telefono,
      horarioInicio: new Date(`2023-01-01T${data.horarioInicio}:00`),
      horarioFin: new Date(`2023-01-01T${data.horarioFin}:00`),
      diasAtencion: {
        // Disconnect all existing days and reconnect new ones
        set: data.diasAtencion.split(',').map((dia: string) => ({ 
          nombre: dia.trim() 
        }))
      }
    };
    
    // Ensure all referenced days exist
    await Promise.all(
      data.diasAtencion.split(',').map(async (dia: string) => {
        await prisma.diaAtencion.upsert({
          where: { nombre: dia.trim() },
          update: {},
          create: { nombre: dia.trim() }
        })
      })
    );

    // Perform the update
    const sucursal = await prisma.sucursal.update({
      where: { id },
      data: sucursalData,
      include: { diasAtencion: true } // Include associated days in the response
    });
    
    return NextResponse.json(sucursal);
  } catch (error) {
    console.error('Error al actualizar sucursal:', error);
    
    return NextResponse.json(
      { 
        error: 'Error al actualizar sucursal', 
        details: error instanceof Error 
          ? error.message 
          : String(error)
      }, 
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id);
    
    // Verificar si tiene barberos o turnos asociados
    const barberoSucursalCount = await prisma.barberoSucursal.count({
      where: { sucursalId: id }
    });
    
    const turnosCount = await prisma.turno.count({
      where: { sucursalId: id }
    });
    
    if (barberoSucursalCount > 0 || turnosCount > 0) {
      return NextResponse.json(
        { error: 'No se puede eliminar la sucursal porque tiene barberos o turnos asociados' },
        { status: 400 }
      );
    }
    
    await prisma.sucursal.delete({
      where: { id }
    });
    
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error al eliminar sucursal:', error);
    return NextResponse.json(
      { error: 'Error al eliminar sucursal' },
      { status: 500 }
    );
  }
}

=====================================================
Archivo: src\app\api\admin\turnos\route.ts
=====================================================

import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma';
import { format } from 'date-fns';
import { utcToZonedTime } from 'date-fns-tz';

// Comprehensive type definitions
interface Servicio {
  id: number;
  nombre: string;
  duracion: number;
  precio: number;
}

interface Cliente {
  id: number;
  nombre: string;
  apellido: string;
  email: string;
  telefono?: string; // Make telefono optional
}

interface Barbero {
  id: number;
  nombre: string;
  apellido: string;
}

interface Sucursal {
  id: number;
  nombre: string;
}

export async function GET() {
  try {
    const turnos = await prisma.turno.findMany({
      include: {
        barbero: {
          select: {
            id: true,
            nombre: true,
            apellido: true
          }
        },
        cliente: {
          select: {
            id: true,
            nombre: true,
            apellido: true,
            email: true,
            telefono: true // Include telefono in the selection
          }
        },
        sucursal: {
          select: {
            id: true,
            nombre: true
          }
        },
        servicios: {
          include: {
            servicio: {
              select: {
                id: true,
                nombre: true,
                duracion: true,
                precio: true
              }
            }
          }
        }
      },
      orderBy: {
        fecha: 'desc'
      }
    });

    // Timezone to use (adjust as needed)
    const timeZone = 'America/Buenos_Aires';

    // Transform the data to match your frontend interface
    const formattedTurnos = turnos.map(turno => {
      // Convert the stored UTC time to the specified timezone
      const localDate = utcToZonedTime(turno.fecha, timeZone);

      // Calculate total price and duration for services
      const servicios: Servicio[] = turno.servicios.map(s => ({
        id: s.servicio.id,
        nombre: s.servicio.nombre,
        duracion: s.servicio.duracion,
        precio: Number(s.servicio.precio)
      }));

      const precioTotal = servicios.reduce((total, s) => total + s.precio, 0);
      const duracionTotal = servicios.reduce((total, s) => total + s.duracion, 0);

      return {
        id: turno.id,
        fecha: format(localDate, 'dd/MM/yyyy, HH:mm a'), // Format as requested
        fechaISO: localDate.toISOString(), // Keep ISO string for sorting/backend use
        estado: turno.estado,
        cliente: {
          nombre: `${turno.cliente.nombre} ${turno.cliente.apellido}`.trim(),
          email: turno.cliente.email,
          telefono: turno.cliente.telefono || '' // Handle potential undefined
        },
        barbero: {
          nombre: `${turno.barbero.nombre} ${turno.barbero.apellido}`.trim()
        },
        sucursal: {
          id: turno.sucursal?.id,
          nombre: turno.sucursal?.nombre
        },
        servicios,
        precioTotal,
        duracionTotal
      };
    });

    return NextResponse.json(formattedTurnos);
  } catch (error) {
    console.error('Error al obtener turnos:', error);
    return NextResponse.json(
      { error: 'Error al obtener turnos', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    );
  }
}

// Utility function for saving turns with correct timezone handling
export async function createTurno(data: any) {
  const timeZone = 'America/Buenos_Aires';
  
  // Create a date object in the specified timezone
  const localDate = new Date(data.fecha);
  
  // Adjust the date to UTC, accounting for timezone
  const utcDate = zonedTimeToUtc(localDate, timeZone);

  return prisma.turno.create({
    data: {
      ...data,
      fecha: utcDate
    }
  });
}

=====================================================
Archivo: src\app\api\admin\turnos\[id]\route.ts
=====================================================

import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma';
import { Prisma } from '@prisma/client';

export async function PATCH(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    // Validate ID parsing
    const id = parseInt(params.id, 10);
    if (isNaN(id)) {
      return NextResponse.json(
        { error: 'ID de turno inválido' },
        { status: 400 }
      );
    }

    // Safely parse request body
    let requestBody;
    try {
      requestBody = await request.json();
    } catch (parseError) {
      return NextResponse.json(
        { error: 'Cuerpo de la solicitud inválido' },
        { status: 400 }
      );
    }

    // Destructure and validate estado
    const { estado } = requestBody;
    const estadosPermitidos = ['PENDIENTE', 'CONFIRMADO', 'CANCELADO', 'COMPLETADO'];
    if (!estado || !estadosPermitidos.includes(estado)) {
      return NextResponse.json(
        { error: 'Estado no válido' },
        { status: 400 }
      );
    }

    try {
      const turno = await prisma.turno.update({
        where: { id },
        data: { estado },
        include: {
          barbero: {
            select: {
              id: true,
              nombre: true,
              apellido: true
            }
          },
          cliente: {
            select: {
              id: true,
              nombre: true,
              apellido: true,
              email: true
            }
          },
          servicios: {
            include: {
              servicio: {
                select: {
                  id: true,
                  nombre: true,
                  duracion: true,
                  precio: true
                }
              }
            }
          }
        },
      });

      // Transform turno to match frontend interface
      const turnoFormateado = {
        id: turno.id,
        fecha: turno.fecha,
        estado: turno.estado,
        cliente: {
          nombre: turno.cliente.nombre,
          apellido: turno.cliente.apellido,
          email: turno.cliente.email
        },
        barbero: {
          nombre: turno.barbero.nombre,
          apellido: turno.barbero.apellido
        },
        servicio: {
          nombre: turno.servicios[0]?.servicio.nombre || '',
          duracion: turno.servicios[0]?.servicio.duracion || 0,
          precio: turno.servicios[0]?.servicio.precio || 0
        }
      };

      return NextResponse.json(turnoFormateado);

    } catch (updateError) {
      // Handle specific Prisma errors
      if (updateError instanceof Prisma.PrismaClientKnownRequestError) {
        // Unique constraint violation
        if (updateError.code === 'P2002') {
          return NextResponse.json(
            { error: 'No se puede actualizar el turno' },
            { status: 409 }
          );
        }
        // Record not found
        if (updateError.code === 'P2025') {
          return NextResponse.json(
            { error: 'Turno no encontrado' },
            { status: 404 }
          );
        }
      }

      // Rethrow other errors
      throw updateError;
    }

  } catch (error) {
    console.error('Error al actualizar turno:', error);
    
    // More detailed error logging for development
    const errorDetails = error instanceof Error 
      ? { 
          message: error.message, 
          stack: process.env.NODE_ENV === 'development' ? error.stack : undefined 
        }
      : { message: 'Error desconocido' };

    return NextResponse.json(
      { 
        error: 'Error al actualizar turno',
        details: errorDetails
      },
      { status: 500 }
    );
  }
}

=====================================================
Archivo: src\app\api\barberos\route.ts
=====================================================

// src/app/api/barberos/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const incluirSucursales = searchParams.get('incluirSucursales') === 'true';

    let barberos;
    
    if (incluirSucursales) {
      // Obtener barberos CON sus relaciones a sucursales
      barberos = await prisma.barbero.findMany({
        include: {
          // Esto debe apuntar a la tabla de relación correcta según tu modelo
          sucursales: {
            select: {
              sucursalId: true,
              sucursal: {
                select: {
                  id: true,
                  nombre: true
                }
              }
            }
          }
        }
      });
    } else {
      // Obtener solo los barberos sin relaciones
      barberos = await prisma.barbero.findMany();
    }
    
    return NextResponse.json(barberos);
  } catch (error) {
    console.error('Error al obtener barberos:', error);
    return NextResponse.json(
      { error: 'Error al obtener barberos' },
      { status: 500 }
    );
  }
}

=====================================================
Archivo: src\app\api\clientes\route.tsx
=====================================================

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function GET(request: NextRequest) {
  try {
    const clientes = await prisma.cliente.findMany({
      orderBy: {
        apellido: 'asc'
      }
    });
    
    return NextResponse.json(clientes);
  } catch (error) {
    console.error('Error al obtener clientes:', error);
    return NextResponse.json(
      { error: 'Error al obtener clientes' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // Validar campos requeridos
    const { nombre, apellido, email, telefono } = body;
    
    if (!nombre || !apellido || !email || !telefono) {
      return NextResponse.json(
        { error: 'Todos los campos son requeridos' },
        { status: 400 }
      );
    }
    
    // Verificar si el cliente ya existe por email
    const clienteExistente = await prisma.cliente.findUnique({
      where: { email }
    });
    
    if (clienteExistente) {
      // Si el cliente ya existe, actualizamos sus datos y lo devolvemos
      const clienteActualizado = await prisma.cliente.update({
        where: { id: clienteExistente.id },
        data: {
          nombre,
          apellido,
          telefono
          // No actualizamos el email ya que es único y lo estamos usando como identificador
        }
      });
      
      return NextResponse.json(clienteActualizado);
    }
    
    // Si el cliente no existe, lo creamos
    const nuevoCliente = await prisma.cliente.create({
      data: {
        nombre,
        apellido,
        email,
        telefono
      }
    });
    
    return NextResponse.json(nuevoCliente, { status: 201 });
  } catch (error) {
    console.error('Error al crear/actualizar cliente:', error);
    return NextResponse.json(
      { error: 'Error al procesar la solicitud' },
      { status: 500 }
    );
  }
}

=====================================================
Archivo: src\app\api\disponibilidad\route.ts
=====================================================

// src/app/api/disponibilidad/route.ts - Versión corregida

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { addMinutes } from 'date-fns';
import { checkTimeRangeOverlap, getUTCDayBounds } from '@/lib/dateUtils';

const prisma = new PrismaClient();

export async function GET(request: NextRequest) {
  try {
    // Obtener parámetros de la URL
    const searchParams = request.nextUrl.searchParams;
    const fecha = searchParams.get('fecha');
    const sucursalId = searchParams.get('sucursalId');
    const barberoId = searchParams.get('barberoId');
    const serviciosStr = searchParams.get('servicios');
    const duracion = searchParams.get('duracion');
    
    // Validar parámetros requeridos
    if (!fecha || !sucursalId || !barberoId) {
      return NextResponse.json(
        { error: 'Se requieren los parámetros fecha, sucursalId y barberoId' },
        { status: 400 }
      );
    }

    // Convertir parámetros
    const sucursalIdNum = parseInt(sucursalId);
    const barberoIdNum = parseInt(barberoId);
    const duracionNum = duracion ? parseInt(duracion) : 30; // 30 minutos por defecto
    const fechaDate = new Date(fecha);
    const serviciosIds = serviciosStr ? serviciosStr.split(',').map(id => parseInt(id)) : [];

    console.log("Verificando disponibilidad para:", {
      fecha: fechaDate.toISOString(),
      sucursalId: sucursalIdNum,
      barberoId: barberoIdNum,
      duracion: duracionNum,
      servicios: serviciosIds
    });

    // Obtener información de la sucursal
    const sucursal = await prisma.sucursal.findUnique({
      where: { id: sucursalIdNum }
    });

    if (!sucursal) {
      return NextResponse.json(
        { error: 'Sucursal no encontrada' },
        { status: 404 }
      );
    }

    // Verificar que el barbero trabaja en la sucursal
    const sucursalBarbero = await prisma.barberoSucursal.findFirst({
      where: {
        sucursalId: sucursalIdNum,
        barberoId: barberoIdNum
      },
      include: {
        barbero: true
      }
    });
    
    if (!sucursalBarbero) {
      return NextResponse.json(
        { error: 'El barbero seleccionado no trabaja en esta sucursal' },
        { status: 400 }
      );
    }

// Obtener horarios de la sucursal
const horarioInicio = sucursal.horarioInicio;
const horarioFin = sucursal.horarioFin;

// Extraer horas y minutos correctamente 
let horaInicio, minInicio, horaFin, minFin;

try {
  const inicioDate = new Date(horarioInicio);
  const finDate = new Date(horarioFin);
  
  horaInicio = inicioDate.getHours();
  minInicio = inicioDate.getMinutes();
  horaFin = finDate.getHours();
  minFin = finDate.getMinutes();

  console.log("Horas extraídas correctamente:", { 
    horaInicio, minInicio, horaFin, minFin 
  });
} catch (error) {
  console.error("Error al procesar horarios:", error);
  return NextResponse.json(
    { error: 'Error al procesar los horarios de la sucursal' },
    { status: 500 }
  );
}

// Crear fechas con componentes UTC explícitos
const dayBounds = getUTCDayBounds(fechaDate);

// Validar que las horas sean números válidos antes de crear las fechas
if (isNaN(horaInicio) || isNaN(minInicio) || isNaN(horaFin) || isNaN(minFin)) {
  console.error("Horas inválidas:", { horaInicio, minInicio, horaFin, minFin });
  return NextResponse.json(
    { error: 'Formato de horario inválido en la sucursal' },
    { status: 500 }
  );
}

const inicioJornada = new Date(Date.UTC(
  fechaDate.getUTCFullYear(),
  fechaDate.getUTCMonth(),
  fechaDate.getUTCDate(),
  horaInicio,
  minInicio,
  0,
  0
));

const finJornada = new Date(Date.UTC(
  fechaDate.getUTCFullYear(),
  fechaDate.getUTCMonth(),
  fechaDate.getUTCDate(),
  horaFin,
  minFin,
  0,
  0
));

// Validar que las fechas sean válidas antes de usar toISOString
if (isNaN(inicioJornada.getTime()) || isNaN(finJornada.getTime())) {
  console.error("Fechas de jornada inválidas:", { inicioJornada, finJornada });
  return NextResponse.json(
    { error: 'Error al generar los horarios de la jornada' },
    { status: 500 }
  );
}

console.log("Horario de la sucursal:", {
  inicio: inicioJornada.toISOString(),
  fin: finJornada.toISOString()
});

    // Obtener turnos existentes para el barbero específico y la fecha
    const turnosExistentes = await prisma.turno.findMany({
      where: {
        barberoId: barberoIdNum,
        sucursalId: sucursalIdNum,
        fecha: {
          gte: dayBounds.start,
          lt: dayBounds.end
        },
        estado: {
          not: 'CANCELADO'
        }
      },
      include: {
        servicios: {
          include: {
            servicio: true
          }
        }
      }
    });

    console.log(`Encontrados ${turnosExistentes.length} turnos para el barbero #${barberoIdNum} en esta fecha`);

    // Procesar los turnos para detectar intervalos ocupados
    const intervalosOcupados = turnosExistentes.map(turno => {
      const inicioTurno = new Date(turno.fecha);
      
      // Calcular la duración total del turno sumando la duración de sus servicios
      const duracionTurno = turno.servicios.reduce(
        (total, ts) => total + ts.servicio.duracion, 0
      );
      
      const finTurno = addMinutes(inicioTurno, duracionTurno);
      
      console.log(`Turno #${turno.id}: ${inicioTurno.toISOString()} a ${finTurno.toISOString()} (${duracionTurno} min)`);
      
      return {
        id: turno.id,
        inicio: inicioTurno,
        fin: finTurno,
        duracion: duracionTurno
      };
    });

    // Generar slots de tiempo disponibles (cada 30 minutos)
    const slots = [];
    let currentTime = new Date(inicioJornada);
    
    // Asegurarse de no incluir slots en el pasado
    const now = new Date();
    if (now > currentTime) {
      // Redondear a los siguientes 30 minutos
      const minutes = now.getUTCMinutes();
      const roundedMinutes = minutes < 30 ? 30 : 60;
      const roundedHour = minutes < 30 ? now.getUTCHours() : now.getUTCHours() + 1;
      
      currentTime = new Date(Date.UTC(
        fechaDate.getUTCFullYear(),
        fechaDate.getUTCMonth(),
        fechaDate.getUTCDate(),
        roundedHour,
        roundedMinutes === 60 ? 0 : roundedMinutes,
        0,
        0
      ));
    }

    console.log(`Generando slots desde ${currentTime.toISOString()} hasta ${finJornada.toISOString()}`);

    while (currentTime < finJornada) {
      // Para cada slot potencial, verificamos si está disponible
      const slotInicio = new Date(currentTime);
      const slotFin = addMinutes(new Date(currentTime), duracionNum);
      
      // Verificar si este slot se solapa con algún intervalo ocupado
      let hayConflicto = false;
      let turnoConflicto = null;
      
      for (const intervalo of intervalosOcupados) {
        // Verificar si hay solapamiento entre el slot y el intervalo ocupado
        if (checkTimeRangeOverlap(slotInicio, slotFin, intervalo.inicio, intervalo.fin)) {
          hayConflicto = true;
          turnoConflicto = intervalo;
          console.log(`Conflicto detectado para slot ${slotInicio.toISOString()}-${slotFin.toISOString()} con turno #${intervalo.id}`);
          break;
        }
      }
      
      // Si no hay conflicto, este slot está disponible
      if (!hayConflicto) {
        slots.push({
          inicio: slotInicio,
          fin: slotFin,
          disponible: true
        });
      } else {
        // Para depuración, incluimos también los slots no disponibles
        slots.push({
          inicio: slotInicio,
          fin: slotFin,
          disponible: false,
          conflicto: turnoConflicto ? `Turno #${turnoConflicto.id}` : null
        });
      }
      
      // Avanzar al siguiente slot (30 minutos)
      currentTime = addMinutes(currentTime, 30);
    }

    console.log(`Total de slots generados: ${slots.length}, disponibles: ${slots.filter(s => s.disponible).length}`);

    return NextResponse.json(slots);
  } catch (error) {
    console.error('Error al obtener disponibilidad:', error);
    return NextResponse.json(
      { error: 'Error al procesar la solicitud', detalle: error.message },
      { status: 500 }
    );
  }
}

=====================================================
Archivo: src\app\api\servicios\route.ts
=====================================================

import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma';

export async function GET() {
  try {
    const servicios = await prisma.servicio.findMany();
    return NextResponse.json(servicios);
  } catch (error) {
    console.error('Error al obtener servicios:', error);
    return NextResponse.json({ error: 'Error al obtener servicios' }, { status: 500 });
  }
}

=====================================================
Archivo: src\app\api\sucursales\route.ts
=====================================================

//my-app\src\app\api\sucursales\route.ts
import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function GET(request: NextRequest) {
  try {
    const sucursales = await prisma.sucursal.findMany({
      include: {
        diasAtencion: true
      }
    });
    
    return NextResponse.json(sucursales);
  } catch (error) {
    console.error('Error al obtener sucursales:', error);
    return NextResponse.json(
      { error: 'Error al obtener sucursales' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // Validar campos requeridos
    const { nombre, direccion, telefono, horarioInicio, horarioFin, diasAtencion } = body;
    
    if (!nombre || !direccion || !telefono || !horarioInicio || !horarioFin || !diasAtencion) {
      return NextResponse.json(
        { error: 'Todos los campos son requeridos' },
        { status: 400 }
      );
    }
    
    // Crear la sucursal
    const sucursal = await prisma.sucursal.create({
      data: {
        nombre,
        direccion,
        telefono,
        horarioInicio,
        horarioFin,
        diasAtencion
      }
    });
    
    return NextResponse.json(sucursal, { status: 201 });
  } catch (error) {
    console.error('Error al crear sucursal:', error);
    return NextResponse.json(
      { error: 'Error al crear la sucursal' },
      { status: 500 }
    );
  }
}

=====================================================
Archivo: src\app\api\sucursales\[id]\servicios\route.ts
=====================================================

//my-app\src\app\api\sucursales\[id]\servicios\route.ts
import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const sucursalId = parseInt(params.id);
    
    if (isNaN(sucursalId)) {
      return NextResponse.json(
        { error: 'ID de sucursal inválido' },
        { status: 400 }
      );
    }

    // Verificar que la sucursal existe
    const sucursal = await prisma.sucursal.findUnique({
      where: { id: sucursalId }
    });
    
    if (!sucursal) {
      return NextResponse.json(
        { error: 'Sucursal no encontrada' },
        { status: 404 }
      );
    }
    
    // Obtener todos los servicios (sin filtrar por sucursal por ahora)
    // En una implementación real, utilizarías una relación entre servicios y sucursales
    // Esto es una simplificación temporal
    const servicios = await prisma.servicio.findMany({
      orderBy: {
        nombre: 'asc'
      }
    });
    
    return NextResponse.json(servicios);
  } catch (error) {
    console.error('Error al obtener servicios de la sucursal:', error);
    return NextResponse.json(
      { error: 'Error al procesar la solicitud' },
      { status: 500 }
    );
  }
}

=====================================================
Archivo: src\app\api\turnos\disponibilidad\route.ts
=====================================================

// my-app\src\app\api\turnos\disponibilidad\route.ts
import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { addMinutes, format, parse, isAfter, isBefore, isSameDay } from 'date-fns';
import { es } from 'date-fns/locale';

const prisma = new PrismaClient();

export async function GET(request: NextRequest) {
  try {
    // Obtener parámetros de la URL
    const searchParams = request.nextUrl.searchParams;
    const fecha = searchParams.get('fecha');
    const sucursalId = searchParams.get('sucursalId');
    const barberoId = searchParams.get('barberoId');
    const serviciosIds = searchParams.get('servicios')?.split(',');

    // Validar parámetros requeridos
    if (!fecha || !sucursalId) {
      return NextResponse.json(
        { error: 'Se requieren los parámetros fecha y sucursalId' },
        { status: 400 }
      );
    }

    // Convertir IDs a números
    const sucursalIdNum = parseInt(sucursalId);
    const barberoIdNum = barberoId ? parseInt(barberoId) : undefined;
    
    console.log("Verificando disponibilidad para:", {
      fecha,
      sucursalId: sucursalIdNum,
      barberoId: barberoIdNum,
      serviciosIds
    });
    
    // Calcular duración total en minutos si se seleccionaron servicios
    let duracionTotal = 0;
    
    if (serviciosIds && serviciosIds.length > 0) {
      const servicios = await prisma.servicio.findMany({
        where: {
          id: {
            in: serviciosIds.map(id => parseInt(id))
          }
        },
        select: { duracion: true }
      });
      
      duracionTotal = servicios.reduce((total, servicio) => total + servicio.duracion, 0);
      console.log(`Duración total de servicios: ${duracionTotal} minutos`);
    } else {
      // Duración por defecto si no se seleccionaron servicios
      duracionTotal = 30;
      console.log("Usando duración por defecto: 30 minutos");
    }

    // Obtener información de la sucursal
    const sucursal = await prisma.sucursal.findUnique({
      where: { id: sucursalIdNum },
      select: {
        diasAtencion: true,
        horarioInicio: true,
        horarioFin: true
      }
    });

    if (!sucursal) {
      return NextResponse.json(
        { error: 'Sucursal no encontrada' },
        { status: 404 }
      );
    }

    console.log("Información de sucursal:", {
      diasAtencion: sucursal.diasAtencion,
      horarioInicio: sucursal.horarioInicio,
      horarioFin: sucursal.horarioFin
    });

    // Crear fechas UTC para inicio y fin del día
    const fechaDate = new Date(fecha);
    const inicioDelDiaUTC = new Date(Date.UTC(
      fechaDate.getUTCFullYear(),
      fechaDate.getUTCMonth(),
      fechaDate.getUTCDate(),
      0, 0, 0, 0
    ));

    const finDelDiaUTC = new Date(Date.UTC(
      fechaDate.getUTCFullYear(),
      fechaDate.getUTCMonth(),
      fechaDate.getUTCDate(),
      23, 59, 59, 999
    ));

    console.log("Rango de fecha para búsqueda:", {
      inicioDelDiaUTC: inicioDelDiaUTC.toISOString(),
      finDelDiaUTC: finDelDiaUTC.toISOString()
    });

    const diaSemana = fechaDate.getUTCDay(); // 0 = Domingo, 1 = Lunes, ..., 6 = Sábado
    
    // Verificar si la sucursal atiende en el día seleccionado
    const diasAtencionArr = sucursal.diasAtencion.split(',');
    const diasMap: Record<string, number> = {
      'LUNES': 1, 'MARTES': 2, 'MIERCOLES': 3, 'JUEVES': 4, 'VIERNES': 5, 'SABADO': 6, 'DOMINGO': 0
    };
    
    const diaSemanaStr = Object.keys(diasMap).find(key => diasMap[key] === diaSemana);
    console.log(`Día de la semana: ${diaSemanaStr} (${diaSemana})`);
    
    if (!diaSemanaStr || !diasAtencionArr.includes(diaSemanaStr)) {
      console.log(`Sucursal no atiende este día (${diaSemanaStr}). Días de atención: ${diasAtencionArr.join(', ')}`);
      return NextResponse.json({ 
        disponibilidad: [], 
        mensaje: 'La sucursal no atiende este día' 
      });
    }

    // Convertir horarios de la sucursal a UTC
    const [horaInicioHora, horaInicioMin] = sucursal.horarioInicio.split(':').map(Number);
    const [horaFinHora, horaFinMin] = sucursal.horarioFin.split(':').map(Number);
    
    // Crear objetos Date para la jornada en UTC
    const inicioJornadaUTC = new Date(Date.UTC(
      fechaDate.getUTCFullYear(),
      fechaDate.getUTCMonth(),
      fechaDate.getUTCDate(),
      horaInicioHora,
      horaInicioMin,
      0,
      0
    ));
    
    const finJornadaUTC = new Date(Date.UTC(
      fechaDate.getUTCFullYear(),
      fechaDate.getUTCMonth(),
      fechaDate.getUTCDate(),
      horaFinHora,
      horaFinMin,
      0,
      0
    ));
    
    console.log("Horario de la sucursal en UTC:", {
      inicioJornadaUTC: inicioJornadaUTC.toISOString(),
      finJornadaUTC: finJornadaUTC.toISOString()
    });

    // Obtener los barberos disponibles en la sucursal para el día seleccionado
    let barberos;
    
    if (barberoIdNum) {
      // Si se especificó un barbero, verificar que esté disponible en esa sucursal
      const sucursalBarbero = await prisma.barberoSucursal.findFirst({
        where: {
          sucursalId: sucursalIdNum,
          barberoId: barberoIdNum
        },
        include: {
          barbero: true
        }
      });
      
      if (!sucursalBarbero) {
        return NextResponse.json(
          { error: 'El barbero seleccionado no trabaja en esta sucursal' },
          { status: 400 }
        );
      }
      
      barberos = [sucursalBarbero];
      console.log(`Verificando disponibilidad para barbero específico: ${sucursalBarbero.barbero.nombre} ${sucursalBarbero.barbero.apellido}`);
    } else {
      // Si no se especificó barbero, obtener todos los disponibles en esa sucursal
      barberos = await prisma.barberoSucursal.findMany({
        where: {
          sucursalId: sucursalIdNum,
        },
        include: {
          barbero: true
        }
      });
      console.log(`Verificando disponibilidad para todos los barberos (${barberos.length})`);
    }

    // Usar variables UTC para la consulta de turnos existentes
    const turnosExistentes = await prisma.turno.findMany({
      where: {
        fecha: {
          gte: inicioDelDiaUTC,
          lt: finDelDiaUTC
        },
        sucursalId: sucursalIdNum,
        barberoId: barberoIdNum ? barberoIdNum : {
          in: barberos.map(b => b.barberoId)
        },
        estado: {
          not: 'CANCELADO'
        }
      },
      include: {
        servicios: {
          include: {
            servicio: {
              select: {
                duracion: true
              }
            }
          }
        },
        barbero: {
          select: {
            nombre: true,
            apellido: true
          }
        }
      }
    });

    console.log(`Encontrados ${turnosExistentes.length} turnos existentes para esta fecha`);
    
    // Listar los turnos existentes para depuración
    turnosExistentes.forEach(turno => {
      const duracionTurno = turno.servicios.reduce(
        (total, ts) => total + ts.servicio.duracion, 0
      );
      const turnoInicio = new Date(turno.fecha);
      const turnoFin = addMinutes(new Date(turno.fecha), duracionTurno);
      
      console.log(`Turno #${turno.id}: ${turnoInicio.toISOString()} - ${turnoFin.toISOString()} (${duracionTurno} min) - Barbero: ${turno.barbero.nombre} ${turno.barbero.apellido}`);
    });

    // Crear slots de tiempo disponibles (cada 30 minutos) utilizando UTC
    const slots = [];
    let currentTime = new Date(inicioJornadaUTC);
    
    // Asegurar que no intentamos generar slots en el pasado
    const nowUTC = new Date();
    if (isSameDay(currentTime, nowUTC) && isAfter(nowUTC, currentTime)) {
      // Si es hoy y ya pasamos la hora de apertura, empezamos desde ahora
      // Redondeamos a los siguientes 30 minutos en UTC
      const minutesUTC = nowUTC.getUTCMinutes();
      const roundToNext30 = minutesUTC > 30 ? 60 - minutesUTC : 30 - minutesUTC;
      currentTime = addMinutes(nowUTC, roundToNext30);
      console.log(`Ajustando hora de inicio a ${currentTime.toISOString()} porque estamos en el mismo día`);
    }

    console.log(`Generando slots desde ${currentTime.toISOString()} hasta ${finJornadaUTC.toISOString()}`);

    // Generar todos los slots de tiempo posibles
    while (isBefore(currentTime, finJornadaUTC)) {
      // Para cada slot, verificar disponibilidad con cada barbero
      for (const sucursalBarbero of barberos) {
        // Verificar si el slot conflictúa con turnos existentes
        const slotInicio = new Date(currentTime);
        const slotFin = addMinutes(new Date(currentTime), duracionTotal);
        let conflicto = false;
        let turnoConflicto = null;
        
        for (const turno of turnosExistentes.filter(t => t.barberoId === sucursalBarbero.barberoId)) {
          const turnoDuracion = turno.servicios.reduce(
            (total, ts) => total + ts.servicio.duracion, 0
          );
          
          const turnoInicio = new Date(turno.fecha);
          const turnoFin = addMinutes(turnoInicio, turnoDuracion);
          
          // Verificar si hay solapamiento entre el slot y el turno
          const haySupeposicion = (
            (slotInicio < turnoFin && slotFin > turnoInicio)
          );
          
          if (haySupeposicion) {
            conflicto = true;
            turnoConflicto = turno;
            break;
          }
        }
        
        if (!conflicto) {
          slots.push({
            hora: format(slotInicio, 'HH:mm'),
            barberoId: sucursalBarbero.barberoId,
            barberoNombre: `${sucursalBarbero.barbero.nombre} ${sucursalBarbero.barbero.apellido}`,
            disponible: true
          });
        } else if (turnoConflicto) {
          console.log(`Slot ${format(slotInicio, 'HH:mm')} no disponible para barbero ${sucursalBarbero.barbero.nombre} por conflicto con turno #${turnoConflicto.id}`);
        }
      }
      
      // Avanzar al siguiente slot (30 minutos)
      currentTime = addMinutes(currentTime, 30);
    }

    console.log(`Generados ${slots.length} slots disponibles en total`);

    // Agrupar slots por hora para mostrar los barberos disponibles en cada horario
    const slotsAgrupados = slots.reduce((result: Record<string, any>, slot) => {
      const hora = slot.hora;
      
      if (!result[hora]) {
        result[hora] = {
          hora,
          barberos: []
        };
      }
      
      result[hora].barberos.push({
        id: slot.barberoId,
        nombre: slot.barberoNombre
      });
      
      return result;
    }, {});

    const slotsResultado = Object.values(slotsAgrupados);
    console.log(`Respondiendo con ${slotsResultado.length} slots agrupados por hora`);

    return NextResponse.json({ 
      disponibilidad: slotsResultado,
      fecha: format(fechaDate, 'EEEE d MMMM yyyy', { locale: es }),
      duracionServicio: duracionTotal
    });
    
  } catch (error) {
    console.error('Error al obtener disponibilidad:', error);
    return NextResponse.json(
      { error: 'Error al procesar la solicitud', detalle: error.message },
      { status: 500 }
    );
  }
}

=====================================================
Archivo: src\app\api\turnos\route.ts
=====================================================

// /my-app/src/app/api/turnos/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { enviarConfirmacionTurno } from '../../../lib/email-service';

const prisma = new PrismaClient();

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log("Datos recibidos:", body);

    // Validar los datos de entrada
    const {
      clienteData,  // En lugar de clienteId
      sucursalId,
      barberoId,
      fecha,
      serviciosIds
    } = body;

    if (!clienteData || !sucursalId || !barberoId || !fecha || !serviciosIds || !serviciosIds.length) {
      return NextResponse.json(
        { error: 'Faltan datos requeridos' },
        { status: 400 }
      );
    }

    // Verificar que los datos del cliente están completos
    if (!clienteData.nombre || !clienteData.apellido || !clienteData.email || !clienteData.telefono) {
      return NextResponse.json(
        { error: 'Datos del cliente incompletos' },
        { status: 400 }
      );
    }

    // Buscar o crear el cliente
    let cliente;
    if (clienteData.email) {
      cliente = await prisma.cliente.findUnique({
        where: { email: clienteData.email }
      });
    }

    if (!cliente) {
      cliente = await prisma.cliente.create({
        data: {
          nombre: clienteData.nombre,
          apellido: clienteData.apellido,
          email: clienteData.email,
          telefono: clienteData.telefono
        }
      });
    } else {
      // Actualizar datos existentes
      cliente = await prisma.cliente.update({
        where: { id: cliente.id },
        data: {
          nombre: clienteData.nombre,
          apellido: clienteData.apellido,
          telefono: clienteData.telefono
        }
      });
    }

    const clienteId = cliente.id;

    // Verificar que los servicios existen
    const servicios = await prisma.servicio.findMany({
      where: {
        id: {
          in: serviciosIds
        }
      }
    });

    if (servicios.length !== serviciosIds.length) {
      return NextResponse.json(
        { error: 'Uno o más servicios no existen' },
        { status: 404 }
      );
    }

    // Verificar que el barbero trabaja en la sucursal
    const sucursalBarbero = await prisma.barberoSucursal.findFirst({
      where: {
        sucursalId,
        barberoId
      }
    });

    if (!sucursalBarbero) {
      return NextResponse.json(
        { error: 'El barbero no trabaja en esta sucursal' },
        { status: 400 }
      );
    }

    // Actualiza la sección de verificación de conflictos en /my-app/src/app/api/turnos/route.ts

    // Verificar disponibilidad en la fecha y hora solicitada
    const fechaTurno = new Date(fecha);
    const duracionTotal = servicios.reduce((total, servicio) => total + servicio.duracion, 0);
    const fechaFinTurno = new Date(fechaTurno.getTime() + duracionTotal * 60000);

    console.log('Verificando disponibilidad para:', {
      fecha: fechaTurno.toISOString(),
      barberoId,
      sucursalId,
      duracionTotal,
      fechaFinTurno: fechaFinTurno.toISOString()
    });

    // Usar la misma lógica de obtención de turno que en la API de disponibilidad
    // para asegurarnos de que las verificaciones de disponibilidad sean consistentes
    const { getUTCDayBounds, checkTimeRangeOverlap } = await import('@/lib/dateUtils');

    const dayBounds = getUTCDayBounds(fechaTurno);

    // Buscar turnos existentes para el mismo barbero en la misma fecha
    const turnosExistentes = await prisma.turno.findMany({
      where: {
        barberoId,
        sucursalId,
        estado: { not: 'CANCELADO' },
        fecha: {
          gte: dayBounds.start,
          lt: dayBounds.end
        }
      },
      include: {
        servicios: {
          include: {
            servicio: true
          }
        }
      }
    });

    console.log(`Encontrados ${turnosExistentes.length} turnos para el barbero #${barberoId} en esta fecha`);

    // Verificar conflictos usando la función de utilidad
    let hayConflicto = false;
    let turnoConflicto = null;

    for (const turno of turnosExistentes) {
      const inicioTurnoExistente = new Date(turno.fecha);

      // Calcular duración sumando la duración de sus servicios
      const duracionTurnoExistente = turno.servicios.reduce(
        (total, ts) => total + ts.servicio.duracion, 0
      );

      const finTurnoExistente = new Date(inicioTurnoExistente.getTime() + duracionTurnoExistente * 60000);

      console.log(`Verificando conflicto con turno #${turno.id}:`, {
        inicio: inicioTurnoExistente.toISOString(),
        fin: finTurnoExistente.toISOString()
      });

      const haySupeposicion = checkTimeRangeOverlap(
        fechaTurno,
        fechaFinTurno,
        inicioTurnoExistente,
        finTurnoExistente
      );

      if (haySupeposicion) {
        hayConflicto = true;
        turnoConflicto = turno;
        console.log(`⚠️ CONFLICTO DETECTADO con turno #${turno.id}`);
        break;
      }
    }

    if (hayConflicto) {
      console.log('Detalles del conflicto:', {
        turnoConflictoId: turnoConflicto?.id,
        fechaTurnoConflicto: turnoConflicto?.fecha,
        fechaSolicitada: fechaTurno
      });

      return NextResponse.json(
        {
          error: 'El horario seleccionado ya no está disponible',
          detalles: `Conflicto con otro turno existente (#${turnoConflicto?.id})`
        },
        { status: 409 }
      );
    }

    // Crear el turno en una transacción
    const resultado = await prisma.$transaction(async (tx) => {
      // Crear el turno
      const nuevoTurno = await tx.turno.create({
        data: {
          fecha: fechaTurno,
          estado: 'PENDIENTE',
          clienteId,
          barberoId,
          sucursalId
        }
      });

      // Crear las relaciones con los servicios
      for (const servicio of servicios) {
        await tx.servicioTurno.create({
          data: {
            turnoId: nuevoTurno.id,
            servicioId: servicio.id
          }
        });
      }

      return nuevoTurno;
    });

    // Obtener información completa del turno para enviar por email
    const turnoCompleto = await prisma.turno.findUnique({
      where: { id: resultado.id },
      include: {
        cliente: true,
        barbero: true,
        sucursal: true,
        servicios: {
          include: {
            servicio: true
          }
        }
      }
    });

    // Enviar email de confirmación
    if (turnoCompleto && cliente.email) {
      // Formatear los datos para el email
      const turnoInfo = {
        id: turnoCompleto.id,
        fecha: turnoCompleto.fecha,
        cliente: {
          nombre: turnoCompleto.cliente.nombre,
          apellido: turnoCompleto.cliente.apellido,
          email: turnoCompleto.cliente.email
        },
        barbero: {
          nombre: turnoCompleto.barbero.nombre,
          apellido: turnoCompleto.barbero.apellido
        },
        sucursal: {
          nombre: turnoCompleto.sucursal!.nombre,
          direccion: turnoCompleto.sucursal!.direccion
        },
        servicios: turnoCompleto.servicios.map(ts => ({
          nombre: ts.servicio.nombre,
          precio: Number(ts.servicio.precio)
        }))
      };

      try {
        await enviarConfirmacionTurno(turnoInfo);
      } catch (emailError) {
        console.error('Error al enviar email de confirmación:', emailError);
        // No fallamos la operación si el email falla
      }
    }

    return NextResponse.json({
      success: true,
      turno: resultado,
      mensaje: 'Turno creado correctamente'
    }, { status: 201 });

  } catch (error) {
    console.error('Error al crear turno:', error);
    return NextResponse.json(
      { error: 'Error al procesar la solicitud' },
      { status: 500 }
    );
  }
}

// Obtener todos los turnos o filtrar por sucursal, barbero, cliente, fecha
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const sucursalId = searchParams.get('sucursalId');
    const barberoId = searchParams.get('barberoId');
    const clienteId = searchParams.get('clienteId');
    const fecha = searchParams.get('fecha');
    const estado = searchParams.get('estado');

    // Construir la consulta con los filtros
    const where: any = {};

    if (sucursalId) {
      where.sucursalId = parseInt(sucursalId);
    }

    if (barberoId) {
      where.barberoId = parseInt(barberoId);
    }

    if (clienteId) {
      where.clienteId = parseInt(clienteId);
    }

    if (estado) {
      where.estado = estado;
    }

    if (fecha) {
      const fechaDate = new Date(fecha);
      where.fecha = {
        gte: new Date(fechaDate.setHours(0, 0, 0, 0)),
        lt: new Date(fechaDate.setHours(23, 59, 59, 999))
      };
    }

    // Ejecutar la consulta
    const turnos = await prisma.turno.findMany({
      where,
      include: {
        cliente: {
          select: {
            id: true,
            nombre: true,
            apellido: true,
            email: true,
            telefono: true
          }
        },
        barbero: {
          select: {
            id: true,
            nombre: true,
            apellido: true
          }
        },
        sucursal: {
          select: {
            id: true,
            nombre: true,
            direccion: true
          }
        },
        servicios: {
          include: {
            servicio: true
          }
        }
      },
      orderBy: {
        fecha: 'asc'
      }
    });

    // Formatear los resultados para hacerlos más amigables
    const turnosFormateados = turnos.map(turno => ({
      id: turno.id,
      fecha: turno.fecha,
      estado: turno.estado,
      cliente: {
        id: turno.cliente.id,
        nombre: `${turno.cliente.nombre} ${turno.cliente.apellido}`,
        email: turno.cliente.email,
        telefono: turno.cliente.telefono
      },
      barbero: {
        id: turno.barbero.id,
        nombre: `${turno.barbero.nombre} ${turno.barbero.apellido}`
      },
      sucursal: turno.sucursal,
      servicios: turno.servicios.map(ts => ({
        id: ts.servicio.id,
        nombre: ts.servicio.nombre,
        precio: Number(ts.servicio.precio),
        duracion: ts.servicio.duracion
      })),
      duracionTotal: turno.servicios.reduce(
        (total, ts) => total + ts.servicio.duracion, 0
      ),
      precioTotal: turno.servicios.reduce(
        (total, ts) => total + Number(ts.servicio.precio), 0
      ),
      createdAt: turno.createdAt
    }));

    return NextResponse.json(turnosFormateados);

  } catch (error) {
    console.error('Error al obtener turnos:', error);
    return NextResponse.json(
      { error: 'Error al procesar la solicitud' },
      { status: 500 }
    );
  }
}

=====================================================
Archivo: src\app\api\turnos\[id]\route.ts
=====================================================

// src/app/api/turnos/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const turnoId = parseInt(params.id);
    const { estado } = await request.json();
    
    if (!estado) {
      return NextResponse.json(
        { error: 'El estado es requerido' },
        { status: 400 }
      );
    }
    
    // Validar que el estado sea uno de los permitidos
    const estadosValidos = ['PENDIENTE', 'CONFIRMADO', 'CANCELADO', 'COMPLETADO'];
    if (!estadosValidos.includes(estado)) {
      return NextResponse.json(
        { error: 'Estado no válido' },
        { status: 400 }
      );
    }
    
    // Actualizar el estado del turno
    const turnoActualizado = await prisma.turno.update({
      where: { id: turnoId },
      data: { estado }
    });
    
    return NextResponse.json(turnoActualizado);
  } catch (error) {
    console.error('Error al actualizar el turno:', error);
    return NextResponse.json(
      { error: 'Error al procesar la solicitud' },
      { status: 500 }
    );
  }
}

=====================================================
Archivo: src\app\api\upload\route.ts
=====================================================

import { NextRequest, NextResponse } from 'next/server';
import { writeFile } from 'fs/promises';
import { join } from 'path';
import { mkdir } from 'fs/promises';

export async function POST(request: NextRequest) {
  try {
    // Get form data
    const formData = await request.formData();
    const file = formData.get('file') as File;

    if (!file) {
      return NextResponse.json({ error: 'No file uploaded' }, { status: 400 });
    }

    // Validate file type
    const allowedTypes = ['image/png', 'image/jpeg', 'image/webp'];
    if (!allowedTypes.includes(file.type)) {
      return NextResponse.json({ error: 'Invalid file type' }, { status: 400 });
    }

    // Validate file size (5MB max)
    const maxSize = 5 * 1024 * 1024; // 5MB
    if (file.size > maxSize) {
      return NextResponse.json({ error: 'File too large' }, { status: 400 });
    }

    // Generate unique filename
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);
    
    // Create uploads directory if it doesn't exist
    const uploadDir = join(process.cwd(), 'public', 'uploads');
    try {
      await mkdir(uploadDir, { recursive: true });
    } catch (err) {
      console.error('Error creating directory:', err);
      if (err.code !== 'EEXIST') {
        throw err;
      }
    }

    // Generate unique filename to prevent overwriting
    const filename = `${Date.now()}-${file.name.replace(/\s/g, '-')}`;
    const path = join(uploadDir, filename);

    // Write file
    await writeFile(path, buffer);

    // Return the path where the file was saved
    return NextResponse.json({ 
      message: 'File uploaded successfully',
      url: `/uploads/${filename}`  // Asegúrate de que sea "url" y no "filename"
    }, { status: 200 });

  } catch (error) {
    console.error('Upload error:', error);
    return NextResponse.json({ 
      error: 'File upload failed', 
      details: error.message 
    }, { status: 500 });
  }
}

=====================================================
Archivo: src\app\globals.css
=====================================================

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 255, 255, 255;
  --background-start-rgb: 0, 0, 0;
  --background-end-rgb: 0, 0, 0;
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
    to bottom,
    rgb(var(--background-start-rgb)),
    rgb(var(--background-end-rgb))
  );
  min-height: 100vh;
}

/* Estilos personalizados para inputs y selects */
select option {
  background-color: #374151; /* gray-700 */
  color: white;
}

input[type="date"]::-webkit-calendar-picker-indicator {
  filter: invert(1);
}

=====================================================
Archivo: src\app\layout.tsx
=====================================================

//my-app\src\app\layout.tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import '@/styles/tailwind.css'
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}


=====================================================
Archivo: src\app\login\page.tsx
=====================================================

// src/app/login/page.tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

export default function LoginPage() {
  const router = useRouter();
  const [credentials, setCredentials] = useState({
    email: '',
    password: ''
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(credentials),
      });

      if (response.ok) {
        router.push('/dashboard');
      } else {
        alert('Credenciales inválidas');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error al iniciar sesión');
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-900">
      <div className="max-w-md w-full space-y-8 p-8 bg-gray-800 rounded-lg">
        <h2 className="text-3xl font-bold text-center text-white">
          Iniciar Sesión
        </h2>
        <form onSubmit={handleSubmit} className="mt-8 space-y-6">
          <Input
            type="email"
            placeholder="Email"
            value={credentials.email}
            onChange={(e) => setCredentials({...credentials, email: e.target.value})}
            className="bg-gray-700 text-white"
          />
          <Input
            type="password"
            placeholder="Contraseña"
            value={credentials.password}
            onChange={(e) => setCredentials({...credentials, password: e.target.value})}
            className="bg-gray-700 text-white"
          />
          <Button type="submit" className="w-full">
            Iniciar Sesión
          </Button>
        </form>
      </div>
    </div>
  );
}

=====================================================
Archivo: src\app\page.tsx
=====================================================

'use client';

import Link from 'next/link';
import { useState, useEffect } from 'react';
import AppointmentForm from '@/components/AppointmentForm';
import ServiceAndBarberList from '@/components/ServiceAndBarberList';
import AnimatedBackground from '@/components/AnimatedBackground';

export default function Home() {
  // Estado para manejar la visibilidad del modal
  const [isModalOpen, setIsModalOpen] = useState(false);
  // Estados para pasar datos preseleccionados al formulario
  const [selectedService, setSelectedService] = useState<number | null>(null);
  const [selectedBarber, setSelectedBarber] = useState<number | null>(null);

  // Esta función maneja todos los clics de reserva y pasa los datos adecuados
  const handleReserveClick = (type: 'service' | 'barber' | 'promotion', id?: number) => {
    if (type === 'service') {
      setSelectedService(id || null);
      setSelectedBarber(null);
    } else if (type === 'barber') {
      setSelectedBarber(id || null);
      setSelectedService(null);
    }
    // Abrir el modal
    setIsModalOpen(true);
    // Prevenir scroll en el body cuando el modal está abierto
    document.body.style.overflow = 'hidden';
  };

  // Cerrar el modal y restaurar el scroll
  const handleCloseModal = () => {
    setIsModalOpen(false);
    document.body.style.overflow = 'auto';
  };

  // Limpiar el estilo de overflow cuando el componente se desmonta
  useEffect(() => {
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, []);

  return (
    <main className="min-h-screen bg-gray-900 py-12 relative overflow-hidden">
      {/* Animated Background Component */}
      <AnimatedBackground />
      
      {/* Botón de Admin en la esquina superior derecha */}
      <div className="absolute top-4 right-4 z-10">
        <Link 
          href="/admin/login" 
          className="text-gray-400 hover:text-white transition-colors text-sm"
        >
          Panel Admin
        </Link>
      </div>

      <div className="container mx-auto px-4 relative z-10">
        <div className="text-center mb-16 relative">
          <h1 className="text-5xl font-bold text-center text-white mb-4">
            Barbería System
          </h1>
          <p className="text-gray-400 max-w-md mx-auto">
            Cortes de precisión y estilo que definen tu imagen personal
          </p>
          
          {/* CTA principal */}
          <button 
            onClick={() => handleReserveClick('promotion')}
            className="mt-8 px-6 py-3 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 transition-all shadow-lg shadow-blue-500/20 hover:shadow-blue-500/40 hover:translate-y-[-2px] active:translate-y-0"
          >
            Reservar Ahora
          </button>
        </div>
        
        <div className="grid lg:grid-cols-2 gap-10 max-w-7xl mx-auto">
          {/* Panel de servicios y barberos */}
          <div className="bg-gray-800/80 rounded-lg p-6 shadow-xl hover:shadow-blue-900/10 transition-all border border-gray-700/50">
            <ServiceAndBarberList 
              onServiceReserveClick={(id) => handleReserveClick('service', id)}
              onBarberReserveClick={(id) => handleReserveClick('barber', id)}
            />
          </div>
          
          {/* Panel con formulario visible solo en desktop */}
          <div className="bg-gray-800/80 rounded-lg p-6 shadow-xl hover:shadow-blue-900/10 transition-all hidden lg:block border border-gray-700/50">
            <AppointmentForm 
              preselectedService={selectedService} 
              preselectedBarber={selectedBarber}
            />
          </div>
        </div>
        
        {/* Footer minimalista */}
        <footer className="mt-16 text-center text-gray-500 text-sm">
          <p>© 2025 Barbería System. Todos los derechos reservados.</p>
          <div className="flex justify-center space-x-6 mt-3">
            <a href="#" className="hover:text-white transition-colors">Instagram</a>
            <a href="#" className="hover:text-white transition-colors">Facebook</a>
            <a href="#" className="hover:text-white transition-colors">Twitter</a>
            <a href="#" className="hover:text-white transition-colors">Contacto</a>
          </div>
        </footer>
      </div>

      {/* Modal para el formulario de reserva - Versión Mejorada con Scroll */}
      {isModalOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center overflow-y-auto">
          {/* Overlay con efecto de blur */}
          <div 
            className="fixed inset-0 bg-black/70 backdrop-blur-sm transition-opacity"
            onClick={handleCloseModal}
          ></div>
          
          {/* Contenedor del modal con altura máxima y scroll interno */}
          <div 
            className="relative bg-gray-800 rounded-lg border border-gray-700 max-w-3xl w-full mx-4 my-4 md:mx-auto z-50 overflow-hidden transform transition-all animate-modal-open shadow-xl max-h-[90vh] flex flex-col"
          >
            {/* Botón para cerrar */}
            <button 
              onClick={handleCloseModal}
              className="absolute top-4 right-4 text-gray-400 hover:text-white z-10"
              aria-label="Cerrar"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            
            {/* Header del modal fijo */}
            <div className="p-6 pb-0 flex-shrink-0">
              <h2 className="text-2xl font-bold text-white">
                Reserva tu cita
              </h2>
              <p className="text-gray-400 text-sm mt-1">
                Completa el formulario para asegurar tu horario
              </p>
            </div>
            
            {/* Contenido del modal con scroll */}
            <div className="p-6 overflow-y-auto">
              <AppointmentForm 
                preselectedService={selectedService} 
                preselectedBarber={selectedBarber}
                onComplete={handleCloseModal}
              />
            </div>
          </div>
        </div>
      )}

      {/* Estilos para la animación del modal */}
      <style jsx global>{`
        @keyframes modalOpen {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        .animate-modal-open {
          animation: modalOpen 0.3s ease-out forwards;
        }
        
        /* Estilos para optimizar el scroll en el modal */
        .overflow-y-auto {
          scrollbar-width: thin;
          scrollbar-color: rgba(75, 85, 99, 0.5) rgba(31, 41, 55, 0.1);
        }
        
        .overflow-y-auto::-webkit-scrollbar {
          width: 6px;
        }
        
        .overflow-y-auto::-webkit-scrollbar-track {
          background: rgba(31, 41, 55, 0.1);
          border-radius: 3px;
        }
        
        .overflow-y-auto::-webkit-scrollbar-thumb {
          background-color: rgba(75, 85, 99, 0.5);
          border-radius: 3px;
        }
      `}</style>
    </main>
  );
}

=====================================================
Archivo: src\app\reserva\page.tsx
=====================================================

'use client';
import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';
import { Button } from '../../components/ui/button';
import { Label } from '../../components/ui/label';
import { Input } from '../../components/ui/input';
import ServiceSelector from '../../components/ServiceSelector';
import DisponibilidadSelector from '../../components/DisponibilidadSelector';
import AppointmentForm from '../../components/AppointmentForm';

export default function ReservaPage() {
  const [paso, setPaso] = useState(1);
  const [sucursalId, setSucursalId] = useState<number | null>(null);
  const [serviciosSeleccionados, setServiciosSeleccionados] = useState<number[]>([]);
  const [fechaSeleccionada, setFechaSeleccionada] = useState<Date | null>(null);
  const [horaSeleccionada, setHoraSeleccionada] = useState<string | null>(null);
  const [barberoSeleccionado, setBarberoSeleccionado] = useState<number | null>(null);
  const [sucursales, setSucursales] = useState<Array<{ id: number; nombre: string; direccion?: string }>>([]);
  const [clienteInfo, setClienteInfo] = useState({
    nombre: '',
    apellido: '',
    email: '',
    telefono: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [reservaCompletada, setReservaCompletada] = useState(false);
  // Estados para información adicional
  const [selectedSucursalInfo, setSelectedSucursalInfo] = useState<any>(null);
  const [selectedBarberoInfo, setSelectedBarberoInfo] = useState<any>(null);
  const [serviciosInfo, setServiciosInfo] = useState<any[]>([]);
  const [precioTotal, setPrecioTotal] = useState(0);
  const [duracionTotal, setDuracionTotal] = useState(0);

  // Cargar sucursales cuando el componente se monta
  useEffect(() => {
    const fetchSucursales = async () => {
      try {
        const response = await fetch('/api/sucursales');
        if (response.ok) {
          const data = await response.json();
          setSucursales(data);
        } else {
          setError('No se pudieron cargar las sucursales');
        }
      } catch (error) {
        console.error('Error cargando sucursales:', error);
        setError('Error al conectar con el servidor');
      }
    };

    fetchSucursales();
  }, []);

  // Cuando se selecciona una sucursal, cargar su información
  useEffect(() => {
    if (sucursalId) {
      const sucursal = sucursales.find(s => s.id === sucursalId);
      setSelectedSucursalInfo(sucursal);
    }
  }, [sucursalId, sucursales]);

  // Cuando se seleccionan servicios, cargar su información
  useEffect(() => {
    if (serviciosSeleccionados.length > 0) {
      const fetchServicios = async () => {
        try {
          const response = await fetch('/api/servicios');
          if (response.ok) {
            const allServicios = await response.json();
            const selectedServicios = allServicios.filter((s: any) => 
              serviciosSeleccionados.includes(s.id)
            );
            setServiciosInfo(selectedServicios);
            
            // Calcular precio y duración totales
            const precioTotal = selectedServicios.reduce((total: number, s: any) => total + Number(s.precio), 0);
            const duracionTotal = selectedServicios.reduce((total: number, s: any) => total + s.duracion, 0);
            setPrecioTotal(precioTotal);
            setDuracionTotal(duracionTotal);
          }
        } catch (error) {
          console.error('Error cargando servicios:', error);
        }
      };
      fetchServicios();
    }
  }, [serviciosSeleccionados]);

  // Cuando se selecciona un barbero, cargar su información
  useEffect(() => {
    if (barberoSeleccionado) {
      const fetchBarbero = async () => {
        try {
          const response = await fetch(`/api/barberos/${barberoSeleccionado}`);
          if (response.ok) {
            const barbero = await response.json();
            setSelectedBarberoInfo(barbero);
          }
        } catch (error) {
          console.error('Error cargando barbero:', error);
        }
      };
      fetchBarbero();
    }
  }, [barberoSeleccionado]);

  const handleSelectSucursal = (id: number) => {
    setSucursalId(id);
    setPaso(2);
  };

  const handleServiciosChange = (servicios: number[]) => {
    setServiciosSeleccionados(servicios);
  };

  const handleHorarioSeleccionado = (fecha: Date, hora: string, barberoId: number) => {
    setFechaSeleccionada(fecha);
    setHoraSeleccionada(hora);
    setBarberoSeleccionado(barberoId);
  };

  const handleClienteInfoChange = (field: string, value: string) => {
    setClienteInfo({
      ...clienteInfo,
      [field]: value
    });
  };

  const handleConfirmarReserva = async () => {
    if (!sucursalId || !fechaSeleccionada || !barberoSeleccionado || serviciosSeleccionados.length === 0) {
      setError('Faltan datos para completar la reserva');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      // Primero, crear o buscar el cliente
      const clienteResponse = await fetch('/api/clientes', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(clienteInfo),
      });

      if (!clienteResponse.ok) {
        throw new Error('Error al registrar los datos del cliente');
      }

      const cliente = await clienteResponse.json();

      // Luego, crear el turno
      const turnoResponse = await fetch('/api/turnos', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          clienteId: cliente.id,
          sucursalId,
          barberoId: barberoSeleccionado,
          fecha: fechaSeleccionada.toISOString(),
          serviciosIds: serviciosSeleccionados,
        }),
      });

      if (!turnoResponse.ok) {
        const errorData = await turnoResponse.json();
        throw new Error(errorData.error || 'Error al crear el turno');
      }

      setReservaCompletada(true);
      setPaso(5);
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Error al procesar la reserva');
    } finally {
      setLoading(false);
    }
  };

  // Componente para mostrar el resumen de la reserva
  const ReservaSummary = () => (
    <Card className="w-full mb-6 lg:mb-0">
      <CardHeader>
        <CardTitle>Resumen de tu reserva</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {selectedSucursalInfo && (
          <div className="space-y-1">
            <h3 className="text-sm text-gray-500">Sucursal</h3>
            <p className="font-medium">{selectedSucursalInfo.nombre}</p>
            {selectedSucursalInfo.direccion && (
              <p className="text-sm text-gray-600">{selectedSucursalInfo.direccion}</p>
            )}
          </div>
        )}

        {serviciosInfo.length > 0 && (
          <div className="space-y-2">
            <h3 className="text-sm text-gray-500">Servicios seleccionados</h3>
            <ul className="divide-y divide-gray-100">
              {serviciosInfo.map((servicio: any) => (
                <li key={servicio.id} className="py-2 flex justify-between">
                  <span>{servicio.nombre}</span>
                  <span className="font-medium">${Number(servicio.precio).toFixed(2)}</span>
                </li>
              ))}
            </ul>
            <div className="pt-2 flex justify-between font-medium">
              <span>Total:</span>
              <span>${precioTotal.toFixed(2)}</span>
            </div>
            <div className="text-sm text-gray-500 flex justify-between">
              <span>Duración:</span>
              <span>{duracionTotal} min</span>
            </div>
          </div>
        )}

        {selectedBarberoInfo && (
          <div className="space-y-1">
            <h3 className="text-sm text-gray-500">Barbero</h3>
            <div className="flex items-center space-x-3">
              {selectedBarberoInfo.foto ? (
                <img 
                  src={selectedBarberoInfo.foto} 
                  alt={selectedBarberoInfo.nombre} 
                  className="w-10 h-10 rounded-full object-cover"
                />
              ) : (
                <div className="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                  <span className="text-gray-600 font-medium">
                    {selectedBarberoInfo.nombre?.[0]}{selectedBarberoInfo.apellido?.[0]}
                  </span>
                </div>
              )}
              <div>
                <p className="font-medium">{selectedBarberoInfo.nombre} {selectedBarberoInfo.apellido}</p>
                {selectedBarberoInfo.especialidad && (
                  <p className="text-sm text-gray-600">{selectedBarberoInfo.especialidad}</p>
                )}
              </div>
            </div>
          </div>
        )}

        {fechaSeleccionada && horaSeleccionada && (
          <div className="space-y-1">
            <h3 className="text-sm text-gray-500">Fecha y hora</h3>
            <p className="font-medium">
              {fechaSeleccionada.toLocaleDateString('es-ES', { 
                weekday: 'long', 
                day: 'numeric', 
                month: 'long' 
              })}, {horaSeleccionada}
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );

  const renderPaso = () => {
    // Aquí manejamos el caso del formulario completo con mejor uso de espacio
    if (paso === 3) {
      return (
        <div className="w-full grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Columna izquierda - Resumen (solo en desktop) */}
          <div className="lg:col-span-1 hidden lg:block">
            <ReservaSummary />
          </div>
          
          {/* Columna derecha - Selector de disponibilidad */}
          <div className="lg:col-span-2">
            {/* Versión móvil del resumen */}
            <div className="lg:hidden mb-6">
              <ReservaSummary />
            </div>
            
            <DisponibilidadSelector
              sucursalId={sucursalId!}
              serviciosIds={serviciosSeleccionados}
              onHorarioSeleccionado={handleHorarioSeleccionado}
            />
            
            <div className="flex justify-between mt-4">
              <Button variant="outline" onClick={() => setPaso(2)}>
                Anterior
              </Button>
              <Button
                onClick={() => setPaso(4)}
                disabled={!fechaSeleccionada || !barberoSeleccionado}
              >
                Continuar
              </Button>
            </div>
          </div>
        </div>
      );
    }
    
    // Para los otros pasos, mantenemos el diseño original pero con la misma estructura responsive
    switch (paso) {
      case 1:
        return (
          <div className="w-full grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-3">
              <Card className="w-full">
                <CardHeader>
                  <CardTitle>Selecciona una sucursal</CardTitle>
                  <CardDescription>
                    Elige la sucursal donde quieres reservar tu turno
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {sucursales.length === 0 ? (
                      <p className="text-center col-span-full">No hay sucursales disponibles</p>
                    ) : (
                      sucursales.map((sucursal) => (
                        <Button
                          key={sucursal.id}
                          variant="outline"
                          className="h-auto py-6 flex flex-col items-start"
                          onClick={() => handleSelectSucursal(sucursal.id)}
                        >
                          <span className="text-lg font-medium">{sucursal.nombre}</span>
                          {sucursal.direccion && (
                            <span className="text-sm text-gray-500 mt-1">{sucursal.direccion}</span>
                          )}
                        </Button>
                      ))
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="w-full grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-1 hidden lg:block">
              <ReservaSummary />
            </div>
            
            <div className="lg:col-span-2">
              <div className="lg:hidden mb-6">
                <ReservaSummary />
              </div>
              
              <ServiceSelector
                sucursalId={sucursalId!}
                onServiciosChange={handleServiciosChange}
                initialServicios={serviciosSeleccionados}
              />
              
              <div className="flex justify-between mt-4">
                <Button variant="outline" onClick={() => setPaso(1)}>
                  Anterior
                </Button>
                <Button
                  onClick={() => setPaso(3)}
                  disabled={serviciosSeleccionados.length === 0}
                >
                  Continuar
                </Button>
              </div>
            </div>
          </div>
        );

      case 4:
        return (
          <div className="w-full grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-1 hidden lg:block">
              <ReservaSummary />
            </div>
            
            <div className="lg:col-span-2">
              <div className="lg:hidden mb-6">
                <ReservaSummary />
              </div>
              
              <Card className="w-full">
                <CardHeader>
                  <CardTitle>Tus datos</CardTitle>
                  <CardDescription>
                    Completa tus datos para confirmar la reserva
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="nombre">Nombre</Label>
                        <Input
                          id="nombre"
                          value={clienteInfo.nombre}
                          onChange={(e) => handleClienteInfoChange('nombre', e.target.value)}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="apellido">Apellido</Label>
                        <Input
                          id="apellido"
                          value={clienteInfo.apellido}
                          onChange={(e) => handleClienteInfoChange('apellido', e.target.value)}
                        />
                      </div>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="email">Email</Label>
                      <Input
                        id="email"
                        type="email"
                        value={clienteInfo.email}
                        onChange={(e) => handleClienteInfoChange('email', e.target.value)}
                      />
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="telefono">Teléfono</Label>
                      <Input
                        id="telefono"
                        value={clienteInfo.telefono}
                        onChange={(e) => handleClienteInfoChange('telefono', e.target.value)}
                      />
                    </div>

                    {error && (
                      <div className="bg-red-50 text-red-500 p-3 rounded-md">
                        {error}
                      </div>
                    )}

                    <div className="flex justify-between mt-6">
                      <Button variant="outline" onClick={() => setPaso(3)}>
                        Anterior
                      </Button>
                      <Button
                        onClick={handleConfirmarReserva}
                        disabled={loading || !clienteInfo.nombre || !clienteInfo.apellido || !clienteInfo.email || !clienteInfo.telefono}
                      >
                        {loading ? 'Procesando...' : 'Confirmar reserva'}
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        );

      case 5:
        return (
          <Card className="w-full max-w-3xl mx-auto">
            <CardHeader>
              <CardTitle className="text-center text-green-600">
                ¡Reserva Confirmada!
              </CardTitle>
              <CardDescription className="text-center">
                Hemos registrado tu turno exitosamente
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="bg-green-50 p-6 rounded-lg text-center">
                <p className="mb-4">
                  Te hemos enviado un email con todos los detalles de tu reserva.
                </p>
                <p className="font-medium">
                  ¡Gracias por confiar en nosotros!
                </p>
              </div>
              <div className="mt-6 text-center">
                <Button onClick={() => window.location.href = '/'}>
                  Volver al inicio
                </Button>
              </div>
            </CardContent>
          </Card>
        );

      default:
        return null;
    }
  };

  // También puedes optar por el componente AppointmentForm para una interfaz más integrada
  if (paso >= 1 && paso <= 4 && false) { // Deshabilitado por ahora, habilitar si quieres usarlo
    return (
      <div className="container py-8">
        <h1 className="text-3xl font-bold text-center mb-8">Reserva de Turno</h1>
        <AppointmentForm />
      </div>
    );
  }

  return (
    <div className="container py-8">
      <h1 className="text-3xl font-bold text-center mb-8">Reserva de Turno</h1>
      {renderPaso()}
    </div>
  );
}

=====================================================
Archivo: src\components\AdminLayout.tsx
=====================================================

'use client';

import { useState } from 'react';
import AdminSidebar from './AdminSidebar';
import MobileAdminMenu from './MobileAdminMenu';

interface AdminLayoutProps {
  children: React.ReactNode;
  title: string;
  currentPage: 'dashboard' | 'barberos' | 'servicios' | 'clientes' | 'sucursales';
  actions?: React.ReactNode;
}

export default function AdminLayout({ 
  children, 
  title, 
  currentPage,
  actions
}: AdminLayoutProps) {
  const [menuVisible, setMenuVisible] = useState(false);

  const toggleMenu = () => {
    setMenuVisible(!menuVisible);
  };

  const closeMenu = () => {
    setMenuVisible(false);
  };

  return (
    <div className="min-h-screen bg-gray-900">
      {/* Header - Fixed for all screen sizes */}
      <header className="fixed top-0 left-0 right-0 z-40 bg-gray-800 md:pl-64">
        <div className="px-4 py-3 flex items-center justify-between">
          <h1 className="text-xl font-bold text-white md:hidden">Panel Admin</h1>
          
          <div className="flex items-center gap-2">
            {/* Solo mostrar el botón hamburguesa en móvil */}
            <button 
              onClick={toggleMenu}
              className="md:hidden p-2 bg-gray-700 hover:bg-gray-600 rounded-md"
              aria-label={menuVisible ? "Cerrar menú" : "Abrir menú"}
            >
              {menuVisible ? (
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              ) : (
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                </svg>
              )}
            </button>
          </div>
        </div>
      </header>

      {/* Mobile Menu Component */}
      <MobileAdminMenu 
        currentPage={currentPage} 
        isOpen={menuVisible} 
        onClose={closeMenu} 
      />

      {/* Desktop Sidebar Component */}
      <div className="hidden md:block">
        <AdminSidebar currentPage={currentPage} />
      </div>

      {/* Main content - Con padding-top para evitar superposición */}
      <div className="md:pl-64 p-4 md:p-8" style={{ paddingTop: "4rem" }}>
        <div className="max-w-6xl mx-auto">
          {/* Encabezado con título y acciones opcionales */}
          <div className="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-6">
            <h2 className="text-xl md:text-2xl font-bold text-white">{title}</h2>
            
            {actions && (
              <div className="flex gap-2 items-center">
                {actions}
              </div>
            )}
          </div>

          {/* Contenido principal */}
          {children}
        </div>
      </div>
    </div>
  );
}

=====================================================
Archivo: src\components\AdminSidebar.tsx
=====================================================

'use client';

import { useRouter } from 'next/navigation';
import Link from 'next/link';

interface AdminSidebarProps {
  currentPage: 'dashboard' | 'barberos' | 'servicios' | 'clientes' | 'sucursales';
}

export default function AdminSidebar({ currentPage }: AdminSidebarProps) {
  const router = useRouter();

  const handleLogout = async () => {
    try {
      await fetch('/api/admin/logout', { method: 'POST' });
      router.push('/admin/login');
    } catch (error) {
      console.error('Error al cerrar sesión:', error);
    }
  };

  // Lista de items del menú
  const menuItems = [
    { name: 'Dashboard', path: '/admin/dashboard', id: 'dashboard' },
    { name: 'Barberos', path: '/admin/barberos', id: 'barberos' },
    { name: 'Servicios', path: '/admin/servicios', id: 'servicios' },
    { name: 'Clientes', path: '/admin/clientes', id: 'clientes' },
    { name: 'Sucursales', path: '/admin/sucursales', id: 'sucursales' }
  ];

  return (
    <div className="w-64 bg-gray-800 text-white flex flex-col h-screen fixed left-0 top-0">
      <div className="p-4 flex-grow">
        <h1 className="text-2xl font-bold mb-8">Panel Admin</h1>
        <nav className="space-y-2">
          {menuItems.map((item) => (
            <Link
              key={item.id}
              href={item.path}
              className={`block py-2.5 px-4 rounded transition-colors text-sm font-medium ${
                currentPage === item.id
                  ? 'bg-blue-600 text-white' 
                  : 'hover:bg-gray-700 text-gray-200'
              }`}
            >
              {item.name}
            </Link>
          ))}
        </nav>
      </div>
      <div className="w-64 bg-gray-800 text-white p-4 flex flex-col h-screen">
      <button
          onClick={handleLogout}
          className="mt-auto py-2.5 px-4 bg-red-600 hover:bg-red-700 transition text-white rounded flex items-center justify-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
          </svg>
          Cerrar Sesión
        </button>
      </div>
    </div>
  );
}

=====================================================
Archivo: src\components\AnimatedBackground.tsx
=====================================================

'use client';

import { useEffect, useRef } from 'react';

export default function AnimatedBackground() {
  const svgRef = useRef<SVGSVGElement>(null);

  useEffect(() => {
    const svg = svgRef.current;
    if (!svg) return;

    // Crear destellos aleatorios con más variedad
    const createSparkleSeries = () => {
      const sparkleGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');
      sparkleGroup.setAttribute('class', 'sparkle-group');

      // Aumentar número de destellos
      const sparkleCount = 50; // Incrementado de 20 a 50

      for (let i = 0; i < sparkleCount; i++) {
        const sparkle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        
        // Posición aleatoria
        const x = Math.random() * 1440;
        const y = Math.random() * 900;
        
        // Tamaño aleatorio (hasta 5x el tamaño original)
        const baseSize = 2;
        const randomSizeFactor = 1 + Math.random() * 4; // 1x to 5x
        const radius = baseSize * randomSizeFactor;
        
        sparkle.setAttribute('cx', x.toString());
        sparkle.setAttribute('cy', y.toString());
        sparkle.setAttribute('r', '0');
        
        // Variación de color y opacidad
        const blueShade = Math.floor(Math.random() * 100) + 130; // Variación de azul
        sparkle.setAttribute('fill', `rgba(59,${blueShade},246,0.3)`);
        
        // Animación de destello
        const animate = document.createElementNS('http://www.w3.org/2000/svg', 'animate');
        animate.setAttribute('attributeName', 'r');
        animate.setAttribute('values', `0;${radius};0`);
        animate.setAttribute('dur', `${5 + Math.random() * 7}s`);
        animate.setAttribute('repeatCount', 'indefinite');
        animate.setAttribute('begin', `${Math.random() * 5}s`);
        
        const animateOpacity = document.createElementNS('http://www.w3.org/2000/svg', 'animate');
        animateOpacity.setAttribute('attributeName', 'fill-opacity');
        animateOpacity.setAttribute('values', '0;0.5;0');
        animateOpacity.setAttribute('dur', `${5 + Math.random() * 7}s`);
        animateOpacity.setAttribute('repeatCount', 'indefinite');
        animateOpacity.setAttribute('begin', `${Math.random() * 5}s`);
        
        sparkle.appendChild(animate);
        sparkle.appendChild(animateOpacity);
        sparkleGroup.appendChild(sparkle);
      }

      svg.appendChild(sparkleGroup);
    };

    // Añadir destellos
    createSparkleSeries();

    // Limpiar al desmontar
    return () => {
      const sparkleGroup = svg.querySelector('.sparkle-group');
      if (sparkleGroup) {
        svg.removeChild(sparkleGroup);
      }
    };
  }, []);

  return (
    <svg 
      ref={svgRef}
      xmlns="http://www.w3.org/2000/svg" 
      viewBox="0 0 1440 900" 
      preserveAspectRatio="xMaxYMax slice"
      className="absolute inset-0 w-full h-full z-0"
    >
      <defs>
        {/* Sophisticated Gradient */}
        <linearGradient id="ultraGradient" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" stopColor="#0C0F1A" stopOpacity="1"/>
          <stop offset="50%" stopColor="#1A202C" stopOpacity="1"/>
          <stop offset="100%" stopColor="#111827" stopOpacity="1"/>
        </linearGradient>

        {/* Precision Mesh Filter */}
        <filter id="precisionFilter">
          <feTurbulence 
            type="fractalNoise" 
            baseFrequency="0.01" 
            numOctaves="2" 
            result="turbulence"
          />
          <feDisplacementMap 
            in2="turbulence" 
            in="SourceGraphic" 
            scale="3" 
            xChannelSelector="R" 
            yChannelSelector="G"
          />
          <feGaussianBlur stdDeviation="0.5" />
        </filter>
      </defs>

      {/* Background Layers */}
      <rect width="100%" height="100%" fill="url(#ultraGradient)"/>

      {/* Animated Precision Circles */}
      {[0, 1, 2].map((index) => (
        <circle 
          key={`animated-circle-${index}`}
          className="animated-circle"
          cx="50%" 
          cy="50%" 
          r={`${150 + index * 50}`}
          fill="transparent" 
          stroke="rgba(59,130,246,0.05)" 
          strokeWidth="20"
        />
      ))}

      {/* Subtle Directional Lines */}
      <g opacity="0.1" stroke="rgba(255,255,255,0.05)">
        <path 
          d="M-100 0 L1540 900 
             M-100 100 L1540 1000 
             M-100 200 L1540 1100" 
          strokeWidth="2"
        />
        <path 
          d="M1540 0 L-100 900 
             M1540 100 L-100 1000 
             M1540 200 L-100 1100" 
          strokeWidth="2"
        />
      </g>
    </svg>
  );
}

=====================================================
Archivo: src\components\AppointmentForm.tsx
=====================================================

'use client';
import { useQuery } from '@tanstack/react-query';
import React, { useState, useEffect } from "react";
import { parseISO } from 'date-fns';
import { es } from 'date-fns/locale';
import { format, addDays, isSameDay } from 'date-fns';

interface Sucursal {
  id: number;
  nombre: string;
  direccion: string;
  horarioInicio: string;
  horarioFin: string;
  diasAtencion: string[];
}

interface Barbero {
  id: number;
  nombre: string;
  apellido: string;
  foto?: string;
  especialidad?: string;
  experiencia?: number;
  calificacion?: number;
  sucursales: { sucursalId: number }[];
}

interface Servicio {
  id: number;
  nombre: string;
  descripcion?: string;
  duracion: number;
  precio: number;
  imagen?: string;
  categoria?: string;
}

interface TimeSlot {
  inicio: Date;
  fin: Date;
  disponible: boolean;
}

// Añadimos props para permitir preselección
interface AppointmentFormProps {
  preselectedService?: number | null;
  preselectedBarber?: number | null;
  onComplete?: () => void;
}

export default function AppointmentForm({ 
  preselectedService = null,
  preselectedBarber = null,
  onComplete 
}: AppointmentFormProps) {
  // Estados para tracking del proceso
  const [step, setStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [loadingComponent, setLoadingComponent] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [reservaCompletada, setReservaCompletada] = useState(false);

  // Estados de datos
  const [sucursales, setSucursales] = useState<Sucursal[]>([]);
  const [barberos, setBarberos] = useState<Barbero[]>([]);
  const [servicios, setServicios] = useState<Servicio[]>([]);
  const [serviciosPorCategoria, setServiciosPorCategoria] = useState<Record<string, Servicio[]>>({});
  const [barberosFiltrados, setBarberosFiltrados] = useState<Barbero[]>([]);
  const [timeSlots, setTimeSlots] = useState<TimeSlot[]>([]);
  const [diasDisponibles, setDiasDisponibles] = useState<Date[]>([]);

  // Estados de selección
  const [selectedSucursal, setSelectedSucursal] = useState<string>("");
  const [selectedBarbero, setSelectedBarbero] = useState<string>("");
  const [selectedServicios, setSelectedServicios] = useState<string[]>([]);
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [selectedTime, setSelectedTime] = useState<Date | null>(null);
  const [duracionTotal, setDuracionTotal] = useState<number>(0);
  const [precioTotal, setPrecioTotal] = useState<number>(0);

  // Estado de datos del cliente
  const [clienteData, setClienteData] = useState({
    nombre: "",
    apellido: "",
    email: "",
    telefono: "",
  });

  // Configuración de pasos
  const steps = [
    { id: 1, name: 'Sucursal', description: 'Elige dónde quieres reservar' },
    { id: 2, name: 'Servicios', description: 'Selecciona los servicios que necesitas' },
    { id: 3, name: 'Barbero', description: 'Elige quién te atenderá' },
    { id: 4, name: 'Fecha y Hora', description: 'Selecciona cuándo quieres tu cita' },
    { id: 5, name: 'Tus Datos', description: 'Completa tus datos personales' },
  ];

  // Cargar datos iniciales: sucursales, barberos y servicios
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoadingComponent(true);
        
        const [sucursalesRes, barberosRes, serviciosRes] = await Promise.all([
          fetch("/api/sucursales"),
          fetch("/api/barberos?incluirSucursales=true"),
          fetch("/api/servicios"),
        ]);

        const sucursalesData = await sucursalesRes.json();
        const barberosData = await barberosRes.json();
        const serviciosData = await serviciosRes.json();

        setSucursales(sucursalesData);
        setBarberos(barberosData);
        
        // Añadir categorías a los servicios si no existen
        const serviciosConCategorias = serviciosData.map((servicio: Servicio) => ({
          ...servicio,
          categoria: servicio.categoria || categorizarServicio(servicio.nombre)
        }));
        
        setServicios(serviciosConCategorias);
        
        // Agrupar servicios por categoría
        const agrupados = serviciosConCategorias.reduce((acc: Record<string, Servicio[]>, servicio: Servicio) => {
          const categoria = servicio.categoria || 'Otros';
          if (!acc[categoria]) {
            acc[categoria] = [];
          }
          acc[categoria].push(servicio);
          return acc;
        }, {});
        
        setServiciosPorCategoria(agrupados);
        
        // Generar días disponibles para los próximos 30 días
        const dias = [];
        for (let i = 0; i < 30; i++) {
          dias.push(addDays(new Date(), i));
        }
        setDiasDisponibles(dias);
        
        // Si tenemos servicio o barbero preseleccionado, lo configuramos
        if (preselectedService) {
          const servicioId = preselectedService.toString();
          setSelectedServicios([servicioId]);
          // Si tenemos un servicio preseleccionado, vamos directamente al paso 2
          setStep(2);
        }
        
        if (preselectedBarber) {
          const barberoId = preselectedBarber.toString();
          setSelectedBarbero(barberoId);
          
          // Encontrar sucursales donde trabaja este barbero
          const barbero = barberosData.find((b: Barbero) => b.id === preselectedBarber);
          if (barbero && barbero.sucursales && barbero.sucursales.length > 0) {
            // Si solo tiene una sucursal, la seleccionamos automáticamente
            if (barbero.sucursales.length === 1) {
              setSelectedSucursal(barbero.sucursales[0].sucursalId.toString());
              // Si tenemos barbero y sucursal, vamos al paso 2 para elegir servicios
              setStep(2);
            }
          }
        }
        
      } catch (error) {
        console.error("Error cargando datos iniciales:", error);
        setError("No pudimos cargar los datos. Por favor, intenta nuevamente.");
      } finally {
        setLoadingComponent(false);
      }
    };

    fetchData();
  }, [preselectedService, preselectedBarber]);

  // Filtrar barberos por sucursal seleccionada
  useEffect(() => {
    if (selectedSucursal) {
      const sucursalId = parseInt(selectedSucursal);
      
      const filtrados = barberos.filter((barbero) => {
        if (!barbero.sucursales) return false;
        return barbero.sucursales.some((s) => s.sucursalId === sucursalId);
      });

      setBarberosFiltrados(filtrados);

      // Si el barbero seleccionado ya no está disponible, resetear
      if (
        selectedBarbero &&
        !filtrados.some((b) => b.id.toString() === selectedBarbero)
      ) {
        setSelectedBarbero("");
      }
    } else {
      setBarberosFiltrados([]);
      setSelectedBarbero("");
    }
  }, [selectedSucursal, barberos, selectedBarbero]);

  // Calcular duración y precio total al seleccionar servicios
  useEffect(() => {
    if (selectedServicios.length > 0) {
      let duracion = 0;
      let precio = 0;

      selectedServicios.forEach((servicioId) => {
        const servicio = servicios.find((s) => s.id.toString() === servicioId);
        if (servicio) {
          duracion += Number(servicio.duracion);
          precio += Number(servicio.precio);
        }
      });

      setDuracionTotal(duracion);
      setPrecioTotal(precio);
    } else {
      setDuracionTotal(0);
      setPrecioTotal(0);
    }
  }, [selectedServicios, servicios]);

  // Obtener horarios disponibles cuando se han seleccionado fecha, sucursal, servicios y barbero
  useEffect(() => {
    if (selectedDate && selectedSucursal && selectedServicios.length > 0 && selectedBarbero) {
      const fetchTimeSlots = async () => {
        try {
          setLoading(true);
          setTimeSlots([]);
          
          const sucursalId = parseInt(selectedSucursal);
          const barberoId = parseInt(selectedBarbero);
          const serviciosIds = selectedServicios.map((id) => parseInt(id));
          
          console.log("Solicitando disponibilidad para:", {
            fecha: selectedDate.toISOString(),
            sucursalId,
            barberoId,
            servicios: serviciosIds,
            duracion: duracionTotal
          });

          // Construir URL con todos los parámetros necesarios
          const url = `/api/disponibilidad?fecha=${selectedDate.toISOString()}&sucursalId=${sucursalId}&barberoId=${barberoId}&servicios=${serviciosIds.join(",")}&duracion=${duracionTotal}`;
          
          const response = await fetch(url);

          if (!response.ok) {
            // Intentar obtener mensaje de error del servidor
            try {
              const errorData = await response.json();
              console.error("Error de disponibilidad:", errorData);
              setError(errorData.error || "Error al obtener horarios disponibles");
            } catch (jsonError) {
              setError(`Error HTTP: ${response.status} - ${response.statusText}`);
            }
            setTimeSlots([]);
            return;
          }

          const data = await response.json();
          console.log("Horarios disponibles recibidos:", data);
          
          // Mapear los slots recibidos
          const slots = data.map((slot) => ({
            ...slot,
            inicio: new Date(slot.inicio),
            fin: new Date(slot.fin)
          }));
          
          setTimeSlots(slots);
          
          // Limpiar la selección de hora si la selección anterior ya no está disponible
          if (selectedTime) {
            const slotSeleccionado = slots.find(
              slot => slot.disponible && 
                     slot.inicio.getTime() === selectedTime.getTime()
            );
            
            if (!slotSeleccionado) {
              console.log("Reseteando selección de hora porque ya no está disponible");
              setSelectedTime(null);
            }
          }
          
          setError(null);
        } catch (error) {
          console.error("Error obteniendo horarios:", error);
          setError("No pudimos obtener los horarios disponibles.");
          setTimeSlots([]);
        } finally {
          setLoading(false);
        }
      };

      fetchTimeSlots();
    } else {
      setTimeSlots([]);
    }
  }, [selectedDate, selectedSucursal, selectedServicios, selectedBarbero, duracionTotal, selectedTime]);

  // Manejadores de eventos
  const handleServicioToggle = (servicioId: string) => {
    setSelectedServicios((prevSelected) => {
      if (prevSelected.includes(servicioId)) {
        return prevSelected.filter((id) => id !== servicioId);
      } else {
        return [...prevSelected, servicioId];
      }
    });
  };

  // Dentro de AppointmentForm.tsx
// Este código debe reemplazar la sección del handleSubmit en tu componente

const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();

  if (
    !selectedDate ||
    !selectedTime ||
    !selectedBarbero ||
    selectedServicios.length === 0 ||
    !selectedSucursal
  ) {
    setError("Por favor completa todos los campos requeridos");
    return;
  }

  setLoading(true);
  setError(null);
  
  try {
    // Verificar disponibilidad actual antes de proceder
    console.log("Verificando disponibilidad actual...");
    const verifyUrl = `/api/disponibilidad?fecha=${selectedDate.toISOString()}&sucursalId=${selectedSucursal}&barberoId=${selectedBarbero}&servicios=${selectedServicios.join(",")}&duracion=${duracionTotal}`;
    
    const verifyResponse = await fetch(verifyUrl);
    if (!verifyResponse.ok) {
      throw new Error("Error al verificar disponibilidad");
    }
    
    const slots = await verifyResponse.json();
    console.log("Slots verificados:", slots);
    
    // Convertir el tiempo seleccionado a un formato comparable
    const selectedTimeISOString = selectedTime.toISOString();
    
    // Verificar si hay un slot disponible que coincida con el horario seleccionado
    let slotDisponible = false;
    
    for (const slot of slots) {
      // Comparar directamente los objetos Date convertidos a ISO string
      // para evitar problemas con zonas horarias
      if (new Date(slot.inicio).toISOString() === selectedTimeISOString && slot.disponible) {
        slotDisponible = true;
        console.log("¡Slot disponible encontrado!");
        break;
      }
    }
    
    if (!slotDisponible) {
      throw new Error("El horario seleccionado ya no está disponible. Por favor, selecciona otro horario.");
    }
    
    // Crear un objeto Date en UTC con la fecha y hora seleccionadas
    // para asegurar consistencia en la zona horaria
    const utcDateTime = new Date(Date.UTC(
      selectedDate.getUTCFullYear(),
      selectedDate.getUTCMonth(),
      selectedDate.getUTCDate(),
      selectedTime.getUTCHours(),
      selectedTime.getUTCMinutes(),
      0,
      0
    ));

    // Preparar datos para enviar
    const dataToSend = {
      fecha: utcDateTime.toISOString(), // Usar la fecha UTC convertida correctamente
      barberoId: parseInt(selectedBarbero),
      serviciosIds: selectedServicios.map((id) => parseInt(id)),
      sucursalId: parseInt(selectedSucursal),
      duracion: duracionTotal,
      clienteData,
      estado: "PENDIENTE",
    };

    console.log("Datos a enviar:", dataToSend);

    const response = await fetch("/api/turnos", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(dataToSend),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || "Error al crear el turno");
    }

    const result = await response.json();
    console.log("Respuesta:", result);

    setReservaCompletada(true);
    
    // Si existe onComplete callback, lo ejecutamos
    if (onComplete) {
      setTimeout(onComplete, 3000); // Esperamos 3 segundos para que el usuario vea el mensaje de éxito
    }
  } catch (error: any) {
    console.error("Error:", error);
    setError(error.message || "Error al procesar la solicitud");
  } finally {
    setLoading(false);
  }
};

  const handleNext = () => {
    // Validar que se pueda avanzar al siguiente paso
    if (step === 1 && !selectedSucursal) {
      setError("Por favor selecciona una sucursal para continuar");
      return;
    }
    
    if (step === 2 && selectedServicios.length === 0) {
      setError("Por favor selecciona al menos un servicio para continuar");
      return;
    }
    
    if (step === 3 && !selectedBarbero) {
      setError("Por favor selecciona un barbero para continuar");
      return;
    }
    
    if (step === 4 && (!selectedDate || !selectedTime)) {
      setError("Por favor selecciona fecha y hora para continuar");
      return;
    }
    
    // Si pasa la validación, avanzar al siguiente paso
    setError(null);
    setStep((prevStep) => Math.min(prevStep + 1, steps.length));
  };

  const handleBack = () => {
    setStep((prevStep) => Math.max(prevStep - 1, 1));
    setError(null);
  };

  const resetForm = () => {
    setSelectedDate(null);
    setSelectedTime(null);
    setSelectedBarbero("");
    setSelectedServicios([]);
    setSelectedSucursal("");
    setClienteData({
      nombre: "",
      apellido: "",
      email: "",
      telefono: "",
    });
    setStep(1);
    setReservaCompletada(false);
  };

  // Función auxiliar para categorizar servicios por nombre
  const categorizarServicio = (nombre: string): string => {
    nombre = nombre.toLowerCase();
    if (nombre.includes('corte')) return 'Cortes';
    if (nombre.includes('barba') || nombre.includes('afeitado')) return 'Barba';
    if (nombre.includes('color') || nombre.includes('tinte')) return 'Color';
    if (nombre.includes('tratamiento') || nombre.includes('mascarilla')) return 'Tratamientos';
    return 'Otros';
  };

  // Función para renderizar las estrellas según la calificación
  const renderEstrellas = (calificacion: number = 0) => {
    const estrellas = [];
    const fullStars = Math.floor(calificacion);
    const hasHalfStar = calificacion % 1 >= 0.5;
    
    for (let i = 0; i < fullStars; i++) {
      estrellas.push(
        <svg key={`full-${i}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-4 h-4 text-yellow-400">
          <path fillRule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clipRule="evenodd" />
        </svg>
      );
    }
    
    if (hasHalfStar) {
      estrellas.push(
        <svg key="half" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" className="w-4 h-4 text-yellow-400">
          <path fillRule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clipRule="evenodd" fill="url(#half-star)" />
          <defs>
            <linearGradient id="half-star" x1="0" x2="1" y1="0" y2="0">
              <stop offset="50%" stopColor="#FACC15" />
              <stop offset="50%" stopColor="#374151" />
            </linearGradient>
          </defs>
        </svg>
      );
    }
    
    // Añadir estrellas vacías
    const emptyStars = 5 - estrellas.length;
    for (let i = 0; i < emptyStars; i++) {
      estrellas.push(
        <svg key={`empty-${i}`} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4 text-gray-500">
          <path strokeLinecap="round" strokeLinejoin="round" d="M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.84.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 20.54a.562.562 0 01-.84-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z" />
        </svg>
      );
    }
    
    return (
      <div className="flex items-center">
        <div className="flex">{estrellas}</div>
        <span className="ml-1 text-gray-400 text-xs">({calificacion.toFixed(1)})</span>
      </div>
    );
  };

  // Componentes para cada paso del proceso
  const renderStepIndicator = () => {
    return (
      <div className="mb-8">
        <div className="flex items-center justify-between">
          {steps.map((s, i) => (
            <div key={s.id} className="flex flex-col items-center">
              <div
                className={`flex items-center justify-center w-8 h-8 rounded-full border-2 text-sm font-medium
                  ${step > s.id 
                    ? 'bg-blue-600 border-blue-600 text-white' 
                    : step === s.id
                      ? 'border-blue-600 text-blue-600' 
                      : 'border-gray-600 text-gray-500'}
                `}
              >
                {step > s.id ? (
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                ) : (
                  s.id
                )}
              </div>
              <span className={`mt-2 text-xs font-medium ${step === s.id ? 'text-blue-600' : 'text-gray-500'}`}>
                {s.name}
              </span>
            </div>
          ))}
        </div>
        
        <div className="relative mt-2">
          <div className="absolute top-0 left-0 right-0 h-0.5 bg-gray-700"></div>
          <div 
            className="absolute top-0 left-0 h-0.5 bg-blue-600 transition-all duration-500 ease-in-out" 
            style={{ width: `${((step - 1) / (steps.length - 1)) * 100}%` }}
          ></div>
        </div>
        
        <h2 className="text-xl font-bold text-white mt-6">{steps[step-1].name}</h2>
        <p className="text-gray-400 text-sm">{steps[step-1].description}</p>
      </div>
    );
  };

  const renderReservaSummary = () => {
    if (!selectedSucursal && !selectedServicios.length && !selectedBarbero && !selectedDate) {
      return null;
    }
    
    return (
      <div className="bg-gray-800 rounded-lg p-4 mb-6 shadow-inner">
        <h3 className="text-sm font-medium text-gray-300 mb-3 border-b border-gray-700 pb-2">Resumen de tu reserva</h3>
        
        <div className="space-y-2 text-sm">
          {selectedSucursal && (
            <div className="flex items-start">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-blue-400 mr-2 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              <div>
                <span className="text-gray-400">Sucursal:</span>
                <span className="ml-1 text-white">
                  {sucursales.find(s => s.id.toString() === selectedSucursal)?.nombre}
                </span>
              </div>
            </div>
          )}
          
          {selectedServicios.length > 0 && (
            <div className="flex items-start">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-blue-400 mr-2 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
              </svg>
              <div>
                <span className="text-gray-400">Servicios:</span>
                <span className="ml-1 text-white">
                  {selectedServicios.map(id => 
                    servicios.find(s => s.id.toString() === id)?.nombre
                  ).join(", ")}
                </span>
                <div className="mt-1">
                  <span className="text-gray-400">Duración:</span>
                  <span className="ml-1 text-white">{duracionTotal} min</span>
                  <span className="mx-2 text-gray-600">•</span>
                  <span className="text-gray-400">Precio:</span>
                  <span className="ml-1 text-green-400">${precioTotal.toFixed(2)}</span>
                </div>
              </div>
            </div>
          )}
          
          {selectedBarbero && (
            <div className="flex items-start">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-blue-400 mr-2 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              <div>
                <span className="text-gray-400">Barbero:</span>
                <span className="ml-1 text-white">
                  {barberos.find(b => b.id.toString() === selectedBarbero)?.nombre} {barberos.find(b => b.id.toString() === selectedBarbero)?.apellido}
                </span>
              </div>
            </div>
          )}
          
          {selectedDate && selectedTime && (
            <div className="flex items-start">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-blue-400 mr-2 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <div>
                <span className="text-gray-400">Fecha y hora:</span>
                <span className="ml-1 text-white">
                  {format(selectedDate, 'EEEE d MMMM', { locale: es })} a las {format(selectedTime, 'HH:mm')}
                </span>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };

  const renderSucursalSelector = () => {
    const formatTime = (dateTimeString: string) => {
      try {
        const date = new Date(dateTimeString);
        return date.toLocaleTimeString('es-CL', { 
          hour: '2-digit', 
          minute: '2-digit',
          hour12: false 
        }).padStart(5, '0');
      } catch (error) {
        console.error('Error formatting time:', error);
        return dateTimeString; // Fallback to original string if parsing fails
      }
    };
  
    const formatDays = (diasAtencion: any) => {
      // Verifica si diasAtencion existe y no está vacío
      if (!diasAtencion || (Array.isArray(diasAtencion) && diasAtencion.length === 0)) {
        return 'No hay información de días';
      }
      
      // Handle different possible input formats
      if (Array.isArray(diasAtencion)) {
        // If it's an array of objects with 'nombre' property
        if (diasAtencion[0] && typeof diasAtencion[0] === 'object' && 'nombre' in diasAtencion[0]) {
          return diasAtencion.map(dia => dia.nombre).join(', ');
        }
        // If it's an array of strings
        return diasAtencion.join(', ');
      }
      
      // If it's a comma-separated string
      if (typeof diasAtencion === 'string') {
        return diasAtencion.split(',')
          .map(dia => dia.trim())
          .join(', ');
      }
      
      // Si llegamos aquí, puede ser un tipo de dato no esperado
      return String(diasAtencion);
    };
  
    return (
      <div className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {sucursales.map((sucursal) => (
            <div 
              key={sucursal.id} 
              className={`
                relative p-5 rounded-lg cursor-pointer transition-all duration-300
                border border-gray-700 
                ${selectedSucursal === sucursal.id.toString() 
                  ? 'bg-gradient-to-br from-blue-900 to-blue-800 shadow-lg shadow-blue-900/20 border-blue-600 scale-105' 
                  : 'bg-gradient-to-br from-gray-800 to-gray-900 hover:from-gray-750 hover:to-gray-850 hover:border-gray-600'}
              `}
              onClick={() => setSelectedSucursal(sucursal.id.toString())}
            >
              {/* Selected indicator */}
              {selectedSucursal === sucursal.id.toString() && (
                <div className="absolute top-2 right-2 bg-blue-500 rounded-full p-1">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-white" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                </div>
              )}
  
              <div className="space-y-2">
                <h3 className="text-lg font-bold text-white mb-2">{sucursal.nombre}</h3>
                
                <div className="flex items-start text-gray-300 space-x-2 mb-2">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-400 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1 1 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  <span className="text-sm">{sucursal.direccion}</span>
                </div>
                
                <div className="flex items-center text-gray-300 space-x-2 mb-2">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-400 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span className="text-sm">
                    {formatTime(sucursal.horarioInicio)} - {formatTime(sucursal.horarioFin)}
                  </span>
                </div>
                
                <div className="flex items-center text-gray-300 space-x-2">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-400 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <span className="text-sm">
                    {formatDays(sucursal.diasAtencion)}
                  </span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };
  const renderServiciosSelector = () => {
    return (
      <div className="space-y-6">
        {/* Selector por categorías */}
        {Object.entries(serviciosPorCategoria).map(([categoria, serviciosList]) => (
          <div key={categoria} className="space-y-3">
            <h3 className="text-lg font-medium text-white border-b border-gray-700 pb-2">
              {categoria}
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {serviciosList.map((servicio) => (
                <div 
                  key={servicio.id}
                  onClick={() => handleServicioToggle(servicio.id.toString())}
                  className={`
                    relative rounded-xl overflow-hidden cursor-pointer transition-all duration-300
                    ${selectedServicios.includes(servicio.id.toString()) 
                      ? 'bg-gradient-to-br from-blue-900 to-blue-800 shadow-lg shadow-blue-500/20 border border-blue-500 transform scale-105' 
                      : 'bg-gradient-to-br from-gray-800 to-gray-900 hover:from-gray-750 hover:to-gray-850 border border-gray-700 hover:border-gray-600'}
                  `}
                >
                  <div className="p-6">
                    <div className="flex-1">
                      <h3 className="text-lg font-bold text-white mb-1">
                        {servicio.nombre}
                      </h3>
                      <p className="text-sm text-gray-300 mb-3">
                        {servicio.descripcion || 'Servicio profesional de barbería'}
                      </p>
                      <div className="flex items-center space-x-3 text-sm">
                        <div className="flex items-center text-blue-300">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                          {servicio.duracion} min
                        </div>
                        <div className="text-green-300 font-medium">
                          ${servicio.precio}
                        </div>
                      </div>
                    </div>
                    <div className="absolute top-4 right-4">
                      {selectedServicios.includes(servicio.id.toString()) ? (
                        <div className="h-6 w-6 bg-blue-500 rounded-full flex items-center justify-center">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-white" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                          </svg>
                        </div>
                      ) : (
                        <div className="h-6 w-6 border-2 border-gray-500 rounded-full"></div>
                      )}
                    </div>
                  </div>
                  
                  {/* Indicador de seleccionado */}
                  {selectedServicios.includes(servicio.id.toString()) && (
                    <div className="absolute top-0 left-0 w-0 h-0 border-t-[20px] border-l-[20px] border-t-blue-600 border-l-transparent z-10"></div>
                  )}
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    );
  };

  const renderBarberoSelector = () => {
    return (
      <div className="space-y-4">
        {barberosFiltrados.length === 0 ? (
          <div className="bg-gray-800 p-4 rounded text-center">
            <p className="text-gray-400">No hay barberos disponibles para la sucursal seleccionada</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {barberosFiltrados.map((barbero) => (
              <div 
                key={barbero.id} 
                className={`
                  bg-gradient-to-br rounded-lg overflow-hidden cursor-pointer transition-all duration-300
                  ${selectedBarbero === barbero.id.toString() 
                    ? 'from-blue-900 to-blue-800 shadow-lg shadow-blue-500/20 border border-blue-500 transform scale-105' 
                    : 'from-gray-800 to-gray-900 hover:from-gray-750 hover:to-gray-850 border border-gray-700 hover:border-gray-600'}
                `}
                onClick={() => setSelectedBarbero(barbero.id.toString())}
              >
                {/* Sección superior con foto/avatar */}
                <div className="h-32 bg-gray-700 relative">
                  {barbero.foto ? (
                    <img 
                      src={barbero.foto} 
                      alt={`${barbero.nombre} ${barbero.apellido}`} 
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-600/20 to-purple-600/20">
                      <div className="w-16 h-16 rounded-full bg-gray-800 border-4 border-white/20 flex items-center justify-center text-white text-2xl font-bold">
                        {barbero.nombre[0]}{barbero.apellido[0]}
                      </div>
                    </div>
                  )}
                  {/* Gradiente oscuro superpuesto */}
                  <div className="absolute inset-0 bg-gradient-to-t from-gray-900 to-transparent"></div>
                  
                  {/* Verificación si es seleccionado */}
                  {selectedBarbero === barbero.id.toString() && (
                    <div className="absolute top-2 right-2 bg-blue-500 rounded-full p-1 z-10">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-white" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                      </svg>
                    </div>
                  )}
                </div>
                
                <div className="p-4">
                  <h3 className="text-lg font-bold text-white">{barbero.nombre} {barbero.apellido}</h3>
                  
                  {/* Especialidad y calificación */}
                  <div className="flex flex-col mt-1 mb-2">
                    {barbero.especialidad && (
                      <span className="text-sm text-gray-400 mb-1">{barbero.especialidad}</span>
                    )}
                    {barbero.calificacion && renderEstrellas(barbero.calificacion)}
                  </div>
                  
                  {/* Experiencia */}
                  {barbero.experiencia && (
                    <div className="text-xs text-gray-400 mt-2">
                      <span className="text-blue-400">{barbero.experiencia}</span> años de experiencia
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    );
  };

  const renderDateTimeSelector = () => {
    // Agrupar por semanas para mejor visualización
    const weeks: Date[][] = [];
    let currentWeek: Date[] = [];
    
    diasDisponibles.forEach((day, index) => {
      if (index % 7 === 0 && currentWeek.length > 0) {
        weeks.push(currentWeek);
        currentWeek = [];
      }
      currentWeek.push(day);
    });
    
    if (currentWeek.length > 0) {
      weeks.push(currentWeek);
    }
    
    return (
      <div className="space-y-8">
        {/* Selector de días */}
        <div className="space-y-3">
          <h3 className="text-lg font-medium text-white">Selecciona una fecha</h3>
          
          {weeks.map((week, weekIndex) => (
            <div key={weekIndex} className="grid grid-cols-7 gap-2">
              {week.map((day) => {
                const isSelected = selectedDate && isSameDay(selectedDate, day);
                const dayStr = format(day, 'd');
                const isToday = isSameDay(day, new Date());
                
                return (
                  <button
                    key={day.toISOString()}
                    type="button"
                    onClick={() => {
                      setSelectedDate(day);
                      setSelectedTime(null); // Reset time selection when date changes
                    }}
                    className={`
                      py-2 rounded-md text-center transition-colors relative
                      ${isSelected 
                        ? 'bg-blue-600 text-white transform scale-110' 
                        : isToday
                          ? 'bg-gray-700 text-white hover:bg-gray-600'
                          : 'bg-gray-800 text-gray-300 hover:bg-gray-700'}
                    `}
                  >
                    <div className="text-xs mb-1 text-gray-400">
                      {format(day, 'EEE', { locale: es })}
                    </div>
                    <div className={isSelected ? 'font-bold' : ''}>
                      {dayStr}
                    </div>
                    {isToday && (
                      <div className="absolute bottom-1 left-0 right-0 flex justify-center">
                        <div className="w-1 h-1 bg-blue-400 rounded-full"></div>
                      </div>
                    )}
                  </button>
                );
              })}
            </div>
          ))}
        </div>
        
        {/* Selector de horas con marcador de disponibilidad claro */}
        {selectedDate && (
          <div className="space-y-3">
            <h3 className="text-lg font-medium text-white">
              Horarios disponibles para el {format(selectedDate, 'EEEE d MMMM', { locale: es })}
            </h3>
            
            {loading ? (
              <div className="bg-gray-800 rounded-lg p-8 text-center">
                <div className="inline-block animate-spin w-8 h-8 border-2 border-gray-600 border-t-blue-600 rounded-full mb-2"></div>
                <p className="text-gray-400">Cargando horarios disponibles...</p>
              </div>
            ) : timeSlots.length === 0 ? (
              <div className="bg-gray-800 rounded-lg p-8 text-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 text-gray-500 mx-auto mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <p className="text-gray-400 mb-1">No hay horarios disponibles para esta fecha</p>
                <p className="text-gray-500 text-sm">Prueba seleccionando otra fecha</p>
              </div>
            ) : (
              <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 gap-3">
                {timeSlots.map((slot, index) => {
                  const isSelected = selectedTime && 
                    selectedTime.getTime() === slot.inicio.getTime();
                  const isDisponible = slot.disponible;
                  
                  return (
                    <button
                      key={index}
                      type="button"
                      onClick={() => isDisponible ? setSelectedTime(slot.inicio) : null}
                      disabled={!isDisponible}
                      aria-disabled={!isDisponible}
                      className={`
                        py-3 text-center rounded-md transition-all relative
                        ${isSelected
                          ? 'bg-blue-600 text-white font-medium shadow-lg shadow-blue-900/20 ring-2 ring-blue-400 transform scale-110'
                          : isDisponible
                            ? 'bg-gray-800 text-white hover:bg-gray-700'
                            : 'bg-gray-900/50 text-gray-500 cursor-not-allowed relative'}
                        ${isDisponible ? '' : 'overflow-hidden'}
                      `}
                    >
                      {/* Hora */}
                      {`${slot.inicio.getHours().toString().padStart(2, '0')}:${slot.inicio.getMinutes().toString().padStart(2, '0')}`}
                      
                      {/* Indicador visual de no disponible */}
                      {!isDisponible && (
                        <>
                          <div className="absolute inset-0 bg-red-900/10"></div>
                          <div className="absolute bottom-0 left-0 right-0 bg-red-500/60 text-white text-xs py-0.5">
                            No disponible
                          </div>
                          <div className="absolute inset-0 border border-red-500/30 rounded-md pointer-events-none"></div>
                        </>
                      )}
                    </button>
                  );
                })}
              </div>
            )}
            
            {/* Leyenda */}
            <div className="flex items-center space-x-4 mt-4 text-xs text-gray-400">
              <div className="flex items-center">
                <div className="w-3 h-3 bg-gray-800 mr-1.5 rounded"></div>
                <span>Disponible</span>
              </div>
              <div className="flex items-center">
                <div className="w-3 h-3 bg-blue-600 mr-1.5 rounded"></div>
                <span>Seleccionado</span>
              </div>
              <div className="flex items-center">
                <div className="w-3 h-3 bg-gray-900/50 border border-red-500/30 mr-1.5 rounded"></div>
                <span>No disponible</span>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  const renderClientForm = () => {
    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-200">Nombre</label>
            <input
              type="text"
              value={clienteData.nombre}
              onChange={(e) => setClienteData({ ...clienteData, nombre: e.target.value })}
              className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
              placeholder="Tu nombre"
            />
          </div>
          
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-200">Apellido</label>
            <input
              type="text"
              value={clienteData.apellido}
              onChange={(e) => setClienteData({ ...clienteData, apellido: e.target.value })}
              className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
              placeholder="Tu apellido"
            />
          </div>
        </div>
        
        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-200">Correo electrónico</label>
          <input
            type="email"
            value={clienteData.email}
            onChange={(e) => setClienteData({ ...clienteData, email: e.target.value })}
            className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            required
            placeholder="email@ejemplo.com"
          />
          <p className="text-xs text-gray-400 mt-1">Te enviaremos una confirmación a este correo</p>
        </div>
        
        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-200">Teléfono</label>
          <input
            type="tel"
            value={clienteData.telefono}
            onChange={(e) => setClienteData({ ...clienteData, telefono: e.target.value })}
            className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            required
            placeholder="Tu número de teléfono"
          />
          <p className="text-xs text-gray-400 mt-1">Nos comunicaremos contigo si hay cambios en tu cita</p>
        </div>
      </div>
    );
  };

  const renderCompletedReservation = () => {
    return (
      <div className="text-center py-8 px-4">
        <div className="w-20 h-20 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-6 animate-bounce">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
          </svg>
        </div>
        
        <h2 className="text-2xl font-bold text-white mb-3">¡Reserva confirmada!</h2>
        <p className="text-gray-300 mb-8">
          Hemos enviado los detalles de tu reserva a {clienteData.email}
        </p>
        
        <div className="bg-gray-800 rounded-lg p-6 mb-8 mx-auto max-w-md text-left">
          <h3 className="text-lg font-medium text-white mb-4 border-b border-gray-700 pb-2">Detalles de tu reserva</h3>
          
          <div className="space-y-3">
            <div className="flex">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-400 mr-3 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <div>
                <span className="text-gray-400">Fecha y hora:</span>
                <p className="text-white">
                  {selectedDate && selectedTime && format(selectedDate, 'EEEE d MMMM', { locale: es })} a las {selectedTime && format(selectedTime, 'HH:mm')}
                </p>
              </div>
            </div>
            
            <div className="flex">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-400 mr-3 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              <div>
                <span className="text-gray-400">Barbero:</span>
                <p className="text-white">
                  {barberos.find(b => b.id.toString() === selectedBarbero)?.nombre} {barberos.find(b => b.id.toString() === selectedBarbero)?.apellido}
                </p>
              </div>
            </div>
            
            <div className="flex">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-400 mr-3 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              <div>
                <span className="text-gray-400">Sucursal:</span>
                <p className="text-white">
                  {sucursales.find(s => s.id.toString() === selectedSucursal)?.nombre}
                </p>
                <p className="text-gray-400 text-sm">
                  {sucursales.find(s => s.id.toString() === selectedSucursal)?.direccion}
                </p>
              </div>
            </div>
            
            <div className="flex">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-400 mr-3 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
              </svg>
              <div>
                <span className="text-gray-400">Servicios:</span>
                <ul className="text-white">
                  {selectedServicios.map(id => (
                    <li key={id}>
                      • {servicios.find(s => s.id.toString() === id)?.nombre}</li>
                  ))}
                </ul>
                <div className="mt-2 flex justify-between text-sm">
                  <span>Duración total:</span>
                  <span className="font-medium">{duracionTotal} min</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span>Precio total:</span>
                  <span className="font-medium text-green-400">${precioTotal.toFixed(2)}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div className="space-x-4">
          <button
            onClick={resetForm}
            className="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors"
          >
            Nueva Reserva
          </button>
          <button
            onClick={() => window.location.href = "/"}
            className="px-6 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-md transition-colors"
          >
            Volver al Inicio
          </button>
        </div>
      </div>
    );
  };

  if (loadingComponent) {
    return (
      <div className="min-h-[500px] flex flex-col items-center justify-center bg-gray-800/50 backdrop-blur-sm rounded-lg shadow-lg p-6">
        <div className="w-12 h-12 border-t-2 border-b-2 border-blue-500 rounded-full animate-spin mb-4"></div>
        <p className="text-white text-lg">Cargando formulario de reserva...</p>
      </div>
    );
  }

  if (reservaCompletada) {
    return renderCompletedReservation();
  }

  return (
    <div className="w-full max-w-4xl mx-auto bg-gray-800/70 backdrop-blur-sm rounded-lg shadow-lg p-4 lg:p-6">
      {/* Indicador de pasos */}
      {renderStepIndicator()}
      
      {/* Formulario */}
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Mostrar resumen si no estamos en el paso 1 */}
        {step > 1 && renderReservaSummary()}
        
        {/* Mensaje de error */}
        {error && (
          <div className="bg-red-900/40 border border-red-500 text-red-200 rounded-md p-3 text-sm">
            <div className="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
              {error}
            </div>
          </div>
        )}
        
        {/* Pasos */}
        <div className="min-h-[300px]">
          {step === 1 && renderSucursalSelector()}
          {step === 2 && renderServiciosSelector()}
          {step === 3 && renderBarberoSelector()}
          {step === 4 && renderDateTimeSelector()}
          {step === 5 && renderClientForm()}
        </div>
        
        {/* Botones de navegación */}
        <div className="flex justify-between pt-4">
          {step > 1 ? (
            <button
              type="button"
              onClick={handleBack}
              className="px-6 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-md transition-colors flex items-center"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clipRule="evenodd" />
              </svg>
              Anterior
            </button>
          ) : (
            <div></div> // Espacio vacío para mantener la flexbox alineada
          )}
          
          {step < 5 ? (
            <button
              type="button"
              onClick={handleNext}
              className="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors flex items-center group"
            >
              Siguiente
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-1 group-hover:translate-x-1 transition-transform" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clipRule="evenodd" />
              </svg>
            </button>
          ) : (
            <button
              type="submit"
              className="px-8 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors flex items-center font-medium group"
              disabled={loading}
            >
              {loading ? (
                <>
                 <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Procesando...
                </>
              ) : (
                <>
                  Confirmar Reserva
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-2 group-hover:scale-110 transition-transform" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                </>
              )}
            </button>
          )}
        </div>
      </form>
    </div>
  );
}

=====================================================
Archivo: src\components\BarberList.tsx
=====================================================

// src/components/BarberList.tsx
'use client';

import React from 'react';

export default function BarberList() {
  return (
    <div className="grid gap-4 p-4">
      <h2 className="text-2xl font-bold">Nuestros Barberos</h2>
      {/* Lista de barberos aquí */}
    </div>
  );
}

=====================================================
Archivo: src\components\BarberoForm.tsx
=====================================================

'use client';

import { useState, useEffect } from 'react';
import ImageUpload from './ImageUpload';

interface BarberoFormProps {
  barberoId?: number;
  onSuccess?: () => void;
}

interface Barbero {
  id?: number;
  nombre: string;
  apellido: string;
  email: string;
  telefono: string;
  foto?: string;
  especialidad?: string;
  experiencia?: number;
  calificacion?: number;
  instagram?: string;
  biografia?: string;
}

export default function BarberoForm({ barberoId, onSuccess }: BarberoFormProps) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  
  const [formData, setFormData] = useState<Barbero>({
    nombre: '',
    apellido: '',
    email: '',
    telefono: '',
    foto: '',
    especialidad: '',
    experiencia: 0,
    calificacion: 5.0,
    instagram: '',
    biografia: ''
  });

  // Cargar datos si estamos editando un barbero existente
  useEffect(() => {
    if (barberoId) {
      const fetchBarbero = async () => {
        try {
          setLoading(true);
          const res = await fetch(`/api/admin/barberos/${barberoId}`);
          
          if (!res.ok) {
            const errorText = await res.text();
            console.error("Error response:", errorText);
            throw new Error(`Error al cargar datos del barbero: ${res.status} - ${errorText}`);
          }
          
          const data = await res.json();
          console.log("Datos del barbero recibidos:", data); // Para depuración
          
          setFormData(data);
          
          // Verificar específicamente si hay una URL de foto
          if (data.foto) {
            console.log("URL de foto encontrada:", data.foto);
            setImagePreview(data.foto);
          } else {
            console.log("No se encontró URL de foto");
            setImagePreview(null);
          }
        } catch (err) {
          console.error('Error:', err);
          setError('No se pudo cargar la información del barbero');
        } finally {
          setLoading(false);
        }
      };

      fetchBarbero();
    }
  }, [barberoId]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Convertir valores numéricos
    if (type === 'number') {
      setFormData(prev => ({
        ...prev,
        [name]: value === '' ? '' : Number(value)
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  const handleImageUpload = (file: File, previewUrl: string) => {
    console.log("Imagen cargada:", { file, previewUrl });
    setImageFile(file);
    setImagePreview(previewUrl);
    // No actualizamos formData.foto aquí porque necesitamos subir la imagen primero
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      // 1. Si hay una imagen nueva, subirla primero
      let fotoUrl = formData.foto;
      
      if (imageFile) {
        // Crear un FormData para la subida de la imagen
        const imageFormData = new FormData();
        imageFormData.append('file', imageFile);
        
        const uploadRes = await fetch('/api/upload', {
          method: 'POST',
          body: imageFormData
        });
        
        if (!uploadRes.ok) {
          const errorData = await uploadRes.text();
          console.error("Error al subir imagen:", errorData);
          throw new Error('Error al subir la imagen');
        }
        
        const uploadData = await uploadRes.json();
        console.log("Respuesta de subida de imagen:", uploadData);
        fotoUrl = uploadData.url; // URL de la imagen subida
        console.log("URL de foto actualizada:", fotoUrl);
      }
      
      // 2. Enviar los datos del barbero con la URL de la imagen
      const barberoData = {
        ...formData,
        foto: fotoUrl, // Usar la URL de la imagen actualizada o la existente
        instagram: formData.instagram || null,
        biografia: formData.biografia || null,
        experiencia: formData.experiencia ? Number(formData.experiencia) : null,
        calificacion: formData.calificacion ? Number(formData.calificacion) : null
      };
      
      const url = barberoId 
        ? `/api/admin/barberos/${barberoId}` 
        : '/api/admin/barberos';
      
      const method = barberoId ? 'PUT' : 'POST';
      
      // Luego, al enviar los datos:
      console.log("Datos a enviar:", barberoData);
      const res = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(barberoData)
      });
      
      // Comprobar si la respuesta es válida
      if (!res.ok) {
        const errorText = await res.text(); // Obtener texto en lugar de JSON para ver qué está mal
        console.error("Error response:", errorText);
        throw new Error(`Error HTTP: ${res.status} - ${errorText}`);
      }
      
      const result = await res.json();
      console.log("Respuesta exitosa:", result);
      
      // Éxito
      if (onSuccess) onSuccess();
      
      // Si no hay callback de éxito, redirigir
      if (!onSuccess) {
        window.location.href = '/admin/barberos';
      }
      
    } catch (err) {
      console.error('Error:', err);
      setError(err instanceof Error ? err.message : 'Error al procesar la solicitud');
    } finally {
      setLoading(false);
    }
  };

  if (loading && !formData.nombre) {
    return (
      <div className="flex justify-center py-12">
        <div className="w-8 h-8 border-t-2 border-b-2 border-blue-500 rounded-full animate-spin"></div>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="bg-gray-800 rounded-lg shadow-lg p-6 space-y-6">
      <h2 className="text-xl font-bold text-white mb-6 pb-2 border-b border-gray-700">
        {barberoId ? 'Editar Barbero' : 'Crear Nuevo Barbero'}
      </h2>
      
      {error && (
        <div className="bg-red-900/30 border border-red-500 text-red-200 px-4 py-3 rounded">
          {error}
        </div>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Columna izquierda */}
        <div className="space-y-6">
          {/* Nombre */}
          <div>
            <label htmlFor="nombre" className="block text-sm font-medium text-gray-300 mb-1">
              Nombre *
            </label>
            <input
              type="text"
              id="nombre"
              name="nombre"
              value={formData.nombre}
              onChange={handleChange}
              required
              className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          {/* Apellido */}
          <div>
            <label htmlFor="apellido" className="block text-sm font-medium text-gray-300 mb-1">
              Apellido *
            </label>
            <input
              type="text"
              id="apellido"
              name="apellido"
              value={formData.apellido}
              onChange={handleChange}
              required
              className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          {/* Email */}
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-300 mb-1">
              Email *
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              required
              className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          {/* Teléfono */}
          <div>
            <label htmlFor="telefono" className="block text-sm font-medium text-gray-300 mb-1">
              Teléfono
            </label>
            <input
              type="text"
              id="telefono"
              name="telefono"
              value={formData.telefono}
              onChange={handleChange}
              className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          {/* Especialidad */}
          <div>
            <label htmlFor="especialidad" className="block text-sm font-medium text-gray-300 mb-1">
              Especialidad
            </label>
            <select
              id="especialidad"
              name="especialidad"
              value={formData.especialidad || ''}
              onChange={handleChange}
              className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">Seleccionar especialidad</option>
              <option value="Cortes clásicos">Cortes clásicos</option>
              <option value="Degradados">Degradados</option>
              <option value="Barba">Barba</option>
              <option value="Cortes modernos">Cortes modernos</option>
              <option value="Coloración">Coloración</option>
            </select>
          </div>
          
          {/* Experiencia */}
          <div>
            <label htmlFor="experiencia" className="block text-sm font-medium text-gray-300 mb-1">
              Años de experiencia
            </label>
            <input
              type="number"
              id="experiencia"
              name="experiencia"
              min="0"
              max="50"
              value={formData.experiencia || ''}
              onChange={handleChange}
              className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>
        
        {/* Columna derecha */}
        <div className="space-y-6">
          {/* Foto */}
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              Foto del barbero
            </label>
            <ImageUpload 
              onImageUpload={handleImageUpload}
              currentImageUrl={formData.foto}
            />
          </div>
          
          {/* Instagram */}
          <div>
            <label htmlFor="instagram" className="block text-sm font-medium text-gray-300 mb-1">
              Instagram
            </label>
            <div className="relative">
              <span className="absolute left-3 top-2 text-gray-400">@</span>
              <input
                type="text"
                id="instagram"
                name="instagram"
                value={(formData.instagram || '').replace('@', '')}
                onChange={(e) => {
                  const value = e.target.value.startsWith('@') 
                    ? e.target.value 
                    : `@${e.target.value}`;
                  setFormData(prev => ({ ...prev, instagram: value }));
                }}
                className="w-full px-3 py-2 pl-8 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>
          
          {/* Calificación */}
          <div>
            <label htmlFor="calificacion" className="block text-sm font-medium text-gray-300 mb-1">
              Calificación (1-5)
            </label>
            <input
              type="number"
              id="calificacion"
              name="calificacion"
              min="1"
              max="5"
              step="0.1"
              value={formData.calificacion || ''}
              onChange={handleChange}
              className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          {/* Biografía */}
          <div>
            <label htmlFor="biografia" className="block text-sm font-medium text-gray-300 mb-1">
              Biografía
            </label>
            <textarea
              id="biografia"
              name="biografia"
              rows={4}
              value={formData.biografia || ''}
              onChange={handleChange}
              className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Escribe una breve biografía del barbero..."
            />
          </div>
        </div>
      </div>
      
      {/* Botones */}
      <div className="flex justify-end space-x-3 pt-6 border-t border-gray-700">
        <button
          type="button"
          onClick={() => window.history.back()}
          className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-md transition-colors"
        >
          Cancelar
        </button>
        <button
          type="submit"
          disabled={loading}
          className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors flex items-center"
        >
          {loading && (
            <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          )}
          {barberoId ? 'Actualizar Barbero' : 'Crear Barbero'}
        </button>
      </div>
    </form>
  );
}

=====================================================
Archivo: src\components\DisponibilidadSelector.tsx
=====================================================

// my-app\src\components\DisponibilidadSelector.tsx
'use client';
import { useEffect, useState } from 'react';
import { Calendar } from '@/components/ui/calendar';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { format, isSameDay, parseISO, startOfToday } from 'date-fns';
import { es } from 'date-fns/locale';
import { Skeleton } from '@/components/ui/skeleton';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';

interface DisponibilidadProps {
  sucursalId: number;
  barberoId?: number;
  serviciosIds: number[];
  onHorarioSeleccionado: (fecha: Date, hora: string, barberoId: number) => void;
}

interface BarberoDisponible {
  id: number;
  nombre: string;
}

interface SlotHorario {
  hora: string;
  barberos: BarberoDisponible[];
}

export default function DisponibilidadSelector({
  sucursalId,
  barberoId,
  serviciosIds,
  onHorarioSeleccionado
}: DisponibilidadProps) {
  const [date, setDate] = useState<Date>(startOfToday());
  const [disponibilidad, setDisponibilidad] = useState<SlotHorario[]>([]);
  const [loading, setLoading] = useState(false);
  const [mensaje, setMensaje] = useState<string | null>(null);
  const [selectedHora, setSelectedHora] = useState<string | null>(null);
  const [selectedBarbero, setSelectedBarbero] = useState<number | null>(null);

  useEffect(() => {
    const fetchDisponibilidad = async () => {
      if (!sucursalId || !date) return;
      
      setLoading(true);
      setMensaje(null);
      setSelectedHora(null);
      setSelectedBarbero(null);
      
      try {
        // Construir los parámetros de la URL
        const params = new URLSearchParams();
        params.append('fecha', date.toISOString());
        params.append('sucursalId', sucursalId.toString());
        
        if (barberoId) {
          params.append('barberoId', barberoId.toString());
        }
        
        if (serviciosIds.length > 0) {
          params.append('servicios', serviciosIds.join(','));
        }
        
        // Realizar la petición
        const response = await fetch(`/api/turnos/disponibilidad?${params.toString()}`);
        const data = await response.json();
        
        if (response.ok) {
          setDisponibilidad(data.disponibilidad || []);
          if (data.mensaje) {
            setMensaje(data.mensaje);
          }
        } else {
          setMensaje(data.error || 'Error al cargar la disponibilidad');
          setDisponibilidad([]);
        }
      } catch (error) {
        console.error('Error al obtener disponibilidad:', error);
        setMensaje('Error de conexión. Intenta nuevamente.');
        setDisponibilidad([]);
      } finally {
        setLoading(false);
      }
    };

    fetchDisponibilidad();
  }, [date, sucursalId, barberoId, serviciosIds]);

  const handleSeleccionarHorario = () => {
    if (!selectedHora || !selectedBarbero) return;
    
    const fechaHora = new Date(date);
    const [horas, minutos] = selectedHora.split(':').map(num => parseInt(num));
    fechaHora.setHours(horas, minutos, 0, 0);
    
    onHorarioSeleccionado(fechaHora, selectedHora, selectedBarbero);
  };

  const renderHorarios = () => {
    if (loading) {
      return (
        <div className="space-y-2">
          {Array(5).fill(0).map((_, i) => (
            <Skeleton key={i} className="h-12 w-full" />
          ))}
        </div>
      );
    }

    if (mensaje) {
      return (
        <div className="text-center py-8 text-gray-500">
          <p>{mensaje}</p>
        </div>
      );
    }

    if (disponibilidad.length === 0) {
      return (
        <div className="text-center py-8 text-gray-500">
          <p>No hay horarios disponibles para esta fecha</p>
          <p className="text-sm mt-2">Intenta con otra fecha o sucursal</p>
        </div>
      );
    }

    return (
      <div className="grid grid-cols-2 gap-2 max-h-96 overflow-y-auto pr-2">
        {disponibilidad.map((slot) => (
          <Button
            key={slot.hora}
            variant={selectedHora === slot.hora ? "default" : "outline"}
            className="justify-start h-auto py-2"
            onClick={() => {
              setSelectedHora(slot.hora);
              // Si solo hay un barbero disponible, seleccionarlo automáticamente
              if (slot.barberos.length === 1) {
                setSelectedBarbero(slot.barberos[0].id);
              } else {
                // Si ya había seleccionado un barbero, comprobar si está disponible en este nuevo horario
                if (selectedBarbero) {
                  const barberoDisponible = slot.barberos.find(b => b.id === selectedBarbero);
                  if (!barberoDisponible) {
                    setSelectedBarbero(null);
                  }
                }
              }
            }}
          >
            <div className="text-left">
              <div className="font-medium">{slot.hora}</div>
              <div className="text-xs text-gray-500">
                {slot.barberos.length === 1 
                  ? `Barbero: ${slot.barberos[0].nombre}` 
                  : `${slot.barberos.length} barberos disponibles`}
              </div>
            </div>
          </Button>
        ))}
      </div>
    );
  };

  const renderBarberosDisponibles = () => {
    if (!selectedHora) return null;
    
    const slotSeleccionado = disponibilidad.find(s => s.hora === selectedHora);
    if (!slotSeleccionado || slotSeleccionado.barberos.length <= 1) return null;
    
    return (
      <div className="mt-4">
        <h4 className="text-sm font-medium mb-2">Selecciona un barbero:</h4>
        <RadioGroup 
          value={selectedBarbero?.toString() || ""} 
          onValueChange={(value) => setSelectedBarbero(parseInt(value))}
        >
          {slotSeleccionado.barberos.map(barbero => (
            <div key={barbero.id} className="flex items-center space-x-2 mb-2">
              <RadioGroupItem value={barbero.id.toString()} id={`barbero-${barbero.id}`} />
              <Label htmlFor={`barbero-${barbero.id}`}>{barbero.nombre}</Label>
            </div>
          ))}
        </RadioGroup>
      </div>
    );
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Selecciona fecha y hora</CardTitle>
        <CardDescription>
          Elige una fecha y un horario disponible para tu reserva
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid md:grid-cols-2 gap-4">
          <div>
            <Calendar
              mode="single"
              selected={date}
              onSelect={(date) => date && setDate(date)}
              disabled={(date) => {
                const today = startOfToday();
                return isSameDay(date, today) ? false : date < today;
              }}
              locale={es}
              className="rounded-md border"
            />
          </div>
          <div>
            <h3 className="font-medium mb-2">
              {format(date, "EEEE, d 'de' MMMM", { locale: es })}
            </h3>
            {renderHorarios()}
            {renderBarberosDisponibles()}
            
            <div className="mt-4">
              <Button 
                onClick={handleSeleccionarHorario} 
                disabled={!selectedHora || !selectedBarbero}
                className="w-full"
              >
                Confirmar horario
              </Button>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

=====================================================
Archivo: src\components\FormularioNotas.tsx
=====================================================

//my-app\src\components\FormularioNotas.tsx
'use client';

import { useState } from 'react';

interface FormularioNotasProps {
  onSubmit: (data: { titulo: string; descripcion: string }) => void;
}

export default function FormularioNotas({ onSubmit }: FormularioNotasProps) {
  const [titulo, setTitulo] = useState('');
  const [descripcion, setDescripcion] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit({ titulo, descripcion });
    setTitulo('');
    setDescripcion('');
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label htmlFor="titulo" className="block text-sm font-medium text-gray-700">
          Título
        </label>
        <input
          type="text"
          id="titulo"
          value={titulo}
          onChange={(e) => setTitulo(e.target.value)}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          required
        />
      </div>
      <div>
        <label htmlFor="descripcion" className="block text-sm font-medium text-gray-700">
          Descripción
        </label>
        <textarea
          id="descripcion"
          value={descripcion}
          onChange={(e) => setDescripcion(e.target.value)}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          rows={3}
          required
        />
      </div>
      <button
        type="submit"
        className="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
      >
        Guardar Nota
      </button>
    </form>
  );
}

=====================================================
Archivo: src\components\ImageUpload.tsx
=====================================================

import { useState, useEffect } from 'react';

interface ImageUploadProps {
  onImageUpload: (file: File, previewUrl: string) => void;
  currentImageUrl?: string | null;
}

export default function ImageUpload({ onImageUpload, currentImageUrl }: ImageUploadProps) {
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [isDragging, setIsDragging] = useState(false);

  // Establecer la imagen actual como previsualización al cargar el componente
  useEffect(() => {
    console.log("ImageUpload - currentImageUrl:", currentImageUrl);
    if (currentImageUrl) {
      setPreviewUrl(currentImageUrl);
    }
  }, [currentImageUrl]);

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const file = e.dataTransfer.files[0];
      processFile(file);
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      processFile(file);
    }
  };

  const processFile = (file: File) => {
    // Validar tipo de archivo
    if (!file.type.match('image.*')) {
      alert('Por favor selecciona una imagen');
      return;
    }

    // Crear URL para previsualización
    const fileUrl = URL.createObjectURL(file);
    setPreviewUrl(fileUrl);
    onImageUpload(file, fileUrl);
  };

  return (
    <div 
      className={`relative border-2 border-dashed rounded-lg p-6 flex flex-col items-center justify-center transition-colors cursor-pointer
        ${isDragging ? 'border-blue-500 bg-blue-500/10' : 'border-gray-600 hover:border-gray-500'}
        ${previewUrl ? 'h-64' : 'h-48'}`}
      onDragOver={handleDragOver}
      onDragLeave={handleDragLeave}
      onDrop={handleDrop}
      onClick={() => document.getElementById('file-upload')?.click()}
    >
      <input
        type="file"
        id="file-upload"
        className="hidden"
        accept="image/*"
        onChange={handleFileChange}
      />
      
      {previewUrl ? (
        // Mostrar previsualización de la imagen
        <div className="w-full h-full relative">
          <img 
            src={previewUrl} 
            alt="Preview" 
            className="w-full h-full object-contain rounded"
          />
          <button
            type="button"
            className="absolute top-2 right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600"
            onClick={(e) => {
              e.stopPropagation();
              setPreviewUrl(null);
              onImageUpload(null as any, '');
            }}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
          </button>
        </div>
      ) : (
        // Interfaz para arrastrar y soltar
        <>
          <div className="mb-3 w-12 h-12 text-gray-400">
            {isDragging ? (
              <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
              </svg>
            ) : (
              <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
            )}
          </div>
          <div className="text-center">
            <p className="text-sm text-gray-400 mb-1">Arrastra y suelta una imagen</p>
            <p className="text-xs text-gray-500">o haz clic para seleccionar un archivo</p>
            <p className="text-xs text-gray-500 mt-1">PNG, JPG o WEBP (Máx. 2MB)</p>
          </div>
        </>
      )}
    </div>
  );
}

=====================================================
Archivo: src\components\MobileAdminMenu.tsx
=====================================================

'use client';

import { useRouter } from 'next/navigation';
import Link from 'next/link';

interface MobileAdminMenuProps {
  currentPage: 'dashboard' | 'barberos' | 'servicios' | 'clientes' | 'sucursales';
  isOpen: boolean;
  onClose: () => void;
}

export default function MobileAdminMenu({ currentPage, isOpen, onClose }: MobileAdminMenuProps) {
  const router = useRouter();

  const handleLogout = async () => {
    try {
      await fetch('/api/admin/logout', { method: 'POST' });
      router.push('/admin/login');
    } catch (error) {
      console.error('Error al cerrar sesión:', error);
    }
  };

  // Lista de items del menú
  const menuItems = [
    { name: 'Dashboard', path: '/admin/dashboard', id: 'dashboard' },
    { name: 'Barberos', path: '/admin/barberos', id: 'barberos' },
    { name: 'Servicios', path: '/admin/servicios', id: 'servicios' },
    { name: 'Clientes', path: '/admin/clientes', id: 'clientes' },
    { name: 'Sucursales', path: '/admin/sucursales', id: 'sucursales' }
  ];

  return (
    <div 
      className={`md:hidden fixed top-0 left-0 right-0 z-30 bg-gray-800 shadow-lg transition-transform duration-300 transform ${
        isOpen ? 'translate-y-14' : '-translate-y-full'
      }`}
      style={{ height: 'calc(100vh - 56px)' }}
    >
      <div className="p-4 overflow-y-auto h-full flex flex-col">
        <nav className="space-y-1 mb-4">
          {menuItems.map((item) => (
            <Link
              key={item.id}
              href={item.path}
              className={`block py-2.5 px-4 rounded transition-colors text-sm font-medium ${
                currentPage === item.id
                  ? 'bg-blue-600 text-white'
                  : 'hover:bg-gray-700 text-gray-200'
              }`}
              onClick={onClose}
            >
              {item.name}
            </Link>
          ))}
        </nav>
        
        <button
          onClick={handleLogout}
          className="mt-auto py-2.5 px-4 bg-red-600/30 hover:bg-red-700/40 transition-colors text-red-300 rounded-md text-sm font-medium flex items-center justify-center"
        >
          <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m13 4a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          Cerrar Sesión
        </button>
      </div>
    </div>
  );
}

=====================================================
Archivo: src\components\ServiceAndBarberList.tsx
=====================================================

//my-app\src\components\ServiceAndBarberList.tsx
'use client';

import { useEffect, useState } from 'react';
import Image from 'next/image';

interface Barbero {
  id: number;
  nombre: string;
  apellido: string;
  foto?: string; // URL de la foto
  especialidad?: string; // Nueva propiedad
  experiencia?: number; // Nueva propiedad (años)
  calificacion?: number; // Nueva propiedad (de 1 a 5)
  instagram?: string; // Nueva propiedad
}

interface Servicio {
  id: number;
  nombre: string;
  duracion: number;
  precio: number;
  descripcion?: string; // Nueva propiedad
  imagen?: string; // URL de la imagen
}

// Añadimos props para los callbacks de reserva
interface ServiceAndBarberListProps {
  onServiceReserveClick?: (id: number) => void;
  onBarberReserveClick?: (id: number) => void;
}

export default function ServiceAndBarberList({
  onServiceReserveClick,
  onBarberReserveClick
}: ServiceAndBarberListProps) {
  const [barberos, setBarberos] = useState<Barbero[]>([]);
  const [servicios, setServicios] = useState<Servicio[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedBarbero, setSelectedBarbero] = useState<Barbero | null>(null);
  const [activeTab, setActiveTab] = useState<'barberos' | 'servicios'>('barberos');

  useEffect(() => {
    async function fetchData() {
      try {
        setLoading(true);
        setError(null);
        
        const [barberosRes, serviciosRes] = await Promise.all([
          fetch('/api/barberos'),
          fetch('/api/servicios')
        ]);

        if (!barberosRes.ok || !serviciosRes.ok) {
          throw new Error('Error al cargar datos');
        }

        const barberosData = await barberosRes.json();
        const serviciosData = await serviciosRes.json();

        // Simular datos adicionales para el ejemplo
        const barberosConDetalles = barberosData.map((barbero: Barbero) => ({
          ...barbero,
          foto: `/barberos/${barbero.id}.jpg`, // URL de ejemplo - deberías tener fotos reales
          especialidad: ['Cortes clásicos', 'Degradados', 'Barba', 'Cortes modernos'][Math.floor(Math.random() * 4)],
          experiencia: Math.floor(Math.random() * 10) + 1,
          calificacion: (Math.floor(Math.random() * 10) + 40) / 10, // Entre 4.0 y 5.0
          instagram: `@${barbero.nombre.toLowerCase()}${barbero.apellido.toLowerCase()}`
        }));

        const serviciosConDetalles = serviciosData.map((servicio: Servicio) => ({
          ...servicio,
          descripcion: [
            "Incluye lavado y secado",
            "Finalizado con productos premium",
            "Técnica personalizada según la forma del rostro",
            "Incluye asesoramiento personalizado"
          ][Math.floor(Math.random() * 4)],
          imagen: `/servicios/${servicio.id}.jpg` // URL de ejemplo
        }));

        setBarberos(barberosConDetalles);
        setServicios(serviciosConDetalles);
      } catch (err) {
        console.error('Error cargando datos:', err);
        setError('Error al cargar datos. Por favor, recarga la página.');
      } finally {
        setLoading(false);
      }
    }

    fetchData();
  }, []);

  // Renderizar estrellas según la calificación
  const renderEstrellas = (calificacion: number) => {
    const estrellas = [];
    const fullStars = Math.floor(calificacion);
    const hasHalfStar = calificacion % 1 >= 0.5;
    
    for (let i = 0; i < fullStars; i++) {
      estrellas.push(
        <svg key={`full-${i}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-5 h-5 text-yellow-400">
          <path fillRule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clipRule="evenodd" />
        </svg>
      );
    }
    
    if (hasHalfStar) {
      estrellas.push(
        <svg key="half" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" className="w-5 h-5 text-yellow-400">
          <path fillRule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clipRule="evenodd" fill="url(#half-star)" />
          <defs>
            <linearGradient id="half-star" x1="0" x2="1" y1="0" y2="0">
              <stop offset="50%" stopColor="#FACC15" />
              <stop offset="50%" stopColor="#374151" />
            </linearGradient>
          </defs>
        </svg>
      );
    }
    
    // Añadir estrellas vacías
    const emptyStars = 5 - estrellas.length;
    for (let i = 0; i < emptyStars; i++) {
      estrellas.push(
        <svg key={`empty-${i}`} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-gray-500">
          <path strokeLinecap="round" strokeLinejoin="round" d="M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.84.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 20.54a.562.562 0 01-.84-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z" />
        </svg>
      );
    }
    
    return estrellas;
  };

  if (loading) {
    return (
      <div className="min-h-[400px] flex flex-col items-center justify-center">
        <div className="w-12 h-12 rounded-full border-t-2 border-b-2 border-blue-500 animate-spin mb-4"></div>
        <p className="text-white text-lg">Cargando información...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-[300px] flex items-center justify-center">
        <div className="bg-red-900/30 border border-red-500 rounded-lg p-6 text-center max-w-lg">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-12 h-12 text-red-500 mx-auto mb-4">
            <path strokeLinecap="round" strokeLinejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
          </svg>
          <p className="text-red-300 text-lg font-medium mb-2">¡Algo salió mal!</p>
          <p className="text-red-200">{error}</p>
          <button 
            onClick={() => window.location.reload()} 
            className="mt-4 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md transition-colors"
          >
            Reintentar
          </button>
        </div>
      </div>
    );
  }

  // Modal para detalles del barbero
  const renderBarberoModal = () => {
    if (!selectedBarbero) return null;
    
    return (
      <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm p-4" onClick={() => setSelectedBarbero(null)}>
        <div className="bg-gradient-to-b from-gray-800 to-gray-900 rounded-xl max-w-md w-full overflow-hidden shadow-2xl transform transition-all animate-modal-open" onClick={e => e.stopPropagation()}>
          <div className="relative h-72 overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-t from-gray-900 to-transparent z-10"></div>
            <div className="w-full h-full bg-gray-700 relative overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-br from-blue-600/20 to-purple-600/20"></div>
              <div className="flex items-center justify-center h-full">
                <div className="w-36 h-36 rounded-full bg-gray-800 border-4 border-white/20 flex items-center justify-center text-white text-6xl font-bold">
                  {selectedBarbero.nombre[0]}{selectedBarbero.apellido[0]}
                </div>
              </div>
            </div>
            <div className="absolute bottom-4 left-4 right-4 z-20">
              <h3 className="text-2xl font-bold text-white">{selectedBarbero.nombre} {selectedBarbero.apellido}</h3>
              <div className="flex items-center mt-1">
                {renderEstrellas(selectedBarbero.calificacion || 4)}
                <span className="ml-2 text-gray-300 text-sm">({selectedBarbero.calificacion?.toFixed(1)})</span>
              </div>
            </div>
          </div>
          
          <div className="p-6">
            <div className="grid grid-cols-2 gap-4 mb-6">
              <div className="bg-gray-800/50 rounded-lg p-3">
                <div className="text-xs text-gray-400">Especialidad</div>
                <div className="font-medium text-white">{selectedBarbero.especialidad}</div>
              </div>
              <div className="bg-gray-800/50 rounded-lg p-3">
                <div className="text-xs text-gray-400">Experiencia</div>
                <div className="font-medium text-white">{selectedBarbero.experiencia} años</div>
              </div>
            </div>
            
            <div className="border-t border-gray-700 pt-4">
              <h4 className="text-lg font-semibold text-white mb-3">Acerca de</h4>
              <p className="text-gray-300">
                {selectedBarbero.nombre} es un barbero con {selectedBarbero.experiencia} años de experiencia, 
                especializado en {selectedBarbero.especialidad}. Apasionado por su trabajo y comprometido 
                con la satisfacción de sus clientes.
              </p>
            </div>
            
            <div className="mt-6 flex items-center justify-between">
              <a 
                href={`https://instagram.com/${selectedBarbero.instagram?.substring(1)}`} 
                target="_blank" 
                rel="noopener noreferrer"
                className="flex items-center text-pink-400 hover:text-pink-300"
              >
                <svg className="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                  <path fillRule="evenodd" d="M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465a4.902 4.902 0 011.772 1.153 4.902 4.902 0 011.153 1.772c.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.902 4.902 0 01-1.153 1.772 4.902 4.902 0 01-1.772 1.153c-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.902 4.902 0 01-1.772-1.153 4.902 4.902 0 01-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 011.153-1.772A4.902 4.902 0 015.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63zm-.081 1.802h-.468c-2.456 0-2.784.011-3.807.058-.975.045-1.504.207-1.857.344-.467.182-.8.398-1.15.748-.35.35-.566.683-.748 1.15-.137.353-.3.882-.344 1.857-.047 1.023-.058 1.351-.058 3.807v.468c0 2.456.011 2.784.058 3.807.045.975.207 1.504.344 1.857.182.466.399.8.748 1.15.35.35.683.566 1.15.748.353.137.882.3 1.857.344 1.054.048 1.37.058 4.041.058h.08c2.597 0 2.917-.01 3.96-.058.976-.045 1.505-.207 1.858-.344.466-.182.8-.398 1.15-.748.35-.35.566-.683.748-1.15.137-.353.3-.882.344-1.857.048-1.055.058-1.37.058-4.041v-.08c0-2.597-.01-2.917-.058-3.96-.045-.976-.207-1.505-.344-1.858a3.097 3.097 0 00-.748-1.15 3.098 3.098 0 00-1.15-.748c-.353-.137-.882-.3-1.857-.344-1.023-.047-1.351-.058-3.807-.058zM12 6.865a5.135 5.135 0 110 10.27 5.135 5.135 0 010-10.27zm0 1.802a3.333 3.333 0 100 6.666 3.333 3.333 0 000-6.666zm5.338-3.205a1.2 1.2 0 110 2.4 1.2 1.2 0 010-2.4z" clipRule="evenodd" />
                </svg>
                {selectedBarbero.instagram}
              </a>
              
              {/* Ahora usamos el callback recibido por props */}
              <button 
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors"
                onClick={(e) => {
                  e.stopPropagation(); // Evitar que se cierre el modal por el onClick del overlay
                  if (onBarberReserveClick) {
                    onBarberReserveClick(selectedBarbero.id);
                    setSelectedBarbero(null); // Cerrar modal después de reservar
                  } else {
                    // Fallback al comportamiento anterior si no hay callback
                    window.location.href = '/reserva?barbero=' + selectedBarbero.id;
                  }
                }}
              >
                Reservar Turno
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-8">
      {/* Tabs */}
      <div className="flex border-b border-gray-700 mb-6">
        <button
          className={`px-6 py-3 text-lg font-medium transition-colors ${
            activeTab === 'barberos'
              ? 'text-blue-400 border-b-2 border-blue-400'
              : 'text-gray-400 hover:text-gray-200'
          }`}
          onClick={() => setActiveTab('barberos')}
        >
          Nuestros Barberos
        </button>
        <button
          className={`px-6 py-3 text-lg font-medium transition-colors ${
            activeTab === 'servicios'
              ? 'text-blue-400 border-b-2 border-blue-400'
              : 'text-gray-400 hover:text-gray-200'
          }`}
          onClick={() => setActiveTab('servicios')}
        >
          Servicios
        </button>
      </div>

      {/* Contenido según tab activo */}
      {activeTab === 'barberos' ? (
        <section>
          {barberos.length === 0 ? (
            <p className="text-gray-400 text-center py-10">No hay barberos disponibles</p>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
              {barberos.map((barbero) => (
                <div 
                  key={barbero.id} 
                  className="bg-gradient-to-br from-gray-800 to-gray-900 rounded-xl overflow-hidden shadow-lg hover:shadow-blue-900/20 hover:scale-[1.02] transition-all duration-300 cursor-pointer"
                  onClick={() => setSelectedBarbero(barbero)}
                >
                  <div className="h-48 bg-gray-700 relative overflow-hidden">
                    <div className="absolute inset-0 bg-gradient-to-br from-blue-600/20 to-purple-600/20"></div>
                    <div className="flex items-center justify-center h-full">
                      <div className="w-24 h-24 rounded-full bg-gray-800 border-4 border-white/20 flex items-center justify-center text-white text-4xl font-bold">
                        {barbero.nombre[0]}{barbero.apellido[0]}
                      </div>
                    </div>
                  </div>
                  
                  <div className="p-5">
                    <div className="flex justify-between items-start mb-3">
                      <h3 className="text-xl font-bold text-white">{barbero.nombre} {barbero.apellido}</h3>
                      <span className="bg-blue-600/20 text-blue-400 text-xs font-medium px-2 py-1 rounded-full">
                        {barbero.especialidad}
                      </span>
                    </div>
                    
                    <div className="flex items-center mb-3">
                      {renderEstrellas(barbero.calificacion || 4)}
                      <span className="ml-2 text-gray-400 text-sm">({barbero.calificacion?.toFixed(1)})</span>
                    </div>
                    
                    <div className="flex justify-between items-center pt-2">
                      <div className="text-gray-400 text-sm">{barbero.experiencia} años de exp.</div>
                      <button className="text-sm text-blue-400 hover:text-blue-300 transition-colors">
                        Ver perfil
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </section>
      ) : (
        <section>
          {servicios.length === 0 ? (
            <p className="text-gray-400 text-center py-10">No hay servicios disponibles</p>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {servicios.map((servicio) => (
                <div 
                  key={servicio.id} 
                  className="bg-gradient-to-b from-gray-800 to-gray-900 rounded-lg overflow-hidden shadow-lg hover:shadow-blue-900/20 transition-all duration-300"
                >
                  {/* Cabecera con título principal */}
                  <div className="h-40 bg-gradient-to-br from-gray-700/50 to-gray-800/50 flex items-center justify-center">
                    <h3 className="text-2xl font-bold text-white px-4 text-center">
                      {servicio.nombre}
                    </h3>
                  </div>
                  
                  {/* Contenido con info y botón */}
                  <div className="p-5">
                    {/* Descripción */}
                    <p className="text-gray-300 text-sm min-h-[50px] mb-4">
                      {servicio.descripcion || 'Servicio profesional de barbería'}
                    </p>
                    
                    {/* Info de precio y duración */}
                    <div className="flex justify-between items-center border-t border-gray-700 pt-4">
                      <div className="space-y-1">
                        
                        <div className="flex items-center text-gray-400 text-sm">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                          {servicio.duracion} min
                        </div>
                        <div className="text-green-400 font-medium text-lg">
                          ${servicio.precio}
                        </div>
                      </div>
                      
                      {/* Ahora usamos el callback para el botón de reserva de servicio */}
                      <button 
                        className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors"
                        onClick={(e) => {
                          e.stopPropagation();
                          if (onServiceReserveClick) {
                            onServiceReserveClick(servicio.id);
                          } else {
                            // Fallback al comportamiento anterior si no hay callback
                            window.location.href = '/reserva?servicio=' + servicio.id;
                          }
                        }}
                      >
                        Reservar
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </section>
      )}

      {/* Modal para detalles del barbero */}
      {renderBarberoModal()}
      
      {/* Estilos para la animación del modal */}
      <style jsx global>{`
        @keyframes modalOpen {
          from {
            opacity: 0;
            transform: scale(0.95);
          }
          to {
            opacity: 1;
            transform: scale(1);
          }
        }
        
        .animate-modal-open {
          animation: modalOpen 0.3s ease-out forwards;
        }
      `}</style>
    </div>
  );
}

=====================================================
Archivo: src\components\ServiceList.tsx
=====================================================

// src/components/ServiceList.tsx
'use client';

import React from 'react';

export default function ServiceList() {
  return (
    <div className="grid gap-4 p-4">
      <h2 className="text-2xl font-bold">Servicios Disponibles</h2>
      {/* Lista de servicios aquí */}
    </div>
  );
}

=====================================================
Archivo: src\components\ServiceSelector.tsx
=====================================================

'use client';
import { useEffect, useState } from 'react';
// Adaptamos las importaciones a tu estructura de proyecto
// Importamos directamente desde los archivos locales sin usar alias @/
import { Checkbox } from './ui/checkbox';
import { Button } from './ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from './ui/card';
import { Label } from './ui/label';

interface Servicio {
  id: number;
  nombre: string;
  descripcion: string | null;
  precio: number;
  duracion: number;
}

interface ServiceSelectorProps {
  sucursalId: number;
  onServiciosChange: (servicios: number[]) => void;
  initialServicios?: number[];
}

export default function ServiceSelector({ 
  sucursalId, 
  onServiciosChange,
  initialServicios = []
}: ServiceSelectorProps) {
  const [servicios, setServicios] = useState<Servicio[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedServicios, setSelectedServicios] = useState<number[]>(initialServicios);
  const [tiempoTotal, setTiempoTotal] = useState(0);
  const [precioTotal, setPrecioTotal] = useState(0);

  // Cargar servicios de la sucursal seleccionada
  useEffect(() => {
    const fetchServicios = async () => {
      try {
        setLoading(true);
        const response = await fetch(`/api/sucursales/${sucursalId}/servicios`);
        
        if (!response.ok) {
          throw new Error('Error al cargar los servicios');
        }
        
        const data = await response.json();
        setServicios(data);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Error desconocido');
      } finally {
        setLoading(false);
      }
    };

    if (sucursalId) {
      fetchServicios();
    }
  }, [sucursalId]);

  // Calcular tiempo y precio total
  useEffect(() => {
    const serviciosSeleccionados = servicios.filter(
      servicio => selectedServicios.includes(servicio.id)
    );
    
    const tiempo = serviciosSeleccionados.reduce(
      (total, servicio) => total + servicio.duracion, 0
    );
    
    const precio = serviciosSeleccionados.reduce(
      (total, servicio) => total + Number(servicio.precio), 0
    );
    
    setTiempoTotal(tiempo);
    setPrecioTotal(precio);
    
    // Notificar al componente padre
    onServiciosChange(selectedServicios);
  }, [selectedServicios, servicios, onServiciosChange]);

  // Manejar selección/deselección de servicios
  const toggleServicio = (servicioId: number) => {
    setSelectedServicios(prev => {
      if (prev.includes(servicioId)) {
        return prev.filter(id => id !== servicioId);
      } else {
        return [...prev, servicioId];
      }
    });
  };

  if (loading) {
    return <div className="text-center p-4">Cargando servicios...</div>;
  }

  if (error) {
    return <div className="text-center text-red-500 p-4">Error: {error}</div>;
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Selecciona los servicios</CardTitle>
        <CardDescription>
          Puedes elegir uno o más servicios para tu reserva
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {servicios.length === 0 ? (
            <p className="text-center text-gray-500">
              No hay servicios disponibles en esta sucursal
            </p>
          ) : (
            servicios.map((servicio) => (
              <div key={servicio.id} className="flex items-center space-x-2 border p-3 rounded-lg">
                <Checkbox
                  id={`servicio-${servicio.id}`}
                  checked={selectedServicios.includes(servicio.id)}
                  onCheckedChange={() => toggleServicio(servicio.id)}
                />
                <div className="flex-1">
                  <Label
                    htmlFor={`servicio-${servicio.id}`}
                    className="cursor-pointer text-sm font-medium"
                  >
                    {servicio.nombre}
                  </Label>
                  {servicio.descripcion && (
                    <p className="text-xs text-gray-500">{servicio.descripcion}</p>
                  )}
                </div>
                <div className="flex flex-col items-end">
                  <span className="font-medium">${servicio.precio.toFixed(2)}</span>
                  <span className="text-xs text-gray-500">{servicio.duracion} min</span>
                </div>
              </div>
            ))
          )}
        </div>
      </CardContent>
      {selectedServicios.length > 0 && (
        <CardFooter className="flex flex-col space-y-2 border-t pt-4">
          <div className="flex justify-between w-full">
            <span className="font-medium">Tiempo estimado:</span>
            <span>{tiempoTotal} minutos</span>
          </div>
          <div className="flex justify-between w-full">
            <span className="font-medium">Precio total:</span>
            <span className="font-bold">${precioTotal.toFixed(2)}</span>
          </div>
        </CardFooter>
      )}
    </Card>
  );
}

=====================================================
Archivo: src\components\ui\button.tsx
=====================================================

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "../../lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

=====================================================
Archivo: src\components\ui\calendar.tsx
=====================================================

"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "../../lib/utils"
import { buttonVariants } from "./button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

=====================================================
Archivo: src\components\ui\card.tsx
=====================================================

import * as React from "react"

import { cn } from "../../lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

=====================================================
Archivo: src\components\ui\checkbox.tsx
=====================================================

"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "../../lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

=====================================================
Archivo: src\components\ui\input.tsx
=====================================================

import * as React from "react";
import { cn } from "@/lib/utils";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Input.displayName = "Input";

export { Input };

=====================================================
Archivo: src\components\ui\label.tsx
=====================================================

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "../../lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

=====================================================
Archivo: src\components\ui\radio-group.tsx
=====================================================

"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "../../lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

=====================================================
Archivo: src\components\ui\skeleton.tsx
=====================================================

import { cn } from "../../lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

=====================================================
Archivo: src\constants\turnos.ts
=====================================================

// src/constants/turnos.ts
export const ESTADOS_TURNO = {
    PENDIENTE: 'PENDIENTE',
    CONFIRMADO: 'CONFIRMADO',
    CANCELADO: 'CANCELADO',
    COMPLETADO: 'COMPLETADO'
  } as const;
  
  export type EstadoTurno = typeof ESTADOS_TURNO[keyof typeof ESTADOS_TURNO];

=====================================================
Archivo: src\lib\dateUtils.ts
=====================================================

// src/lib/dateUtils.ts
// Versión mejorada para garantizar una detección de conflictos más robusta

import { format, parseISO, addMinutes, isAfter, isBefore } from 'date-fns';
import { es } from 'date-fns/locale';

/**
 * Obtiene slots de tiempo disponibles para una fecha determinada
 */
export function getAvailableTimeSlots(date: Date, duration: number) {
  const timeSlots = [];
  const startHour = 9; // Hora de inicio (9 AM)
  const endHour = 18; // Hora de fin (6 PM)
  
  for (let hour = startHour; hour < endHour; hour++) {
    for (let minute = 0; minute < 60; minute += 30) {
      const time = new Date(date);
      time.setUTCHours(hour, minute, 0, 0);
      
      // No agregar slots para tiempo pasado
      if (isAfter(time, new Date())) {
        timeSlots.push(time);
      }
    }
  }
  
  return timeSlots;
}

/**
 * Formatea una fecha ISO manteniendo su valor UTC (sin conversión a local)
 */
export function formatUTCDate(dateString: string, formatString: string = 'dd/MM/yyyy, HH:mm'): string {
  // Parsear la fecha ISO a un objeto Date
  const date = parseISO(dateString);
  
  // Obtener componentes UTC
  const year = date.getUTCFullYear();
  const month = date.getUTCMonth();
  const day = date.getUTCDate();
  const hours = date.getUTCHours();
  const minutes = date.getUTCMinutes();
  const seconds = date.getUTCSeconds();
  
  // Crear una nueva fecha que preserve los componentes UTC
  const utcDate = new Date(Date.UTC(year, month, day, hours, minutes, seconds));
  
  // Formatear utilizando date-fns
  return format(utcDate, formatString, { locale: es });
}

/**
 * Ajusta un horario local a UTC para guardarlo consistentemente
 */
export function toUTCDateTime(date: Date, timeString: string): Date {
  // Extraer horas y minutos del string de tiempo (formato: "HH:MM")
  const [hours, minutes] = timeString.split(':').map(Number);
  
  // Crear una nueva fecha con el día seleccionado pero con el horario UTC
  const result = new Date(date);
  result.setUTCHours(hours, minutes, 0, 0);
  
  return result;
}

/**
 * Combina una fecha y una hora para crear un objeto Date en UTC
 */
export function combineDateAndTimeToUTC(date: Date, hours: number, minutes: number): Date {
  return new Date(Date.UTC(
    date.getFullYear(),
    date.getMonth(),
    date.getDate(),
    hours,
    minutes,
    0,
    0
  ));
}

/**
 * Comprueba si dos rangos de tiempo se solapan
 * 
 * @param start1 Inicio del primer rango de tiempo
 * @param end1 Fin del primer rango de tiempo
 * @param start2 Inicio del segundo rango de tiempo
 * @param end2 Fin del segundo rango de tiempo
 * @returns true si hay solapamiento, false en caso contrario
 */
export function checkTimeRangeOverlap(
  start1: Date, 
  end1: Date, 
  start2: Date, 
  end2: Date
): boolean {
  // Convertir todos los tiempos a milisegundos para comparaciones precisas
  const start1Time = start1.getTime();
  const end1Time = end1.getTime();
  const start2Time = start2.getTime();
  const end2Time = end2.getTime();

  // Hay solapamiento si:
  // - El inicio del rango 1 está dentro del rango 2
  // - El fin del rango 1 está dentro del rango 2
  // - El rango 1 engloba completamente al rango 2
  
  const inicio1DentroDeRango2 = start1Time >= start2Time && start1Time < end2Time;
  const fin1DentroDeRango2 = end1Time > start2Time && end1Time <= end2Time;
  const rango1ContieneRango2 = start1Time <= start2Time && end1Time >= end2Time;
  
  // También registramos el tiempo para depuración
  const haySupeposicion = inicio1DentroDeRango2 || fin1DentroDeRango2 || rango1ContieneRango2;
  
  if (haySupeposicion) {
    console.log(`Superposición de tiempo detectada:
      - Rango 1: ${start1.toISOString()} - ${end1.toISOString()}
      - Rango 2: ${start2.toISOString()} - ${end2.toISOString()}
      - Inicio1 dentro de Rango2: ${inicio1DentroDeRango2}
      - Fin1 dentro de Rango2: ${fin1DentroDeRango2}
      - Rango1 contiene Rango2: ${rango1ContieneRango2}
    `);
  }
  
  return haySupeposicion;
}

/**
 * Obtiene el inicio y fin del día en UTC para una fecha dada
 */
export function getUTCDayBounds(date: Date): { start: Date, end: Date } {
  const start = new Date(Date.UTC(
    date.getUTCFullYear(),
    date.getUTCMonth(),
    date.getUTCDate(),
    0, 0, 0, 0
  ));
  
  const end = new Date(Date.UTC(
    date.getUTCFullYear(),
    date.getUTCMonth(),
    date.getUTCDate(),
    23, 59, 59, 999
  ));
  
  return { start, end };
}

=====================================================
Archivo: src\lib\email-service.ts
=====================================================

// src/lib/email-service.ts
import nodemailer from 'nodemailer';

interface TurnoInfo {
  id: number;
  fecha: Date;
  cliente: {
    nombre: string;
    apellido: string;
    email: string;
  };
  barbero: {
    nombre: string;
    apellido: string;
  };
  sucursal: {
    nombre: string;
    direccion: string;
  };
  servicios: Array<{
    nombre: string;
    precio: number;
  }>;
}

// Configurar el transporte de correo con Gmail y SSL
const transporter = nodemailer.createTransport({
  host: 'smtp.gmail.com',
  port: 465,
  secure: true, // usar SSL
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASSWORD,
  },
});

export async function enviarConfirmacionTurno(turno: TurnoInfo) {
  try {
    // Formatear la fecha y hora
    const fechaFormateada = new Intl.DateTimeFormat('es-ES', {
      dateStyle: 'full',
      timeStyle: 'short'
    }).format(turno.fecha);

    // Calcular el precio total
    const precioTotal = turno.servicios.reduce((total, servicio) => total + servicio.precio, 0);

    // Generar la lista de servicios
    const serviciosHtml = turno.servicios
      .map(servicio => `<li>${servicio.nombre} - $${servicio.precio.toFixed(2)}</li>`)
      .join('');

    // Generar el token de cancelación (ejemplo simple, en producción usar algo más seguro)
    const tokenCancelacion = Buffer.from(`${turno.id}-${Date.now()}`).toString('base64');
    const urlCancelacion = `${process.env.NEXT_PUBLIC_APP_URL}/cancelar-turno?token=${tokenCancelacion}`;

    // Enviar el correo electrónico usando nodemailer
    const info = await transporter.sendMail({
      from: `"Barbería" <${process.env.EMAIL_USER}>`,
      to: turno.cliente.email,
      subject: 'Confirmación de Turno - Barbería',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 5px;">
          <h2 style="color: #333; text-align: center;">¡Tu turno ha sido confirmado!</h2>
          
          <div style="background-color: #f8f8f8; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
            <p style="margin: 5px 0;"><strong>Cliente:</strong> ${turno.cliente.nombre} ${turno.cliente.apellido}</p>
            <p style="margin: 5px 0;"><strong>Fecha y hora:</strong> ${fechaFormateada}</p>
            <p style="margin: 5px 0;"><strong>Barbero:</strong> ${turno.barbero.nombre} ${turno.barbero.apellido}</p>
            <p style="margin: 5px 0;"><strong>Sucursal:</strong> ${turno.sucursal.nombre}</p>
            <p style="margin: 5px 0;"><strong>Dirección:</strong> ${turno.sucursal.direccion}</p>
          </div>
          
          <h3 style="color: #555;">Servicios reservados:</h3>
          <ul style="list-style-type: none; padding-left: 0;">
            ${serviciosHtml}
          </ul>
          
          <p style="border-top: 1px solid #e0e0e0; padding-top: 10px;"><strong>Total a pagar:</strong> $${precioTotal.toFixed(2)}</p>
          
          <div style="text-align: center; margin-top: 30px;">
            <a href="${urlCancelacion}" style="display: inline-block; padding: 10px 20px; background-color: #e74c3c; color: white; text-decoration: none; border-radius: 4px;">Cancelar Turno</a>
          </div>
          
          <div style="margin-top: 30px; font-size: 14px; color: #777; text-align: center;">
            <p>Si necesitas realizar algún cambio, contáctanos al teléfono (123) 456-7890.</p>
            <p>¡Esperamos verte pronto!</p>
          </div>
        </div>
      `,
    });

    return { success: true, messageId: info.messageId };
  } catch (error) {
    console.error('Error en el servicio de email:', error);
    return { success: false, error };
  }
}

export async function enviarRecordatorioTurno(turno: TurnoInfo) {
  try {
    // Formatear la fecha y hora
    const fechaFormateada = new Intl.DateTimeFormat('es-ES', {
      dateStyle: 'full',
      timeStyle: 'short'
    }).format(turno.fecha);

    // Enviar el correo electrónico usando nodemailer
    const info = await transporter.sendMail({
      from: `"Barbería" <${process.env.EMAIL_USER}>`,
      to: turno.cliente.email,
      subject: 'Recordatorio de tu turno mañana - Barbería',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 5px;">
          <h2 style="color: #333; text-align: center;">Recordatorio de turno</h2>
          
          <p>Hola ${turno.cliente.nombre},</p>
          
          <p>Te recordamos que mañana tienes un turno agendado en nuestra barbería.</p>
          
          <div style="background-color: #f8f8f8; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <p style="margin: 5px 0;"><strong>Fecha y hora:</strong> ${fechaFormateada}</p>
            <p style="margin: 5px 0;"><strong>Barbero:</strong> ${turno.barbero.nombre} ${turno.barbero.apellido}</p>
            <p style="margin: 5px 0;"><strong>Sucursal:</strong> ${turno.sucursal.nombre}</p>
            <p style="margin: 5px 0;"><strong>Dirección:</strong> ${turno.sucursal.direccion}</p>
          </div>
          
          <p style="text-align: center;">¡Te esperamos!</p>
        </div>
      `,
    });

    return { success: true, messageId: info.messageId };
  } catch (error) {
    console.error('Error en el servicio de email (recordatorio):', error);
    return { success: false, error };
  }
}

// Función para verificar la conexión al servidor de correo
export async function verificarConexionEmail() {
  try {
    await transporter.verify();
    return { success: true, message: 'Conexión establecida correctamente' };
  } catch (error) {
    console.error('Error al verificar conexión de email:', error);
    return { success: false, error };
  }
}

=====================================================
Archivo: src\lib\mongodb.ts
=====================================================

import mongoose from 'mongoose';

if (!process.env.MONGODB_URI) {
  throw new Error('Please add your MONGODB_URI to .env.local');
}

const MONGODB_URI: string = process.env.MONGODB_URI;

let cached = global.mongoose;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

async function connectDB() {
  if (cached.conn) {
    return cached.conn;
  }

  if (!cached.promise) {
    const opts = {
      bufferCommands: false,
    };

    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {
      return mongoose;
    });
  }

  try {
    cached.conn = await cached.promise;
  } catch (e) {
    cached.promise = null;
    throw e;
  }

  return cached.conn;
}

export default connectDB;

=====================================================
Archivo: src\lib\prisma.ts
=====================================================

//my-app\src\lib\prisma.ts
import { PrismaClient } from '@prisma/client';

declare global {
  var prisma: PrismaClient | undefined;
}

const prisma = global.prisma || new PrismaClient({
  log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],
});

if (process.env.NODE_ENV !== 'production') global.prisma = prisma;

// Middleware de auditoría
prisma.$use(async (params, next) => {
  const start = Date.now();
  const result = await next(params);
  const duration = Date.now() - start;
  
  console.log(`Query ${params.model}.${params.action} took ${duration}ms`);
  
  if (duration > 2000) {
    console.warn('Slow query detected:', {
      model: params.model,
      action: params.action,
      duration: `${duration}ms`
    });
  }
  
  return result;
});

export default prisma;

=====================================================
Archivo: src\lib\utils.ts
=====================================================

import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

=====================================================
Archivo: src\middleware.ts
=====================================================

// src/middleware.ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  console.log('Middleware ejecutado para la ruta:', request.nextUrl.pathname);
  
  // Solo interceptar rutas administrativas
  if (request.nextUrl.pathname.startsWith('/admin')) {
    // No interceptar la página de login
    if (request.nextUrl.pathname === '/admin/login') {
      console.log('Ruta de login, permitiendo acceso');
      return NextResponse.next();
    }

    // Solo verificar si existe el token, no lo validamos en el middleware
    const token = request.cookies.get('admin_token');
    console.log('Token encontrado:', !!token);

    if (!token) {
      console.log('No hay token, redirigiendo a login');
      return NextResponse.redirect(new URL('/admin/login', request.url));
    }

    // Permitir acceso sin verificar el token
    return NextResponse.next();
  }

  return NextResponse.next();
}

export const config = {
  matcher: '/admin/:path*'
};

=====================================================
Archivo: src\models\Nota.ts
=====================================================

//my-app\src\models\Nota.ts

import mongoose from 'mongoose';

const NotaSchema = new mongoose.Schema({
  titulo: {
    type: String,
    required: [true, 'Por favor ingrese un título'],
    maxlength: [40, 'El título no puede ser más largo de 40 caracteres']
  },
  descripcion: {
    type: String,
    required: [true, 'Por favor ingrese una descripción'],
    maxlength: [200, 'La descripción no puede ser más larga de 200 caracteres']
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

export default mongoose.models.Nota || mongoose.model('Nota', NotaSchema);

=====================================================
Archivo: src\styles\Admin.css
=====================================================

/* styles/admin.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  /* Common styles */
  .admin-card {
    @apply bg-gray-800/50 backdrop-blur-sm rounded-xl border border-gray-700/30;
  }
  
  .admin-button-primary {
    @apply px-3 py-2 bg-blue-600/30 hover:bg-blue-700/40 text-blue-300 rounded-md text-sm font-medium transition-colors;
  }
  
  .admin-button-danger {
    @apply px-3 py-2 bg-red-600/30 hover:bg-red-700/40 text-red-300 rounded-md text-sm font-medium transition-colors;
  }
  
  .admin-badge {
    @apply px-2 py-1 rounded-lg text-xs font-medium;
  }
  
  .admin-input {
    @apply px-3 py-2 bg-gray-700/50 border border-gray-600/30 text-white rounded-lg backdrop-blur-sm;
  }
  
  /* Header styles */
  .admin-header {
    @apply fixed top-0 left-0 right-0 z-40 bg-gray-800 shadow-md;
  }
  
  /* Sidebar styles */
  .admin-sidebar {
    @apply hidden md:block fixed left-0 top-0 w-64 bg-gray-800 text-white p-4 h-full z-40;
  }
  
  .admin-sidebar-item {
    @apply block py-2.5 px-4 rounded hover:bg-gray-700 transition-colors text-sm font-medium;
  }
  
  .admin-sidebar-item-active {
    @apply block py-2.5 px-4 rounded bg-blue-600 text-white text-sm font-medium;
  }
  
  /* Mobile menu styles */
  .admin-mobile-menu {
    @apply fixed md:hidden z-30 bg-gray-800 shadow-lg transition-all duration-300;
  }
  
  .admin-mobile-menu-open {
    @apply translate-y-14;
  }
  
  .admin-mobile-menu-closed {
    @apply -translate-y-full;
  }

=====================================================
Archivo: src\styles\tailwind.css
=====================================================

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  .admin-glass {
    @apply bg-gray-900/50 backdrop-blur-md border border-gray-700/30;
  }
  

}

=====================================================
Archivo: tailwind.config.ts
=====================================================

import type { Config } from 'tailwindcss'

const config: Config = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
    './src/styles/**/*.css' // Añade esta línea
  ],
  theme: {
    extend: {
      // Mantén tus extensiones personalizadas
      backdropBlur: {
        xs: '2px',
        sm: '4px',
        DEFAULT: '8px',
        md: '12px',
        lg: '16px',
      },
      screens: {
        'admin-md': '900px',
        // Añade breakpoints móviles personalizados
        'mobile-sm': '320px',
        'mobile-md': '375px',
        'mobile-lg': '425px',
      },

      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
      },
    },
  },
  plugins: [
    // Plugin para mejor soporte móvil
    function ({ addVariant }: any) {
      addVariant('mobile', '@media (pointer: coarse) and (max-width: 768px)')
    }
  ],
}
export default config

=====================================================
Archivo: test-schema.js
=====================================================

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function main() {
  try {
    // Intenta obtener la estructura de la tabla Barbero
    const tableInfo = await prisma.$queryRaw`
      SELECT COLUMN_NAME, DATA_TYPE 
      FROM INFORMATION_SCHEMA.COLUMNS 
      WHERE TABLE_NAME = 'Barbero'
    `;
    console.log('Columns in Barbero table:', tableInfo);
    
    // Intenta hacer una consulta simple
    const firstBarber = await prisma.barbero.findFirst();
    console.log('First barber:', firstBarber);
    
    // Muestra los campos disponibles en el modelo Prisma
    console.log('Available fields in Prisma Barbero model:', Object.keys(prisma.barbero.fields));
  } catch (error) {
    console.error('Error checking schema:', error);
  }
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });

=====================================================
Archivo: tsconfig.json
=====================================================

{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
